{"version":3,"sources":["webpack://PersianDate/webpack/universalModuleDefinition","webpack://PersianDate/webpack/bootstrap","webpack://PersianDate/./src/PersianDate.js","webpack://PersianDate/./src/utils.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACuD;;AAEvD;AACA;AACA;AACA,WAAW,8BAA8B;AACzC,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,wBAAwB;AACpC,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,qBAAqB;AACjC,cAAc,OAAO;AACrB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA,UAAU,kDAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,sBAAsB;AAClC,YAAY,mBAAmB;AAC/B,cAAc,OAAO;AACrB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kDAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,qBAAqB;AACjC,YAAY,QAAQ;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA,SAAS,kDAAQ;AACjB;;AAEA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,0BAA0B;AACtC,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,2BAA2B;AACvC,YAAY,cAAc;AAC1B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,QAAQ;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,kDAAkD;AAClD;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,2CAA2C;AAC3C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,+BAA+B;AAC/B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB;AACA,cAAc,YAAY;AAC1B,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,OAAO;AACrB,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA,GAAG,+CAAK;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0DAAQ;;AAE1B;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kDAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kDAAQ;AACnB;AACA;AACA;AACA,WAAW,kDAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA,MAAM,+CAAK;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B,cAAc,0BAA0B;AACxC;AACA,aAAa,mBAA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B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,YAAY,mBAAmB;AAC/B,cAAc,KAAK;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,qCAAqC;AACjD,YAAY,YAAY;AACxB,YAAY,kBAAkB;AAC9B,cAAc,SAAS;AACvB,aAAa,YAAY;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,wCAAwC;AACpD,YAAY,YAAY;AACxB,YAAY,YAAY;AACxB,cAAc,EAAE;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,0EAAW,EAAC;;AAE3B;AACA;;;;;;;;;;;;;ACpmFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PersianDate.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PersianDate\"] = factory();\n\telse\n\t\troot[\"PersianDate\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/PersianDate.js\");\n","////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\nimport { CALENDAR, TIMETYPE, REGEX } from \"./utils.js\";\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {Date|Array|Null|Object|String} date - the date that convert to persian date\n * @param {String} [calendar='jalali'] - the calendar\n */\nconst PersianDate = function (date, calendar) {\n\t\"use strict\";\n\n\t/**\n\t * keeps the date and time\n\t * @type {Object}\n\t * @property {Number} year - the year of date\n\t * @property {Number} month - the month of date\n\t * @property {Number} date - the day of month of date\n\t * @property {Number} hour - the hour of time\n\t * @property {Number} minute - the minute of time\n\t * @property {Number} second - the second of time\n\t * @property {Number} millisecond - the millisecond of time\n\t * @property {Number} gregorian - the gregorian date\n\t */\n\tthis.d = {};\n\n\t/**\n\t * the calendar type\n\t * @type {String}\n\t * @default \"jalali\"\n\t * @example jalali | gregorian\n\t */\n\tthis.c = \"jalali\";\n\n\t/**\n\t * Gregorian to Jalali\n\t * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n\t * @param {Null|Number|String} [month=1] - Gregorian month\n\t * @param {Null|Number|String} [day=1] - Gregorian day\n\t * @param {Null|Number|String} [hour=0] - Gregorian hour\n\t * @param {Null|Number|String} [minute=0] - Gregorian minute\n\t * @param {Null|Number|String} [second=0] - Gregorian second\n\t * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n\t * @returns {Array} Jalali date\n\t */\n\tconst gtj = (year, month, day, hour, minute, second, millisecond) => {\n\t\tlet date;\n\t\tif (!year) date = new Date();\n\t\telse if (\n\t\t\tObject.prototype.toString.call(year) === \"[object Date]\"\n\t\t)\n\t\t\t// if the year was an instance of Date\n\t\t\tdate = year;\n\t\telse\n\t\t\tdate = new Date(\n\t\t\t\tyear,\n\t\t\t\tmonth || 0,\n\t\t\t\tday || 1,\n\t\t\t\thour || 0,\n\t\t\t\tminute || 0,\n\t\t\t\tsecond || 0,\n\t\t\t\tmillisecond || 0\n\t\t\t);\n\t\tday = date.getDate();\n\t\tmonth = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n\t\tyear = date.getFullYear();\n\t\thour = date.getHours();\n\t\tminute = date.getMinutes();\n\t\tsecond = date.getSeconds();\n\t\tmillisecond = date.getMilliseconds();\n\t\tlet jYear, jMonth, jDay;\n\t\tlet pastDaysInMonth = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t59,\n\t\t\t90,\n\t\t\t120,\n\t\t\t151,\n\t\t\t181,\n\t\t\t212,\n\t\t\t243,\n\t\t\t273,\n\t\t\t304,\n\t\t\t334,\n\t\t]; //Past days from the start of the year in each month\n\t\tif (year > 1600) {\n\t\t\tjYear = 979;\n\t\t\tyear -= 1600;\n\t\t} else {\n\t\t\tjYear = 0;\n\t\t\tyear -= 621;\n\t\t}\n\t\tlet newYear = month > 2 ? year + 1 : year;\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt((newYear + 3) / 4) -\n\t\t\tparseInt((newYear + 99) / 100) +\n\t\t\tparseInt((newYear + 399) / 400) -\n\t\t\t80 +\n\t\t\tday +\n\t\t\tpastDaysInMonth[month - 1];\n\t\tjYear += 33 * parseInt(days / 12053);\n\t\tdays %= 12053;\n\t\tjYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tjYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tjMonth =\n\t\t\tdays < 186\n\t\t\t\t? 1 + parseInt(days / 31)\n\t\t\t\t: 7 + parseInt((days - 186) / 30);\n\t\tjDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n\t\treturn [jYear, jMonth, jDay, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * Jalali to Gregorian\n\t * @param {Null|Number|String} year - Jalali year\n\t * @param {Null|Number|String} [month=1] -  Jalali month\n\t * @param {Null|Number|String} [day=1] -  Jalali day\n\t * @param {Null|Number|String} [hour=0] -  Jalali hour\n\t * @param {Null|Number|String} [minute=0] -  Jalali minute\n\t * @param {Null|Number|String} [second=0] -  Jalali second\n\t * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n\t * @returns {Date} Gregorian date\n\t */\n\tconst jtg = (year, month, day, hour, minute, second, millisecond) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tyear = +year;\n\t\tmonth = +month || 1;\n\t\tday = +day || 1;\n\t\thour = +hour || 0;\n\t\tminute = +minute || 0;\n\t\tsecond = +second || 0;\n\t\tmillisecond = +millisecond || 0;\n\t\tlet gYear, gMonth, gDay;\n\t\tif (year > 979) {\n\t\t\tgYear = 1600;\n\t\t\tyear -= 979;\n\t\t} else {\n\t\t\tgYear = 621;\n\t\t}\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt(year / 33) * 8 +\n\t\t\tparseInt(((year % 33) + 3) / 4) +\n\t\t\t78 +\n\t\t\tday +\n\t\t\t(month < 7 ? (month - 1) * 31 : (month - 7) * 30 + 186);\n\t\tgYear += 400 * parseInt(days / 146097);\n\t\tdays %= 146097;\n\t\tif (days > 36524) {\n\t\t\tgYear += 100 * parseInt(--days / 36524);\n\t\t\tdays %= 36524;\n\t\t\tif (days >= 365) days++;\n\t\t}\n\t\tgYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tgYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tgDay = days + 1;\n\t\tlet daysOfMonths = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t(gYear % 4 == 0 && gYear % 100 != 0) || gYear % 400 == 0\n\t\t\t\t? 29\n\t\t\t\t: 28,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t];\n\t\tfor (gMonth = 0; gMonth < 13; gMonth++) {\n\t\t\tlet v = daysOfMonths[gMonth];\n\t\t\tif (gDay <= v) break;\n\t\t\tgDay -= v;\n\t\t}\n\n\t\treturn new Date(\n\t\t\tgYear,\n\t\t\tgMonth - 1,\n\t\t\tgDay,\n\t\t\thour,\n\t\t\tminute,\n\t\t\tsecond,\n\t\t\tmillisecond\n\t\t);\n\t};\n\n\t/**\n\t * get label of day\n\t * @param {Date} date - the date that received day\n\t * @param {'jalali'|'gregorian'} calendar - the calendar\n\t * @returns {String} returns day label\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t * @example Saturday | شنبه\n\t */\n\tconst getDayLabel = (date = new Date(), calendar = \"jalali\") => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\treturn CALENDAR[calendar][\"days\"][\"label\"][\n\t\t\t\tdate.getDay()\n\t\t\t];\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the week\n\t * @param {Date} date - the date that received day of week\n\t * @param {'jalali', 'gregorian'} calendar - the calendar\n\t * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n\t * @returns {Number} the number of the day of week\n\t * @throws {PersianDate} if date invalid return class with error property\n\t */\n\tconst getDayOfWeek = (\n\t\tdate = new Date(),\n\t\tcalendar = \"jalali\",\n\t\tmode = \"standard\"\n\t) => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\") {\n\t\t\t// if the year was an instance of Date\n\t\t\treturn (\n\t\t\t\tCALENDAR[calendar][\"days\"][\"weekNumber\"][\n\t\t\t\tdate.getDay()\n\t\t\t\t] + (mode != \"standard\" ? 0 : 1)\n\t\t\t);\n\t\t}\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the year\n\t * @param {Null|Number|String} month - the month of date that gives the day of the year\n\t * @param {Null|Number|String} day - the day of date that gives the day of the year\n\t * @param {Null|Number|String} calendar - the calendar\n\t * @returns {Number} the day of the year\n\t */\n\tconst getDayOfYear = (year, month, day, calendar) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tmonth = +month;\n\t\tday = +day;\n\t\twhile (--month != 0) {\n\t\t\tday += new PersianDate(\n\t\t\t\t[year, month],\n\t\t\t\tcalendar\n\t\t\t).getDaysInMonth();\n\t\t}\n\t\treturn day;\n\t};\n\n\t/**\n\t * get the week of the year\n\t * @param {Null|Number|String} year - the year of date that gives the week of the year\n\t * @param {Null|Number|String} month - the month of date that gives the week of the year\n\t * @param {Null|Number|String} day - the day of date that gives the week of the year\n\t * @param {String} calendar - the calendar\n\t * @returns {Number} the week of the year\n\t */\n\tconst getWeekOfYear = (year, month, day, calendar) => {\n\t\tlet dayOfYearFormat = calendar == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = new PersianDate()\n\t\t\t.calendar(calendar)\n\t\t\t.parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet date = firstOfYear.clone().parse(year, month, day);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\n\t\tlet weekNumber = Math.ceil(\n\t\t\tdate.diff(firstOfYear, \"date\", true) / 7\n\t\t);\n\n\t\tlet weeksInYear = date.clone().getWeeksInYear();\n\t\treturn weekNumber > weeksInYear ? weeksInYear : weekNumber;\n\t};\n\n\t/**\n\t * returns the ordinal number of that number sent to it\n\t * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n\t * @param {'jalali','gregorian'} calendar - the calendar\n\t * @param {?Number} mode  - 'jalali' calendar have two mode of ordinal number\n\t * @returns {String} ordinal number\n\t * @example 1st | اول | اولین\n\t */\n\tconst ordinalNumber = (number, calendar = \"jalali\", mode = 1) => {\n\t\treturn CALENDAR[calendar].ordinalNumbers(number, mode);\n\t};\n\n\t/**\n\t * add a prefix to the text in the number of characters that the text has less\n\t * @param {String|Number} text a text need prefix\n\t * @param {Number} length length of text\n\t * @param {String} [prefix=0] - string for add before of text\n\t * @returns {String} text with or wihtout prefix\n\t */\n\tconst addPrefix = (text, length, prefix = \"0\") => {\n\t\treturn prefix.repeat(length - String(text).length) + text;\n\t};\n\n\t/**\n\t * make error and delete this.d\n\t * @param {String} errorText - Error Text\n\t * @returns {PersianDate} make error and return class\n\t */\n\tconst showError = (errorText, instance) => {\n\t\tdelete instance.d;\n\t\tinstance.error = errorText;\n\t\treturn errorText;\n\t};\n\n\t/**\n\t * make current date in persian calendar\n\t * @returns {PersianDate} make current date and return class\n\t */\n\tPersianDate.prototype.now = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\tlet date = new Date();\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * set persian date from Gregorian date\n\t * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.setDate = function (...date) {\n\t\tdeprecate(\n\t\t\t'\"setDate\" function is deprecated! use \"fromGregorian\" function instead.\\n' +\n\t\t\t\"https://alireza-ab.ir/persian-date/create-and-parse#from-gregorian-date\"\n\t\t);\n\t\treturn this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * convert a jalali or gregorian date to PersianDate instance\n\t * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.parse = function (...date) {\n\t\tif (this.c == \"jalali\") return this.fromJalali(...date);\n\t\telse return this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * receives year and determined that is leap year or not\n\t * @param {?Number} year - the year to be determined is a leap or not\n\t * @returns {Boolean} if is leap year, returns true\n\t */\n\tPersianDate.prototype.isLeapYear = function (year) {\n\t\tif (this.error) return false;\n\t\tif (!year) year = this.year();\n\t\tif (this.c == \"jalali\") {\n\t\t\tlet array =\n\t\t\t\tyear > 1342\n\t\t\t\t\t? [1, 5, 9, 13, 17, 22, 26, 30]\n\t\t\t\t\t: [1, 5, 9, 13, 17, 21, 26, 30];\n\t\t\tlet remainder = year % 33;\n\t\t\treturn array.includes(remainder);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t(year % 4 == 0 && year % 100 != 0) ||\n\t\t\t\tyear % 400 == 0\n\t\t\t);\n\t\t}\n\t};\n\n\t/**\n\t * checks the persian date and time\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid, returns true\n\t */\n\tPersianDate.prototype.isValid = function (\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\treturn (\n\t\t\tthis.isValidDate(year, month, day) &&\n\t\t\tthis.isValidTime(hour, minute, second, millisecond)\n\t\t);\n\t};\n\n\t/**\n\t * checks the persian date\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @returns {Boolean} if is valid date, returns true\n\t */\n\tPersianDate.prototype.isValidDate = function (year, month, day) {\n\t\tif (this.error) return false;\n\t\tif (!year) {\n\t\t\tyear = this.d.year;\n\t\t\tmonth = this.d.month;\n\t\t\tday = this.d.date;\n\t\t}\n\t\tif (\n\t\t\t[year, month, day].some(\n\t\t\t\t(e) => String(e).search(/null|NaN/) != -1\n\t\t\t)\n\t\t)\n\t\t\treturn false;\n\t\tif (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n\t\t\treturn false;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 7 && month <= 11 && day == 31)\n\t\t\t\treturn false;\n\t\t\tif (month == 12 && day == 31) return false;\n\t\t\tif (month == 12 && day == 30 && !this.isLeapYear(year))\n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif ([2, 4, 6, 9, 11].includes(month) && day == 31)\n\t\t\t\treturn false;\n\t\t\tif (\n\t\t\t\tmonth == 2 &&\n\t\t\t\t(day == 30 ||\n\t\t\t\t\t(day == 29 && !this.isLeapYear(year)))\n\t\t\t)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t/**\n\t * checks the time\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid time, returns true\n\t */\n\tPersianDate.prototype.isValidTime = function (\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\tif (hour == undefined) {\n\t\t\thour = this.d.hour;\n\t\t\tminute = this.d.minute;\n\t\t\tsecond = this.d.second;\n\t\t\tmillisecond = this.d.millisecond;\n\t\t}\n\n\t\tif (\n\t\t\t[hour, minute, second, millisecond].some(\n\t\t\t\t(e) => String(e).search(/null|NaN/) != -1\n\t\t\t)\n\t\t)\n\t\t\treturn false;\n\t\tif (hour < 0 || hour > 23) return false;\n\t\tif (minute < 0 || minute > 59) return false;\n\t\tif (second < 0 || second > 59) return false;\n\t\tif (millisecond < 0 || millisecond > 999) return false;\n\t\treturn true;\n\t};\n\n\t/**\n\t * returns number of days in month\n\t * @param {?Number} year - year of date that returns number of days in month\n\t * @param {?Number} month - month of date that returns number of days in month\n\t * @returns {Number} number of days in month\n\t */\n\tPersianDate.prototype.getDaysInMonth = function (\n\t\tyear = this.d.year,\n\t\tmonth = this.d.month\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 1 && month <= 6) return 31;\n\t\t\tif (\n\t\t\t\t(month > 6 && month <= 11) ||\n\t\t\t\tthis.isLeapYear(year)\n\t\t\t) {\n\t\t\t\treturn 30;\n\t\t\t}\n\t\t\treturn 29;\n\t\t} else {\n\t\t\tif ([1, 3, 5, 7, 8, 10, 12].includes(month)) return 31;\n\t\t\tif (month == 2) {\n\t\t\t\tif (this.isLeapYear(year)) return 29;\n\t\t\t\treturn 28;\n\t\t\t}\n\t\t\treturn 30;\n\t\t}\n\t};\n\n\t/**\n\t * add to year\n\t * @param {?Number|String} [year=1] - a number for add with year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\tif (year < 0)\n\t\t\t// if the number was negative, send to subYear method\n\t\t\treturn this.subYear(Math.abs(year));\n\t\tthis.d.year += +year; //plus sign before a variable, convert variable to int\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to month\n\t * @param {?Number|String} [month=1] - a number for add with month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addMonth = function (\n\t\tmonth = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tif (month < 0)\n\t\t\t// if the number was negative, send to subMonth method\n\t\t\treturn this.subMonth(Math.abs(month));\n\t\tmonth = +month; // plus sign before a variable, convert variable to int\n\n\t\tlet monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n\t\tif (monthToStartNewYear > month) {\n\t\t\tthis.d.month += month;\n\t\t} else {\n\t\t\tthis.addYear(1, false);\n\t\t\tthis.d.month = 1;\n\t\t\tmonth -= monthToStartNewYear;\n\t\t\twhile (month >= 12) {\n\t\t\t\tmonth -= 12;\n\t\t\t\tthis.addYear(1, false);\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month += month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to day\n\t * @param {?Number|String} [day=1] - a number for add with day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tif (day < 0)\n\t\t\t// if the number was negative, send to subDay method\n\t\t\treturn this.subDay(Math.abs(day));\n\t\tday = +day; //plus sign before a variable, convert variable to int\n\n\t\tlet dayToStartNextMonth =\n\t\t\tthis.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n\t\tif (dayToStartNextMonth > day) {\n\t\t\tthis.d.date += day;\n\t\t} else {\n\t\t\tthis.addMonth(1, false);\n\t\t\tthis.d.date = 1;\n\t\t\tday -= dayToStartNextMonth;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.addMonth(1, false);\n\t\t\t}\n\t\t\tif (day != 0) {\n\t\t\t\tthis.d.date += day;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to quarter\n\t * @param {?Number|String} [quarter=1] - a number for add with quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addQuarter = function (\n\t\tquarter = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tif (quarter < 0)\n\t\t\t// if the number was negative, send to subQuarter method\n\t\t\treturn this.subQuarter(Math.abs(quarter));\n\t\tquarter = +quarter; //plus sign before a variable, convert variable to int\n\t\treturn this.addMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * add to week\n\t * @param {?Number|String} [week=1] - a number for add with week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tif (week < 0)\n\t\t\t// if the number was negative, send to subWeek method\n\t\t\treturn this.subWeek(Math.abs(week));\n\t\tweek = +week; //plus sign before a variable, convert variable to int\n\t\treturn this.addDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * add to hour\n\t * @param {?Number|String} [hour=1] - a number for add with hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\tif (hour < 0)\n\t\t\t// if the number was negative, send to subHour method\n\t\t\treturn this.subHour(Math.abs(hour));\n\t\thour = +hour; //plus sign before a variable, convert variable to int\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.addDay(1, false);\n\t\t}\n\t\tlet hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n\t\tif (hour >= hourToNextDay) {\n\t\t\tthis.addDay(1, false);\n\t\t\thour -= hourToNextDay;\n\t\t\tthis.d.hour = hour;\n\t\t} else this.d.hour += hour;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to minute\n\t * @param {?Number|String} [minute=1] - a number for add with minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addMinute = function (\n\t\tminute = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tif (minute < 0)\n\t\t\t// if the number was negative, send to subMinute method\n\t\t\treturn this.subMinute(Math.abs(minute));\n\t\tminute = +minute; //plus sign before a variable, convert variable to int\n\t\twhile (minute >= 60) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= 60;\n\t\t}\n\t\tlet minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n\t\tif (minute >= minuteToNextHour) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= minuteToNextHour;\n\t\t\tthis.d.minute = minute;\n\t\t} else this.d.minute += minute;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to second\n\t * @param {?Number|String} [second=1] - a number for add with second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addSecond = function (\n\t\tsecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tif (second < 0)\n\t\t\t// if the number was negative, send to subSecond method\n\t\t\treturn this.subSecond(Math.abs(second));\n\t\tsecond = +second; //plus sign before a variable, convert variable to int\n\t\twhile (second >= 60) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= 60;\n\t\t}\n\t\tlet secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n\t\tif (second >= secondToNextMinute) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= secondToNextMinute;\n\t\t\tthis.d.second = second;\n\t\t} else this.d.second += second;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tif (millisecond < 0)\n\t\t\t// if the number was negative, send to subMillisecond method\n\t\t\treturn this.subMillisecond(Math.abs(millisecond));\n\t\tmillisecond = +millisecond; //plus sign before a variable, convert variable to int\n\t\twhile (millisecond >= 1000) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= 1000;\n\t\t}\n\t\tlet millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n\t\tif (millisecond >= millisecondToNextSecond) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= millisecondToNextSecond;\n\t\t\tthis.d.millisecond = millisecond;\n\t\t} else this.d.millisecond += millisecond;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from year\n\t * @param {?Number|String} [year=1] - a number for subtract from year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n\t\tif (!year) return this;\n\t\tthis.d.year -= year = Math.abs(year); //plus sign before a variable, convert variable to int\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from month\n\t * @param {?Number|String} [month=1] - a number for subtract from month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subMonth = function (\n\t\tmonth = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tmonth = Math.abs(month); //plus sign before a variable, convert variable to int\n\t\tlet pastMonth = this.d.month; //pastMonth -> Number of month that is past\n\t\tif (pastMonth > month) {\n\t\t\tthis.d.month -= month;\n\t\t} else {\n\t\t\tthis.subYear(1, false);\n\t\t\tthis.d.month = 12;\n\t\t\tmonth -= pastMonth;\n\t\t\twhile (month >= 12) {\n\t\t\t\tthis.subYear(1, false);\n\t\t\t\tmonth -= 12;\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month -= month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from day\n\t * @param {?Number|String} [day=1] - a number for subtract from day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tday = Math.abs(day);\n\t\tlet pastDays = this.d.date; // pastDays -> Number of days that is past\n\t\tif (pastDays > day) {\n\t\t\tthis.d.date -= day;\n\t\t} else {\n\t\t\tthis.subMonth(1, false);\n\t\t\tthis.d.date = this.getDaysInMonth();\n\t\t\tday -= pastDays;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.subMonth(1, false);\n\t\t\t}\n\t\t\tthis.d.date = this.getDaysInMonth() - day;\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from quarter\n\t * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subQuarter = function (\n\t\tquarter = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tquarter = Math.abs(quarter);\n\t\treturn this.subMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * subtract from week\n\t * @param {?Number|String} [week=1] - a number for subtract from week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tweek = Math.abs(week);\n\t\treturn this.subDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * subtract from hour\n\t * @param {?Number|String} [hour=1] - a number for subtract from hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\thour = Math.abs(hour);\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\tlet pastHours = this.d.hour; // pastHours -> Number of hours that is past\n\t\tif (hour > pastHours) {\n\t\t\tthis.subDay(1, false);\n\t\t\thour -= pastHours;\n\t\t\tthis.d.hour = 24 - hour;\n\t\t} else this.d.hour -= hour;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from minute\n\t * @param {?Number|String} [minute=1] - a number for subtract from minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subMinute = function (\n\t\tminute = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tminute = Math.abs(minute);\n\t\twhile (minute >= 60) {\n\t\t\tminute -= 60;\n\t\t\tthis.subHour(1, false);\n\t\t}\n\t\tlet pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n\t\tif (minute > pastMinute) {\n\t\t\tthis.subHour(1, false);\n\t\t\tminute -= pastMinute;\n\t\t\tthis.d.minute = 60 - minute;\n\t\t} else this.d.minute -= minute;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from second\n\t * @param {?Number|String} [second=1] - a number for subtract from second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subSecond = function (\n\t\tsecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tsecond = Math.abs(second);\n\t\twhile (second >= 60) {\n\t\t\tsecond -= 60;\n\t\t\tthis.subMinute(1, false);\n\t\t}\n\t\tlet pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n\t\tif (second > pastSeconds) {\n\t\t\tthis.subMinute(1, false);\n\t\t\tsecond -= pastSeconds;\n\t\t\tthis.d.second = 60 - second;\n\t\t} else this.d.second -= second;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tmillisecond = Math.abs(millisecond);\n\t\twhile (millisecond >= 1000) {\n\t\t\tmillisecond -= 1000;\n\t\t\tthis.subSecond(1, false);\n\t\t}\n\t\tlet pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n\t\tif (millisecond > pastMilliseconds) {\n\t\t\tthis.subSecond(1, false);\n\t\t\tmillisecond -= pastMilliseconds;\n\t\t\tthis.d.millisecond = 1000 - millisecond;\n\t\t} else this.d.millisecond -= millisecond;\n\n\t\twhile (checkDate && !this.isValidTime())\n\t\t\tthis.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * returns date as string with specify format\n\t * @param {?String} [format=date] - formatting date to string\n\t * @returns {String} date string\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toString = function (format = \"date\") {\n\t\tif (this.error) return this.error;\n\t\tlet texts = [];\n\t\tformat = format.replace(\n\t\t\tREGEX[\"betweenBacktick\"],\n\t\t\t(matched, text) => {\n\t\t\t\ttexts.push(text);\n\t\t\t\treturn \"###\";\n\t\t\t}\n\t\t);\n\t\tformat = format.replace(/\\?/g, this.c == 'jalali' ? 'j' : '')\n\t\tif (this.c == \"jalali\")\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"jYYYY/jMM/jDD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"jYYYY/jMM/jDD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\telse\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"YYYY-MM-DD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"YYYY-MM-DD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\tlet matchedFormat = format.match(REGEX[\"format\"]);\n\t\tlet dateString = \"\";\n\t\tfor (const i of matchedFormat) {\n\t\t\tdateString += format.substring(0, format.indexOf(i));\n\t\t\tif (i.search(/Y|y/) != -1) dateString += this.year(i);\n\t\t\telse if (i.search(/Q/) != -1)\n\t\t\t\tdateString += this.quarter(i);\n\t\t\telse if (i.search(/M/) != -1)\n\t\t\t\tdateString += this.month(i);\n\t\t\telse if (i.search(/Q/) != -1)\n\t\t\t\tdateString += this.quarter(i);\n\t\t\telse if (i.search(/D|d/) != -1)\n\t\t\t\tdateString += this.date(i);\n\t\t\telse if (i.search(/W|w/) != -1)\n\t\t\t\tdateString += this.week(i);\n\t\t\telse if (i.search(/H|h|k/) != -1)\n\t\t\t\tdateString += this.hour(i);\n\t\t\telse if (i.search(/m/) != -1)\n\t\t\t\tdateString += this.minute(i);\n\t\t\telse if (i.search(/s/) != -1)\n\t\t\t\tdateString += this.second(i);\n\t\t\telse if (i.search(/c|C/) != -1)\n\t\t\t\tdateString += this.millisecond(i);\n\t\t\telse if (i.search(/t/) != -1)\n\t\t\t\tdateString += this.timestamp();\n\t\t\telse if (i.search(/a|A/) != -1)\n\t\t\t\tdateString += TIMETYPE(this.d.hour, i);\n\n\t\t\tformat = format.substr(format.indexOf(i) + i.length);\n\t\t}\n\t\tdateString += format;\n\t\tfor (let i = 0; i < texts.length; i++)\n\t\t\tdateString = dateString.replace(\"###\", texts[i]);\n\t\treturn String(dateString);\n\t};\n\n\t/**\n\t * get or set year\n\t * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the year, returns class,\n\t * else returns a number or string from year\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.year = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tthis.d.year = +format;\n\t\t\tif (!this.isValidDate()) {\n\t\t\t\treturn this.addYear(format);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format)\n\t\t\t\tformat = this.c == \"jalali\" ? \"jYYYY\" : \"YYYY\";\n\t\t\tlet year =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? this.d.year\n\t\t\t\t\t: gtj(this.toDate())[0];\n\t\t\tif (format == \"jYYYY\" || format == \"jy\") return year;\n\t\t\tif (format == \"jYY\") return String(year).slice(-2);\n\t\t\tlet gYear =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? this.toDate().getFullYear()\n\t\t\t\t\t: this.d.year;\n\t\t\tif (format == \"YYYY\" || format == \"y\") return gYear;\n\t\t\tif (format == \"YY\") return String(gYear).slice(-2);\n\t\t\treturn year;\n\t\t}\n\t};\n\n\t/**\n\t * get or set month\n\t * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the month, returns class,\n\t * else returns a number or string from month\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.month = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subMonth(--format);\n\t\t\t} else if (format > 12) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addMonth(format - 12);\n\t\t\t}\n\t\t\tthis.d.month = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jM\" : \"M\";\n\t\t\tlet month =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? this.d.month\n\t\t\t\t\t: gtj(this.toDate())[1];\n\t\t\tif (format == \"jMM\") return addPrefix(month, 2);\n\t\t\tif (format == \"jM\") return month;\n\t\t\tif (format == \"jMMMM\" || format == \"jMMM\")\n\t\t\t\treturn CALENDAR[\"jalali\"][\"months\"][month];\n\t\t\tif (format == \"jMo\") return ordinalNumber(month);\n\t\t\tif (format == \"jMO\")\n\t\t\t\treturn ordinalNumber(month, \"jalali\", 2);\n\t\t\tlet gMonth =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? this.toDate().getMonth() + 1\n\t\t\t\t\t: this.d.month;\n\t\t\tif (format == \"M\") return gMonth;\n\t\t\tif (format == \"MM\") return addPrefix(gMonth, 2);\n\t\t\tif (format == \"MMMM\")\n\t\t\t\treturn CALENDAR[\"gregorian\"][\"months\"][gMonth];\n\t\t\tif (format == \"Mo\" || format == \"MO\")\n\t\t\t\treturn ordinalNumber(gMonth, \"gregorian\");\n\t\t\tif (format == \"MMM\")\n\t\t\t\treturn CALENDAR[\"gregorian\"][\"months\"][\n\t\t\t\t\tgMonth\n\t\t\t\t].slice(0, 3);\n\t\t\treturn month;\n\t\t}\n\t};\n\n\t/**\n\t * get or set day in month\n\t * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the day, returns class,\n\t * else returns a number or string from day\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.date = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet daysInMonth = this.getDaysInMonth();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.date = 1;\n\t\t\t\treturn this.subDay(--format);\n\t\t\t} else if (format > daysInMonth) {\n\t\t\t\tthis.d.date = daysInMonth;\n\t\t\t\treturn this.addDay(format - daysInMonth);\n\t\t\t}\n\t\t\tthis.d.date = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jD\" : \"D\";\n\t\t\tlet date =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? this.d.date\n\t\t\t\t\t: gtj(this.toDate())[2];\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"jDD\") return addPrefix(date, 2);\n\t\t\tif (format == \"jD\") return date;\n\t\t\tif (format == \"jDo\") return ordinalNumber(date);\n\t\t\tif (format == \"jDO\")\n\t\t\t\treturn ordinalNumber(date, \"jalali\", 2);\n\t\t\t//---------- Day of Week ----------//\n\t\t\tlet gDate = this.toDate();\n\t\t\tif (format == \"jdddd\" || format == \"jddd\")\n\t\t\t\treturn getDayLabel(gDate);\n\t\t\tif (format == \"jdd\")\n\t\t\t\treturn getDayLabel(gDate).slice(0, 1);\n\t\t\tlet dayOfWeek = getDayOfWeek(gDate);\n\t\t\tif (format == \"jdo\") return ordinalNumber(dayOfWeek);\n\t\t\tif (format == \"jdO\")\n\t\t\t\treturn ordinalNumber(dayOfWeek, \"jalali\", 2);\n\t\t\tif (format == \"jd\")\n\t\t\t\treturn getDayOfWeek(gDate, \"jalali\", \"array\");\n\t\t\tif (format == \"jde\") return dayOfWeek;\n\t\t\t//---------- Day of Year ----------//\n\t\t\tlet dayOfYear = getDayOfYear(\n\t\t\t\tthis.year(\"jy\"),\n\t\t\t\tthis.month(\"jM\"),\n\t\t\t\tdate,\n\t\t\t\t\"j\"\n\t\t\t);\n\t\t\tif (format == \"jDDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"jDDD\") return dayOfYear;\n\t\t\tif (format == \"jDDDo\") return ordinalNumber(dayOfYear);\n\t\t\tif (format == \"jDDDO\")\n\t\t\t\treturn ordinalNumber(dayOfYear, \"jalali\", 2);\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"DD\")\n\t\t\t\treturn addPrefix(gDate.getDate(), 2);\n\t\t\tif (format == \"D\") return gDate.getDate();\n\t\t\tif (format == \"Do\" || format == \"DO\")\n\t\t\t\treturn ordinalNumber(\n\t\t\t\t\tgDate.getDate(),\n\t\t\t\t\t\"gregorian\"\n\t\t\t\t);\n\t\t\t//---------- Day of Week ----------//\n\t\t\tif (format == \"dddd\")\n\t\t\t\treturn getDayLabel(gDate, \"gregorian\");\n\t\t\tif (format == \"ddd\")\n\t\t\t\treturn getDayLabel(gDate, \"gregorian\").slice(\n\t\t\t\t\t0,\n\t\t\t\t\t3\n\t\t\t\t);\n\t\t\tif (format == \"dd\")\n\t\t\t\treturn getDayLabel(gDate, \"gregorian\").slice(\n\t\t\t\t\t0,\n\t\t\t\t\t2\n\t\t\t\t);\n\t\t\tdayOfWeek = getDayOfWeek(gDate, \"gregorian\");\n\t\t\tif (format == \"do\" || format == \"dO\")\n\t\t\t\treturn ordinalNumber(dayOfWeek, \"gregorian\");\n\t\t\tif (format == \"d\")\n\t\t\t\treturn getDayOfWeek(\n\t\t\t\t\tgDate,\n\t\t\t\t\t\"gregorian\",\n\t\t\t\t\t\"array\"\n\t\t\t\t);\n\t\t\tif (format == \"de\") return dayOfWeek;\n\t\t\tdayOfYear = getDayOfYear(\n\t\t\t\tgDate.getFullYear(),\n\t\t\t\tgDate.getMonth() + 1,\n\t\t\t\tgDate.getDate(),\n\t\t\t\t\"g\"\n\t\t\t);\n\t\t\t//---------- Day of Year ----------//\n\t\t\tif (format == \"DDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"DDD\") return dayOfYear;\n\t\t\tif (format == \"DDDo\" || format == \"DDDO\")\n\t\t\t\treturn ordinalNumber(dayOfYear, \"gregorian\");\n\t\t\treturn date;\n\t\t}\n\t};\n\n\t/**\n\t * get or set quarter\n\t * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the quarter, returns class,\n\t * else returns a number or string from quarter\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.quarter = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subQuarter(--format);\n\t\t\t} else if (format > 4) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addQuarter(format - 4);\n\t\t\t}\n\t\t\tthis.d.month = +format * 3 - 2;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jQ\" : \"Q\";\n\t\t\tlet quarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\"\n\t\t\t\t\t? this.d.month\n\t\t\t\t\t: gtj(this.toDate())[1]) / 3\n\t\t\t);\n\t\t\tif (format == \"jQ\") return quarter;\n\t\t\tif (format == \"jQo\") return ordinalNumber(quarter);\n\t\t\tif (format == \"jQO\")\n\t\t\t\treturn ordinalNumber(quarter, \"jalali\", 2);\n\t\t\tquarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\"\n\t\t\t\t\t? this.toDate().getMonth() + 1\n\t\t\t\t\t: this.d.month) / 3\n\t\t\t);\n\t\t\tif (format == \"Q\") return quarter;\n\t\t\tif (format == \"Qo\" || format == \"QO\")\n\t\t\t\treturn ordinalNumber(quarter, \"gregorian\");\n\t\t\treturn quarter;\n\t\t}\n\t};\n\n\t/**\n\t * get or set week\n\t * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the week, returns class,\n\t * else returns a number or string from week\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.week = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet weeksInYear = this.getWeeksInYear();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.week(1);\n\t\t\t\treturn this.subWeek(--format);\n\t\t\t} else if (format > weeksInYear) {\n\t\t\t\tthis.week(weeksInYear);\n\t\t\t\treturn this.addWeek(format - weeksInYear);\n\t\t\t}\n\t\t\tlet weekOfYear = getWeekOfYear(\n\t\t\t\tthis.d.year,\n\t\t\t\tthis.d.month,\n\t\t\t\tthis.d.date,\n\t\t\t\tthis.c\n\t\t\t);\n\t\t\tthis.addWeek(+format - weekOfYear);\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jw\" : \"w\";\n\t\t\tlet date = this.c == \"jalali\" ? [this.d.year, this.d.month, this.d.date] : gtj(this.toDate())\n\t\t\tlet weekOfYear = getWeekOfYear(\n\t\t\t\tdate[0],\n\t\t\t\tdate[1],\n\t\t\t\tdate[2],\n\t\t\t\tthis.c\n\t\t\t);\n\t\t\tif (format == \"jw\" || format == \"jW\") return weekOfYear;\n\t\t\tif (format == \"jww\" || format == \"jWW\")\n\t\t\t\treturn addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"jwo\" || format == \"jWo\")\n\t\t\t\treturn ordinalNumber(weekOfYear);\n\t\t\tif (format == \"jwO\" || format == \"jWO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"jalali\", 2);\n\t\t\tweekOfYear = getWeekOfYear(\n\t\t\t\tthis.year(\"y\"),\n\t\t\t\tthis.month(\"M\"),\n\t\t\t\tthis.date(\"D\"),\n\t\t\t\t\"gregorian\"\n\t\t\t);\n\t\t\tif (format == \"w\" || format == \"W\") return weekOfYear;\n\t\t\tif (format == \"ww\" || format == \"WW\")\n\t\t\t\treturn addPrefix(weekOfYear, 2);\n\t\t\tif (\n\t\t\t\tformat == \"wo\" ||\n\t\t\t\tformat == \"Wo\" ||\n\t\t\t\tformat == \"wO\" ||\n\t\t\t\tformat == \"WO\"\n\t\t\t)\n\t\t\t\treturn ordinalNumber(weekOfYear, \"gregorian\");\n\t\t\treturn weekOfYear;\n\t\t}\n\t};\n\n\t/**\n\t * get or set hour\n\t * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the hour, returns class,\n\t * else returns a number or string from hour\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.hour = function (format = \"H\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0) {\n\t\t\t\tthis.d.hour = 0;\n\t\t\t\treturn this.subHour(--format);\n\t\t\t} else if (format > 23) {\n\t\t\t\tthis.d.hour = 23;\n\t\t\t\treturn this.addHour(format - 23);\n\t\t\t}\n\t\t\tthis.d.hour = +format;\n\t\t\twhile (!this.isValidTime())\n\t\t\t\tthis.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tlet hour = this.d.hour;\n\t\t\tif (format == \"H\") return hour;\n\t\t\tif (format == \"HH\") return addPrefix(hour, 2);\n\t\t\tif (format == \"k\") return hour || 24;\n\t\t\tif (format == \"kk\") return addPrefix(hour || 24, 2);\n\t\t\thour = hour > 12 ? hour - 12 : hour;\n\t\t\tif (format == \"h\") return hour;\n\t\t\tif (format == \"hh\") return addPrefix(hour, 2);\n\t\t\treturn hour;\n\t\t}\n\t};\n\n\t/**\n\t * get or set minute\n\t * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the minute, returns class,\n\t * else returns a number or string from minute\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.minute = function (format = \"m\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59)\n\t\t\t\treturn this.addMinute(format);\n\t\t\tthis.d.minute = +format;\n\t\t\twhile (!this.isValidTime())\n\t\t\t\tthis.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"m\") return this.d.minute;\n\t\t\tif (format == \"mm\") return addPrefix(this.d.minute, 2);\n\t\t\treturn this.d.minute;\n\t\t}\n\t};\n\n\t/**\n\t * get or set second\n\t * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the second, returns class,\n\t * else returns a number or string from second\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.second = function (format = \"s\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59)\n\t\t\t\treturn this.addSecond(format);\n\t\t\tthis.d.second = +format;\n\t\t\twhile (!this.isValidTime())\n\t\t\t\tthis.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"s\") return this.d.second;\n\t\t\tif (format == \"ss\") return addPrefix(this.d.second, 2);\n\t\t\treturn this.d.second;\n\t\t}\n\t};\n\n\t/**\n\t * get or set millisecond\n\t * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n\t * else returns a number or string from millisecond\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.millisecond = function (format = \"c\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 999)\n\t\t\t\treturn this.addMillisecond(format);\n\t\t\tthis.d.millisecond = +format;\n\t\t\twhile (!this.isValidTime())\n\t\t\t\tthis.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"CCC\" || format == \"c\")\n\t\t\t\treturn this.d.millisecond;\n\t\t\tif (format == \"CCCC\")\n\t\t\t\treturn addPrefix(this.d.millisecond, 3);\n\t\t\treturn this.d.millisecond;\n\t\t}\n\t};\n\n\t/**\n\t * get timestamp or set date from timestamp\n\t * @param {Null|Number|String} value - a number for set the millisecond\n\t * @returns {PersianDate|Number} if set the timestamp, returns class,\n\t * else returns timestamp (number)\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.timestamp = function (value) {\n\t\tif (this.error) return this.error;\n\t\tif (value) {\n\t\t\treturn this.fromGregorian(+String(value).trim());\n\t\t} else {\n\t\t\treturn this.toDate().getTime();\n\t\t}\n\t};\n\n\t////////////////////--- Version 1.1.0 ---////////////////////\n\n\t/**\n\t * get clone of this date\n\t * @since 1.1.0\n\t * @returns {PersianDate} returns the clone of this date\n\t */\n\tPersianDate.prototype.clone = function () {\n\t\treturn new PersianDate().calendar(this.c).parse(this.d);\n\t};\n\n\t/**\n\t * checks this date is the same to another date\n\t * @since 1.1.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isSame = function (...date) {\n\t\tif (this.error) return false;\n\t\tdate = typesToArray(this.c, ...date);\n\t\tdate[0] = +date[0] || 0;\n\t\tdate[1] = +date[1] || this.d.month;\n\t\tdate[2] = +date[2] || this.d.date;\n\t\tdate[3] = +date[3] || this.d.hour;\n\t\tdate[4] = +date[4] || this.d.minute;\n\t\tdate[5] = +date[5] || this.d.second;\n\t\tdate[6] = +date[6] || this.d.millisecond;\n\t\tif (this.isValid(...date))\n\t\t\treturn (\n\t\t\t\tthis.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp() == this.timestamp()\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t////////////////////--- Version 1.2.0 ---////////////////////\n\n\t/**\n\t * convert String or Array or Object or PersianDate to Array\n\t * @since 1.2.0\n\t * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n\t */\n\tconst typesToArray = function (\n\t\tcalendar,\n\t\tyear,\n\t\tmonth,\n\t\tdate,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (!year)\n\t\t\t// if year not defined\n\t\t\tyear = calendar == \"jalali\" ? gtj() : new Date(); // return now\n\t\tif (\n\t\t\ttypeof year == \"string\" &&\n\t\t\tyear.search(REGEX[\"separators\"]) != -1\n\t\t) {\n\t\t\t// if type of year is String\n\t\t\tyear = year.split(/[/ -.,:\\\\]/);\n\t\t}\n\t\tif (year instanceof PersianDate)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn year.calendar(calendar).toArray();\n\t\telse if (year instanceof Date)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn new PersianDate(year)\n\t\t\t\t.calendar(calendar)\n\t\t\t\t.toArray();\n\t\telse if (\n\t\t\tObject.prototype.toString.call(year) ===\n\t\t\t\"[object Array]\"\n\t\t)\n\t\t\t// if type of year is Array\n\t\t\treturn year;\n\t\telse if (\n\t\t\tObject.prototype.toString.call(year) ===\n\t\t\t\"[object Object]\"\n\t\t)\n\t\t\t// if type of year is Object\n\t\t\treturn [\n\t\t\t\tyear.y || year.year || year.years,\n\t\t\t\tyear.M || year.month || year.months || 1,\n\t\t\t\tyear.d ||\n\t\t\t\tyear.day ||\n\t\t\t\tyear.days ||\n\t\t\t\tyear.date ||\n\t\t\t\t1,\n\t\t\t\tyear.h || year.hour || year.hours || 0,\n\t\t\t\tyear.m || year.minute || year.minutes || 0,\n\t\t\t\tyear.s || year.second || year.seconds || 0,\n\t\t\t\tyear.ms ||\n\t\t\t\tyear.millisecond ||\n\t\t\t\tyear.milliseconds ||\n\t\t\t\t0,\n\t\t\t];\n\t\treturn [year, month, date, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * checks this date is before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(date, this, \">\");\n\t};\n\n\t/**\n\t * checks this date is after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(date, this, \"<\");\n\t};\n\n\t////////////////////--- Version 1.3.0 ---////////////////////\n\n\t/**\n\t * return the object of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return Object of date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toObject = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn this.d;\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn {\n\t\t\tyear: this.year(formats[0]),\n\t\t\tmonth: this.month(formats[1]),\n\t\t\tdate: this.date(formats[2]),\n\t\t\thour: this.hour(formats[3]),\n\t\t\tminute: this.minute(formats[4]),\n\t\t\tsecond: this.second(formats[5]),\n\t\t\tmillisecond: this.millisecond(formats[6]),\n\t\t};\n\t};\n\n\t/**\n\t * checks date is a native js Date object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a native js Date, return true\n\t */\n\tPersianDate.prototype.isDate = function (date) {\n\t\treturn date instanceof Date;\n\t};\n\n\t/**\n\t * checks date is a PersianDate object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a PersianDate, return true\n\t */\n\tPersianDate.prototype.isPersianDate = function (date) {\n\t\treturn date instanceof PersianDate;\n\t};\n\n\t/**\n\t * checks this date is same or before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isSameOrBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(date, this, \">=\");\n\t};\n\n\t/**\n\t * checks this date is same or after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isSameOrAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(date, this, \"<=\");\n\t};\n\n\t/**\n\t * checks this date is between the another dates\n\t * @since 1.3.0\n\t * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} from.y - year of date\n\t * @param {Null|String|Number} from.year - year of date\n\t * @param {Null|String|Number} from.years - year of date\n\t * @param {Null|String|Number} from.M - month of date\n\t * @param {Null|String|Number} from.month - month of date\n\t * @param {Null|String|Number} from.months - month of date\n\t * @param {Null|String|Number} from.d - day of date\n\t * @param {Null|String|Number} from.day - day of date\n\t * @param {Null|String|Number} from.days - day of date\n\t * @param {Null|String|Number} from.date - day of date\n\t * @param {Null|String|Number} from.h - hour of date\n\t * @param {Null|String|Number} from.hour - hour of date\n\t * @param {Null|String|Number} from.hours - hour of date\n\t * @param {Null|String|Number} from.m - minute of date\n\t * @param {Null|String|Number} from.minute - minute of date\n\t * @param {Null|String|Number} from.minutes - minute of date\n\t * @param {Null|String|Number} from.s - second of date\n\t * @param {Null|String|Number} from.second - second of date\n\t * @param {Null|String|Number} from.seconds - second of date\n\t * @param {Null|String|Number} from.ms - millisecond of date\n\t * @param {Null|String|Number} from.millisecond - millisecond of date\n\t * @param {Null|String|Number} from.milliseconds - millisecond of date\n\t * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} to.y - year of date\n\t * @param {Null|String|Number} to.year - year of date\n\t * @param {Null|String|Number} to.years - year of date\n\t * @param {Null|String|Number} to.M - month of date\n\t * @param {Null|String|Number} to.month - month of date\n\t * @param {Null|String|Number} to.months - month of date\n\t * @param {Null|String|Number} to.d - day of date\n\t * @param {Null|String|Number} to.day - day of date\n\t * @param {Null|String|Number} to.days - day of date\n\t * @param {Null|String|Number} to.date - day of date\n\t * @param {Null|String|Number} to.h - hour of date\n\t * @param {Null|String|Number} to.hour - hour of date\n\t * @param {Null|String|Number} to.hours - hour of date\n\t * @param {Null|String|Number} to.m - minute of date\n\t * @param {Null|String|Number} to.minute - minute of date\n\t * @param {Null|String|Number} to.minutes - minute of date\n\t * @param {Null|String|Number} to.s - second of date\n\t * @param {Null|String|Number} to.second - second of date\n\t * @param {Null|String|Number} to.seconds - second of date\n\t * @param {Null|String|Number} to.ms - millisecond of date\n\t * @param {Null|String|Number} to.millisecond - millisecond of date\n\t * @param {Null|String|Number} to.milliseconds - millisecond of date\n\t * @param {String} method - determines that consider the dates themselves\n\t * @returns {‌Boolean} if date valid, return true or false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isBetween = function (from, to, method = \"()\") {\n\t\tif (this.error) return false;\n\t\tlet $this = this.clone();\n\t\tfrom = typesToArray(this.c, from);\n\t\tif (!from[2])\n\t\t\t$this.date(1);\n\t\tfrom = [\n\t\t\tfrom[0] || this.d.year,\n\t\t\tfrom[1] || this.d.month,\n\t\t\tfrom[2] || 1,\n\t\t\tfrom[3] || this.d.hour,\n\t\t\tfrom[4] || this.d.minute,\n\t\t\tfrom[5] || this.d.second,\n\t\t\tfrom[6] || this.d.millisecond,\n\t\t];\n\t\tto = typesToArray(this.c, to);\n\t\tto = [\n\t\t\tto[0] || this.d.year,\n\t\t\tto[1] || this.d.month,\n\t\t\tto[2] || 1,\n\t\t\tto[3] || this.d.hour,\n\t\t\tto[4] || this.d.minute,\n\t\t\tto[5] || this.d.second,\n\t\t\tto[6] || this.d.millisecond,\n\t\t];\n\n\t\tif (!(this.isValid(...from) && this.isValid(...to)))\n\t\t\treturn false;\n\n\t\treturn (\n\t\t\t(method[0] === \"[\"\n\t\t\t\t? $this.isSameOrAfter(from)\n\t\t\t\t: $this.isAfter(from)) &&\n\t\t\t(method[1] === \"]\"\n\t\t\t\t? $this.isSameOrBefore(to)\n\t\t\t\t: $this.isBefore(to))\n\t\t);\n\t};\n\n\t////////////////////--- Version 1.4.0 ---////////////////////\n\n\t/**\n\t * returns minimum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return minimum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.min = function () {\n\t\treturn mathOperation(arguments, this, \"min\");\n\t};\n\n\t/**\n\t * returns maximum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.max = function () {\n\t\treturn mathOperation(arguments, this, \"max\");\n\t};\n\n\t/**\n\t * get the diffrence between two date\n\t * @since 1.4.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {String} unit - the unit of the measurment\n\t * @returns {Number} diffrence\n\t * @throws {Boolean} if dates invalid, returns false\n\t */\n\tPersianDate.prototype.diff = function (date, unit, addOne = false) {\n\t\tif (this.error) return this.error;\n\t\tdate = typesToArray(this.c, date);\n\t\tif (!this.isValid(...date)) return \"تاریخ نامعتبر\";\n\t\tlet result =\n\t\t\tthis.timestamp() -\n\t\t\tthis.clone()\n\t\t\t\t.parse(...date)\n\t\t\t\t.timestamp();\n\t\tswitch (unit) {\n\t\t\tcase \"y\":\n\t\t\tcase \"year\":\n\t\t\tcase \"years\":\n\t\t\t\tresult = this.d.year - date[0];\n\t\t\t\tbreak;\n\t\t\tcase \"M\":\n\t\t\tcase \"month\":\n\t\t\tcase \"months\":\n\t\t\t\tresult =\n\t\t\t\t\tthis.d.year * 12 +\n\t\t\t\t\tthis.d.month -\n\t\t\t\t\t(+date[0] * 12 + +date[1]);\n\t\t\t\tbreak;\n\t\t\tcase \"d\":\n\t\t\tcase \"date\":\n\t\t\tcase \"day\":\n\t\t\tcase \"days\":\n\t\t\t\tresult = Math.ceil(\n\t\t\t\t\tresult / 1000 / 60 / 60 / 24\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"h\":\n\t\t\tcase \"hour\":\n\t\t\tcase \"hours\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"m\":\n\t\t\tcase \"minute\":\n\t\t\tcase \"minutes\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"s\":\n\t\t\tcase \"second\":\n\t\t\tcase \"seconds\":\n\t\t\t\tresult = Math.ceil(result / 1000);\n\t\t\t\tbreak;\n\t\t\tcase \"ms\":\n\t\t\tcase \"millisecond\":\n\t\t\tcase \"milliseconds\":\n\t\t\tdefault:\n\t\t\t\tresult = result;\n\t\t}\n\t\treturn addOne ? result + (result >= 0 ? 1 : -1) : result;\n\t};\n\n\t////////////////////--- Version 1.5.0 ---////////////////////\n\n\t/**\n\t * return the array of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return array of date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toArray = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn Object.values(this.d);\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn [\n\t\t\tthis.year(formats[0]),\n\t\t\tthis.month(formats[1]),\n\t\t\tthis.date(formats[2]),\n\t\t\tthis.hour(formats[3]),\n\t\t\tthis.minute(formats[4]),\n\t\t\tthis.second(formats[5]),\n\t\t\tthis.millisecond(formats[6]),\n\t\t];\n\t};\n\n\t////////////////////--- Version 2.0.0 ---////////////////////\n\n\t/**\n\t * get the diffrence between two date in a human-readable format\n\t * @since 2.0.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @returns {String} if date valid, return diff human-readable format\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.diffForHumans = function (date, suffix = true) {\n\t\tif (this.error) return this.error;\n\t\tlet result = this.diff(date, \"s\");\n\t\tif (typeof result == \"string\") return \"تاریخ نامعتبر\";\n\t\tlet prefix = result > 0 ? \"آینده\" : \"پیش\";\n\t\tresult = Math.abs(result);\n\n\t\tif (result == 0) return \"هم اکنون\";\n\t\telse if (result < 45) result = \"لحظات\";\n\t\telse if ((result /= 60) < 45)\n\t\t\t// divide by 60, for getting minute\n\t\t\tresult = Math.round(result) + \" \" + \"دقیقه\";\n\t\telse if ((result /= 60) < 23.5)\n\t\t\t// divide by 60, for getting hour\n\t\t\tresult = Math.round(result) + \" \" + \"ساعت\";\n\t\telse if ((result /= 24) < 26)\n\t\t\t// divide by 24, for getting day\n\t\t\tresult = Math.round(result) + \" \" + \"روز\";\n\t\telse if (result < 320)\n\t\t\tresult = Math.round(result / 30) + \" \" + \"ماه\";\n\t\telse result = Math.round(result / 365) + \" \" + \"سال\";\n\t\treturn result + (suffix ? \" \" + prefix : \"\");\n\t};\n\n\t/**\n\t * convert a jalali date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.fromJalali = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date = gtj();\n\t\telse if (this.isPersianDate(date[0])) date = date[0].toArray();\n\t\telse date = typesToArray(this.c, ...date);\n\t\tif (this.c == \"jalali\") {\n\t\t\t//plus sign before a variable, convert variable to int\n\t\t\tthis.d.year = +date[0];\n\t\t\tthis.d.month = +date[1] || 1;\n\t\t\tthis.d.date = +date[2] || 1;\n\t\t\tthis.d.hour = +date[3] || 0;\n\t\t\tthis.d.minute = +date[4] || 0;\n\t\t\tthis.d.second = +date[5] || 0;\n\t\t\tthis.d.millisecond = +date[6] || 0;\n\t\t} else setGregorianDate(jtg(...date), this);\n\n\t\tif (!this.isValid()) return showError(\"تاریخ نامعتبر\", this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.fromGregorian = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date[0] = new Date().getTime();\n\t\tif (this.isPersianDate(date[0])) {\n\t\t\tdate = date[0].toArray();\n\t\t} else if (!isTimestamp(date[0])) {\n\t\t\tdate = typesToArray(this.c, ...date);\n\t\t\tdate[6] = +date[6] || 0;\n\t\t\tdate[5] = +date[5] || 0;\n\t\t\tdate[4] = +date[4] || 0;\n\t\t\tdate[3] = +date[3] || 0;\n\t\t\tdate[2] = +date[2] || 1;\n\t\t\tdate[1] = +date[1] || 1;\n\t\t}\n\t\tdate[0] = +date[0];\n\n\t\tif (date.length > 1) {\n\t\t\tif (!this.isValid(...date))\n\t\t\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t\t\t--date[1]; // this is month; becuse the Date get month from 0, subtract one\n\t\t}\n\n\t\tdate = new Date(...date);\n\t\tif (date == \"Invalid Date\")\n\t\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n\t * @returns {PersianDate} return class with persian date\n\t */\n\tPersianDate.prototype.calendar = function (calendar) {\n\t\tif (!calendar) return this.c;\n\t\tif (calendar[0] == \"j\" && this.c[0] == \"g\") {\n\t\t\tif (!this.error)\n\t\t\t\tsetJalaliDate(gtj(this.toDate()), this);\n\t\t\tthis.c = \"jalali\";\n\t\t} else if (calendar[0] == \"g\" && this.c[0] == \"j\") {\n\t\t\tif (!this.error) setGregorianDate(this.toDate(), this);\n\t\t\tthis.c = \"gregorian\";\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * return number of weeks in year\n\t * @since 2.0.0\n\t * @param {Number|String} year - the year\n\t * @returns {Number} number of weeks in year\n\t */\n\tPersianDate.prototype.getWeeksInYear = function (year) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) year = this.year();\n\n\t\tlet dayOfYearFormat = this.c == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = this.clone().parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet lastOfYear = firstOfYear.clone().addYear().subDay();\n\t\tlet lastOfYearDay = lastOfYear.date(dayOfYearFormat);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\t\telse firstOfYear.subDay(firstOfYearDay);\n\n\t\tif (lastOfYearDay > 3) lastOfYear.addDay(7 - lastOfYearDay);\n\t\telse lastOfYear.subDay(lastOfYearDay);\n\t\treturn Math.ceil(lastOfYear.diff(firstOfYear, \"date\") / 7);\n\t};\n\n\t/**\n\t * return the Date instance of PersianDate\n\t * @since 2.0.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Date} if date valid, return Date instance of date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toDate = function () {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") return jtg(...this.toArray());\n\t\tlet date = this.toArray();\n\t\t--date[1];\n\t\treturn new Date(...date);\n\t};\n\n\t/**\n\t * change the date to start of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.startOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 0;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 0;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 0;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 0;\n\t\tif (unit[0] == \"d\") return this;\n\t\tthis.d.date = 1;\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 1;\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\t/**\n\t * change the date to end of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.endOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 999;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 59;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 59;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 23;\n\t\tif (unit[0] == \"d\") return this;\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 12;\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\tPersianDate.prototype.valueOf = function () {\n\t\treturn this.timestamp();\n\t};\n\n\t/**\n\t * show warning for deprecated functions\n\t * @since 2.0.0\n\t * @param {String} msg - the message for warning\n\t */\n\tconst deprecate = (msg) => {\n\t\tconsole.warn(msg);\n\t};\n\n\t/**\n\t * check the input is timestamp\n\t * @since 2.0.0\n\t * @param {Number|String} timestamp - input that must be checked\n\t * @returns {Boolean} if input was timestamp, return true\n\t */\n\tconst isTimestamp = (timestamp) => {\n\t\treturn (\n\t\t\tNumber(timestamp) != NaN &&\n\t\t\tMath.floor(timestamp / 10000) > 0\n\t\t);\n\t};\n\n\t/**\n\t * set the date with Date instance\n\t * @since 2.0.0\n\t * @param {Date} date - the Date instance\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setGregorianDate = (date, instance) => {\n\t\tinstance.d = {\n\t\t\tyear: date.getFullYear(),\n\t\t\tmonth: date.getMonth() + 1,\n\t\t\tdate: date.getDate(),\n\t\t\thour: date.getHours(),\n\t\t\tminute: date.getMinutes(),\n\t\t\tsecond: date.getSeconds(),\n\t\t\tmillisecond: date.getMilliseconds(),\n\t\t};\n\t};\n\n\t/**\n\t * set the date with array of persian date\n\t * @since 2.0.0\n\t * @param {Array} date - the array of persian date\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setJalaliDate = (date, instance) => {\n\t\t[\n\t\t\tinstance.d.year,\n\t\t\tinstance.d.month,\n\t\t\tinstance.d.date,\n\t\t\tinstance.d.hour,\n\t\t\tinstance.d.minute,\n\t\t\tinstance.d.second,\n\t\t\tinstance.d.millisecond,\n\t\t] = date;\n\t};\n\n\t/**\n\t * compare the dates\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - the date\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'>'|'>='|'<'|'<='} operator - the operator for compare\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tconst compareDate = (date, instance, operator) => {\n\t\tdate = typesToArray(instance.c, ...date);\n\n\t\tif (instance.isValid(...date))\n\t\t\treturn eval(\n\t\t\t\t\"instance.clone().parse(...date).timestamp() \" +\n\t\t\t\toperator +\n\t\t\t\t\" instance.timestamp()\"\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t/**\n\t * do the math operation on dates\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} values - the dates\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'min'|'max'} operation - the operation\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tconst mathOperation = (values, instance, operation) => {\n\t\tif (!values.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet args = Object.values(values).concat();\n\t\tlet argsNumber = args.map((date) => {\n\t\t\tdate = typesToArray(instance.c, date);\n\t\t\tif (instance.isValid(...date))\n\t\t\t\treturn instance\n\t\t\t\t\t.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp();\n\t\t\treturn false;\n\t\t});\n\t\tif (argsNumber.indexOf(false) != -1) return false;\n\t\treturn eval(\n\t\t\t\"args[argsNumber.indexOf(Math.\" +\n\t\t\toperation +\n\t\t\t\"(...argsNumber))]\"\n\t\t);\n\t};\n\n\tif (calendar) this.calendar(calendar);\n\tif (date) {\n\t\tif (calendar && calendar[0] == \"j\") this.fromJalali(date);\n\t\telse this.fromGregorian(date);\n\t} else this.now();\n};\n\n//for next version\n//TODO: add quarter and week and day to startOf and endOf function\n//TODO: combine the add functions with sub functions\n//TODO: add the special character for get in all calendars\n//TODO: do better isSame - isBetween - clone --> if is possible\n//TODO: add doc for \"`\" character in toString function\n\nexport default PersianDate;\n\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n","const CALENDAR = {\n    jalali: {\n        months: {\n            1: \"فروردین\",\n            2: \"اردیبهشت\",\n            3: \"خرداد\",\n            4: \"تیر\",\n            5: \"مرداد\",\n            6: \"شهریور\",\n            7: \"مهر\",\n            8: \"آبان\",\n            9: \"آذر\",\n            10: \"دی\",\n            11: \"بهمن\",\n            12: \"اسفند\",\n        },\n        days: {\n            label: {\n                6: \"شنبه\",\n                0: \"یکشنبه\",\n                1: \"دوشنبه\",\n                2: \"سه‌شنبه\",\n                3: \"چهارشنبه\",\n                4: \"پنجشنبه\",\n                5: \"جمعه\",\n            },\n            weekNumber: { // days in jalali calendar start from saturday or 6\n                6: 0,  //شنبه\n                0: 1,  //یکشنبه\n                1: 2,  //دوشنبه\n                2: 3,  //سه‌شنبه\n                3: 4,  //چهارشنبه\n                4: 5,  //پنجشنبه\n                5: 6,  //جمعه\n            },\n        },\n        ordinalNumbers: function (number, mode) {\n            const numbers = {\n                1: 'یک',\n                2: 'دو',\n                3: 'سو',\n                4: 'چهار',\n                5: 'پنج',\n                6: 'شش',\n                7: 'هفت',\n                8: 'هشت',\n                9: 'نه',\n                10: 'ده',\n                11: 'یازده',\n                12: 'دوازده',\n                13: 'سیزده',\n                14: 'چهارده',\n                15: 'پانزده',\n                16: 'شانزده',\n                17: 'هفده',\n                18: 'هجده',\n                19: 'نوزده',\n                20: 'بیست',\n                30: 'سی‌',\n                40: 'چهل',\n                50: 'پنجاه',\n                60: 'شصت',\n                70: 'هفتاد',\n                80: 'هشتاد',\n                90: 'نود',\n                100: 'صد',\n                200: 'دویست',\n                300: 'سیصد',\n            }\n            let ordinalNumber = '';\n            if (number == 1)\n                ordinalNumber = 'اول';\n            else if (numbers[number])\n                ordinalNumber = numbers[number] + (number == 30 ? 'ام' : 'م')\n            else {\n                let remainder = number % 10;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + 'م';\n                remainder = (number - remainder) % 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : (remainder == 30 ? 'ام ' : 'م'));\n                remainder = Math.floor(number / 100) * 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : 'م');\n            }\n            if (mode == 2)\n                ordinalNumber += 'ین';\n            return ordinalNumber;\n        },\n    },\n    gregorian: {\n        months: {\n            1: \"January\",\n            2: \"February\",\n            3: \"March\",\n            4: \"April\",\n            5: \"May\",\n            6: \"June\",\n            7: \"July\",\n            8: \"August\",\n            9: \"September\",\n            10: \"October\",\n            11: \"November\",\n            12: \"December\",\n        },\n        days: {\n            label: {\n                0: \"Sunday\",\n                1: \"Monday\",\n                2: \"Tuesday\",\n                3: \"Wednesday\",\n                4: \"Thursday\",\n                5: \"Friday\",\n                6: \"Saturday\",\n            },\n            weekNumber: { // days in gregorian calendar start from sunday or 0\n                0: 0, // Sunday\n                1: 1, // Monday\n                2: 2, // Tuesday\n                3: 3, // Wednesday\n                4: 4, // Thursday\n                5: 5, // Friday\n                6: 6, // Saturday\n            },\n        },\n        ordinalNumbers: function (number) {\n            if (number == 1 || number % 10 == 1 && number != 11)\n                return number + 'st';\n            else if (number == 2 || number % 10 == 2 && number != 12)\n                return number + 'nd';\n            else if (number == 3 || number % 10 == 3 && number != 13)\n                return number + 'rd';\n            else\n                return number + 'th';\n        },\n    }\n}\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n    betweenBacktick: /`(.*?)`/g, // find the texts between the backticks ==> `Alireza`\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour >= 12 && hour < 24) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\nexport { CALENDAR, TIMETYPE, REGEX };"],"sourceRoot":""}