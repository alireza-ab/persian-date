{"version":3,"sources":["webpack://PersianDate/webpack/universalModuleDefinition","webpack://PersianDate/webpack/bootstrap","webpack://PersianDate/./src/utils.js","webpack://PersianDate/./src/PersianDate.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CALENDAR","jalali","months","1","2","3","4","5","6","7","8","9","10","11","12","days","label","0","weekNumber","ordinalNumbers","number","numbers","13","14","15","16","17","18","19","20","30","40","50","60","70","80","90","100","200","300","ordinalNumber","remainder","Math","floor","gregorian","REGEX","format","isNumeric","separators","betweenBacktick","TIMETYPE","hour","PersianDate","dateVal","calendarVal","this","gtj","year","month","day","minute","second","millisecond","date","jYear","jMonth","jDay","toString","Date","test","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","newYear","parseInt","jtg","gYear","gMonth","gDay","daysOfMonths","v","getDayLabel","calendar","getDay","showError","getDayOfWeek","getDayOfYear","getDaysInMonth","getWeekOfYear","dayOfYearFormat","firstOfYear","parse","firstOfYearDay","clone","addDay","ceil","diff","weeksInYear","getWeeksInYear","addPrefix","text","length","prefix","repeat","String","errorText","instance","error","now","setJalaliDate","setGregorianDate","setDate","deprecate","fromGregorian","fromJalali","isLeapYear","includes","isValid","isValidDate","isValidTime","some","e","search","undefined","addYear","checkDate","subYear","abs","subDay","addMonth","subMonth","monthToStartNewYear","dayToStartNextMonth","addQuarter","quarter","subQuarter","addWeek","week","subWeek","addHour","subHour","hourToNextDay","subMillisecond","addMinute","subMinute","minuteToNextHour","addSecond","subSecond","secondToNextMinute","addMillisecond","millisecondToNextSecond","pastMonth","pastDays","pastHours","pastMinute","pastSeconds","pastMilliseconds","texts","replace","matched","push","matchedFormat","match","dateString","substring","indexOf","timestamp","substr","trim","toDate","slice","daysInMonth","gDate","dayOfWeek","dayOfYear","weekOfYear","getTime","assign","getPrototypeOf","JSON","stringify","isSame","typesToArray","toArray","map","split","y","years","M","h","hours","minutes","seconds","ms","milliseconds","isBefore","compareDate","isAfter","toObject","arguments","formats","isDate","isPersianDate","isSameOrBefore","isSameOrAfter","isBetween","from","to","method","min","mathOperation","max","unit","addOne","result","values","diffForHumans","suffix","round","isTimestamp","lastOfYear","lastOfYearDay","startOf","endOf","valueOf","msg","console","warn","isNaN","operator","eval","operation","args","concat","argsNumber"],"mappings":"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","file":"PersianDate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PersianDate\"] = factory();\n\telse\n\t\troot[\"PersianDate\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const CALENDAR = {\n    jalali: {\n        months: {\n            1: \"فروردین\",\n            2: \"اردیبهشت\",\n            3: \"خرداد\",\n            4: \"تیر\",\n            5: \"مرداد\",\n            6: \"شهریور\",\n            7: \"مهر\",\n            8: \"آبان\",\n            9: \"آذر\",\n            10: \"دی\",\n            11: \"بهمن\",\n            12: \"اسفند\",\n        },\n        days: {\n            label: {\n                6: \"شنبه\",\n                0: \"یکشنبه\",\n                1: \"دوشنبه\",\n                2: \"سه‌شنبه\",\n                3: \"چهارشنبه\",\n                4: \"پنجشنبه\",\n                5: \"جمعه\",\n            },\n            weekNumber: { // days in jalali calendar start from saturday or 6\n                6: 0,  //شنبه\n                0: 1,  //یکشنبه\n                1: 2,  //دوشنبه\n                2: 3,  //سه‌شنبه\n                3: 4,  //چهارشنبه\n                4: 5,  //پنجشنبه\n                5: 6,  //جمعه\n            },\n        },\n        ordinalNumbers: function (number, mode) {\n            const numbers = {\n                1: 'یک',\n                2: 'دو',\n                3: 'سو',\n                4: 'چهار',\n                5: 'پنج',\n                6: 'شش',\n                7: 'هفت',\n                8: 'هشت',\n                9: 'نه',\n                10: 'ده',\n                11: 'یازده',\n                12: 'دوازده',\n                13: 'سیزده',\n                14: 'چهارده',\n                15: 'پانزده',\n                16: 'شانزده',\n                17: 'هفده',\n                18: 'هجده',\n                19: 'نوزده',\n                20: 'بیست',\n                30: 'سی‌',\n                40: 'چهل',\n                50: 'پنجاه',\n                60: 'شصت',\n                70: 'هفتاد',\n                80: 'هشتاد',\n                90: 'نود',\n                100: 'صد',\n                200: 'دویست',\n                300: 'سیصد',\n            }\n            let ordinalNumber = '';\n            if (number == 1)\n                ordinalNumber = 'اول';\n            else if (numbers[number])\n                ordinalNumber = numbers[number] + (number == 30 ? 'ام' : 'م')\n            else {\n                let remainder = number % 10;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + 'م';\n                remainder = (number - remainder) % 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : (remainder == 30 ? 'ام ' : 'م'));\n                remainder = Math.floor(number / 100) * 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : 'م');\n            }\n            if (mode == 2)\n                ordinalNumber += 'ین';\n            return ordinalNumber;\n        },\n    },\n    gregorian: {\n        months: {\n            1: \"January\",\n            2: \"February\",\n            3: \"March\",\n            4: \"April\",\n            5: \"May\",\n            6: \"June\",\n            7: \"July\",\n            8: \"August\",\n            9: \"September\",\n            10: \"October\",\n            11: \"November\",\n            12: \"December\",\n        },\n        days: {\n            label: {\n                0: \"Sunday\",\n                1: \"Monday\",\n                2: \"Tuesday\",\n                3: \"Wednesday\",\n                4: \"Thursday\",\n                5: \"Friday\",\n                6: \"Saturday\",\n            },\n            weekNumber: { // days in gregorian calendar start from sunday or 0\n                0: 0, // Sunday\n                1: 1, // Monday\n                2: 2, // Tuesday\n                3: 3, // Wednesday\n                4: 4, // Thursday\n                5: 5, // Friday\n                6: 6, // Saturday\n            },\n        },\n        ordinalNumbers: function (number) {\n            if (number == 1 || number % 10 == 1 && number != 11)\n                return number + 'st';\n            else if (number == 2 || number % 10 == 2 && number != 12)\n                return number + 'nd';\n            else if (number == 3 || number % 10 == 3 && number != 13)\n                return number + 'rd';\n            else\n                return number + 'th';\n        },\n    }\n}\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n    betweenBacktick: /`(.*?)`/g, // find the texts between the backticks ==> `Alireza`\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour >= 12 && hour < 24) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\nexport { CALENDAR, TIMETYPE, REGEX };","////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\nimport { CALENDAR, TIMETYPE, REGEX } from \"./utils.js\";\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {Date|Array|Null|Object|String} dateVal - the date that convert to persian date\n * @param {String} [calendarVal='jalali'] - the calendar\n */\nconst PersianDate = function (dateVal, calendarVal) {\n\t\"use strict\";\n\n\t/**\n\t * keeps the date and time\n\t * @type {Object}\n\t * @property {Number} year - the year of date\n\t * @property {Number} month - the month of date\n\t * @property {Number} date - the day of month of date\n\t * @property {Number} hour - the hour of time\n\t * @property {Number} minute - the minute of time\n\t * @property {Number} second - the second of time\n\t * @property {Number} millisecond - the millisecond of time\n\t * @property {Number} gregorian - the gregorian date\n\t */\n\tthis.d = {};\n\n\t/**\n\t * the calendar type\n\t * @type {String}\n\t * @default \"jalali\"\n\t * @example jalali | gregorian\n\t */\n\tthis.c = \"jalali\";\n\n\t/**\n\t * Gregorian to Jalali\n\t * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n\t * @param {Null|Number|String} [month=1] - Gregorian month\n\t * @param {Null|Number|String} [day=1] - Gregorian day\n\t * @param {Null|Number|String} [hour=0] - Gregorian hour\n\t * @param {Null|Number|String} [minute=0] - Gregorian minute\n\t * @param {Null|Number|String} [second=0] - Gregorian second\n\t * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n\t * @returns {Array} Jalali date\n\t */\n\tconst gtj = (year, month, day, hour, minute, second, millisecond) => {\n\t\tlet date;\n\t\tif (!year) date = new Date();\n\t\telse if (Object.prototype.toString.call(year) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\tdate = year;\n\t\telse\n\t\t\tdate = new Date(\n\t\t\t\tREGEX[\"isNumeric\"].test(year) ? year : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(month) ? month : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(day) ? day : 1,\n\t\t\t\tREGEX[\"isNumeric\"].test(hour) ? hour : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(minute) ? minute : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(second) ? second : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(millisecond) ? millisecond : 0\n\t\t\t);\n\t\tday = date.getDate();\n\t\tmonth = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n\t\tyear = date.getFullYear();\n\t\thour = date.getHours();\n\t\tminute = date.getMinutes();\n\t\tsecond = date.getSeconds();\n\t\tmillisecond = date.getMilliseconds();\n\t\tlet jYear, jMonth, jDay;\n\t\tlet pastDaysInMonth = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t59,\n\t\t\t90,\n\t\t\t120,\n\t\t\t151,\n\t\t\t181,\n\t\t\t212,\n\t\t\t243,\n\t\t\t273,\n\t\t\t304,\n\t\t\t334,\n\t\t]; //Past days from the start of the year in each month\n\t\tif (year > 1600) {\n\t\t\tjYear = 979;\n\t\t\tyear -= 1600;\n\t\t} else {\n\t\t\tjYear = 0;\n\t\t\tyear -= 621;\n\t\t}\n\t\tlet newYear = month > 2 ? year + 1 : year;\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt((newYear + 3) / 4) -\n\t\t\tparseInt((newYear + 99) / 100) +\n\t\t\tparseInt((newYear + 399) / 400) -\n\t\t\t80 +\n\t\t\tday +\n\t\t\tpastDaysInMonth[month - 1];\n\t\tjYear += 33 * parseInt(days / 12053);\n\t\tdays %= 12053;\n\t\tjYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tjYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tjMonth =\n\t\t\tdays < 186 ? 1 + parseInt(days / 31) : 7 + parseInt((days - 186) / 30);\n\t\tjDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n\t\treturn [jYear, jMonth, jDay, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * Jalali to Gregorian\n\t * @param {Null|Number|String} year - Jalali year\n\t * @param {Null|Number|String} [month=1] -  Jalali month\n\t * @param {Null|Number|String} [day=1] -  Jalali day\n\t * @param {Null|Number|String} [hour=0] -  Jalali hour\n\t * @param {Null|Number|String} [minute=0] -  Jalali minute\n\t * @param {Null|Number|String} [second=0] -  Jalali second\n\t * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n\t * @returns {Date} Gregorian date\n\t */\n\tconst jtg = (year, month, day, hour, minute, second, millisecond) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tyear = REGEX[\"isNumeric\"].test(year) ? +year : 1;\n\t\tmonth = REGEX[\"isNumeric\"].test(month) ? +month : 1;\n\t\tday = REGEX[\"isNumeric\"].test(day) ? +day : 1;\n\t\thour = REGEX[\"isNumeric\"].test(hour) ? +hour : 0;\n\t\tminute = REGEX[\"isNumeric\"].test(minute) ? +minute : 0;\n\t\tsecond = REGEX[\"isNumeric\"].test(second) ? +second : 0;\n\t\tmillisecond = REGEX[\"isNumeric\"].test(millisecond) ? +millisecond : 0;\n\t\tlet gYear, gMonth, gDay;\n\t\tif (year > 979) {\n\t\t\tgYear = 1600;\n\t\t\tyear -= 979;\n\t\t} else {\n\t\t\tgYear = 621;\n\t\t}\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt(year / 33) * 8 +\n\t\t\tparseInt(((year % 33) + 3) / 4) +\n\t\t\t78 +\n\t\t\tday +\n\t\t\t(month < 7 ? (month - 1) * 31 : (month - 7) * 30 + 186);\n\t\tgYear += 400 * parseInt(days / 146097);\n\t\tdays %= 146097;\n\t\tif (days > 36524) {\n\t\t\tgYear += 100 * parseInt(--days / 36524);\n\t\t\tdays %= 36524;\n\t\t\tif (days >= 365) days++;\n\t\t}\n\t\tgYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tgYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tgDay = days + 1;\n\t\tlet daysOfMonths = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t(gYear % 4 == 0 && gYear % 100 != 0) || gYear % 400 == 0 ? 29 : 28,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t];\n\t\tfor (gMonth = 0; gMonth < 13; gMonth++) {\n\t\t\tlet v = daysOfMonths[gMonth];\n\t\t\tif (gDay <= v) break;\n\t\t\tgDay -= v;\n\t\t}\n\n\t\treturn new Date(gYear, gMonth - 1, gDay, hour, minute, second, millisecond);\n\t};\n\n\t/**\n\t * get label of day\n\t * @param {Date} date - the date that received day\n\t * @param {'jalali'|'gregorian'} calendar - the calendar\n\t * @returns {String} returns day label\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t * @example Saturday | شنبه\n\t */\n\tconst getDayLabel = (date = new Date(), calendar = \"jalali\") => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\treturn CALENDAR[calendar][\"days\"][\"label\"][date.getDay()];\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the week\n\t * @param {Date} date - the date that received day of week\n\t * @param {'jalali', 'gregorian'} calendar - the calendar\n\t * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n\t * @returns {Number} the number of the day of week\n\t * @throws {PersianDate} if date invalid return class with error property\n\t */\n\tconst getDayOfWeek = (\n\t\tdate = new Date(),\n\t\tcalendar = \"jalali\",\n\t\tmode = \"standard\"\n\t) => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\") {\n\t\t\t// if the year was an instance of Date\n\t\t\treturn (\n\t\t\t\tCALENDAR[calendar][\"days\"][\"weekNumber\"][date.getDay()] +\n\t\t\t\t(mode != \"standard\" ? 0 : 1)\n\t\t\t);\n\t\t}\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the year\n\t * @param {Null|Number|String} month - the month of date that gives the day of the year\n\t * @param {Null|Number|String} day - the day of date that gives the day of the year\n\t * @param {Null|Number|String} calendar - the calendar\n\t * @returns {Number} the day of the year\n\t */\n\tconst getDayOfYear = (year, month, day, calendar) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tmonth = +month;\n\t\tday = +day;\n\t\twhile (--month != 0) {\n\t\t\tday += new PersianDate([year, month], calendar).getDaysInMonth();\n\t\t}\n\t\treturn day;\n\t};\n\n\t/**\n\t * get the week of the year\n\t * @param {Null|Number|String} year - the year of date that gives the week of the year\n\t * @param {Null|Number|String} month - the month of date that gives the week of the year\n\t * @param {Null|Number|String} day - the day of date that gives the week of the year\n\t * @param {String} calendar - the calendar\n\t * @returns {Number} the week of the year\n\t */\n\tconst getWeekOfYear = (year, month, day, calendar) => {\n\t\tlet dayOfYearFormat = calendar == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = new PersianDate().calendar(calendar).parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet date = firstOfYear.clone().parse(year, month, day);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\n\t\tlet weekNumber = Math.ceil(date.diff(firstOfYear, \"date\", true) / 7);\n\n\t\tlet weeksInYear = date.clone().getWeeksInYear();\n\t\treturn weekNumber > weeksInYear ? weeksInYear : weekNumber;\n\t};\n\n\t/**\n\t * returns the ordinal number of that number sent to it\n\t * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n\t * @param {'jalali','gregorian'} calendar - the calendar\n\t * @param {?Number} mode  - 'jalali' calendar have two mode of ordinal number\n\t * @returns {String} ordinal number\n\t * @example 1st | اول | اولین\n\t */\n\tconst ordinalNumber = (number, calendar = \"jalali\", mode = 1) => {\n\t\treturn CALENDAR[calendar].ordinalNumbers(number, mode);\n\t};\n\n\t/**\n\t * add a prefix to the text in the number of characters that the text has less\n\t * @param {String|Number} text a text need prefix\n\t * @param {Number} length length of text\n\t * @param {String} [prefix=0] - string for add before of text\n\t * @returns {String} text with or wihtout prefix\n\t */\n\tconst addPrefix = (text, length, prefix = \"0\") => {\n\t\treturn prefix.repeat(length - String(text).length) + text;\n\t};\n\n\t/**\n\t * make error and delete this.d\n\t * @param {String} errorText - Error Text\n\t * @returns {PersianDate} make error and return class\n\t */\n\tconst showError = (errorText, instance) => {\n\t\tdelete instance.d;\n\t\tinstance.error = errorText;\n\t\treturn errorText;\n\t};\n\n\t/**\n\t * make current date in persian calendar\n\t * @returns {PersianDate} make current date and return class\n\t */\n\tPersianDate.prototype.now = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\tlet date = new Date();\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * set persian date from Gregorian date\n\t * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.setDate = function (...date) {\n\t\tdeprecate(\n\t\t\t'\"setDate\" function is deprecated! use \"fromGregorian\" function instead.\\n' +\n\t\t\t\"https://alireza-ab.ir/persian-date/create-and-parse#from-gregorian-date\"\n\t\t);\n\t\treturn this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * convert a jalali or gregorian date to PersianDate instance\n\t * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.parse = function (...date) {\n\t\tif (this.c == \"jalali\") return this.fromJalali(...date);\n\t\telse return this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * receives year and determined that is leap year or not\n\t * @param {?Number} year - the year to be determined is a leap or not\n\t * @returns {Boolean} if is leap year, returns true\n\t */\n\tPersianDate.prototype.isLeapYear = function (year) {\n\t\tif (this.error) return false;\n\t\tif (!year) year = this.year();\n\t\tif (this.c == \"jalali\") {\n\t\t\tlet array =\n\t\t\t\tyear > 1342\n\t\t\t\t\t? [1, 5, 9, 13, 17, 22, 26, 30]\n\t\t\t\t\t: [1, 5, 9, 13, 17, 21, 26, 30];\n\t\t\tlet remainder = year % 33;\n\t\t\treturn array.includes(remainder);\n\t\t} else {\n\t\t\treturn (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n\t\t}\n\t};\n\n\t/**\n\t * checks the persian date and time\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid, returns true\n\t */\n\tPersianDate.prototype.isValid = function (\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\treturn (\n\t\t\tthis.isValidDate(year, month, day) &&\n\t\t\tthis.isValidTime(hour, minute, second, millisecond)\n\t\t);\n\t};\n\n\t/**\n\t * checks the persian date\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @returns {Boolean} if is valid date, returns true\n\t */\n\tPersianDate.prototype.isValidDate = function (year, month, day) {\n\t\tif (this.error) return false;\n\t\tif (!year) {\n\t\t\tyear = this.d.year;\n\t\t\tmonth = this.d.month;\n\t\t\tday = this.d.date;\n\t\t}\n\t\tif ([year, month, day].some((e) => String(e).search(/null|NaN/) != -1))\n\t\t\treturn false;\n\t\tif (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n\t\t\treturn false;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 7 && month <= 11 && day == 31) return false;\n\t\t\tif (month == 12 && day == 31) return false;\n\t\t\tif (month == 12 && day == 30 && !this.isLeapYear(year)) return false;\n\t\t} else {\n\t\t\tif ([2, 4, 6, 9, 11].includes(month) && day == 31) return false;\n\t\t\tif (month == 2 && (day == 30 || (day == 29 && !this.isLeapYear(year))))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t/**\n\t * checks the time\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid time, returns true\n\t */\n\tPersianDate.prototype.isValidTime = function (\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\tif (hour == undefined) {\n\t\t\thour = this.d.hour;\n\t\t\tminute = this.d.minute;\n\t\t\tsecond = this.d.second;\n\t\t\tmillisecond = this.d.millisecond;\n\t\t}\n\n\t\tif (\n\t\t\t[hour, minute, second, millisecond].some(\n\t\t\t\t(e) => String(e).search(/null|NaN/) != -1\n\t\t\t)\n\t\t)\n\t\t\treturn false;\n\t\tif (hour < 0 || hour > 23) return false;\n\t\tif (minute < 0 || minute > 59) return false;\n\t\tif (second < 0 || second > 59) return false;\n\t\tif (millisecond < 0 || millisecond > 999) return false;\n\t\treturn true;\n\t};\n\n\t/**\n\t * returns number of days in month\n\t * @param {?Number} year - year of date that returns number of days in month\n\t * @param {?Number} month - month of date that returns number of days in month\n\t * @returns {Number} number of days in month\n\t */\n\tPersianDate.prototype.getDaysInMonth = function (\n\t\tyear = this.d.year,\n\t\tmonth = this.d.month\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 1 && month <= 6) return 31;\n\t\t\tif ((month > 6 && month <= 11) || this.isLeapYear(year)) {\n\t\t\t\treturn 30;\n\t\t\t}\n\t\t\treturn 29;\n\t\t} else {\n\t\t\tif ([1, 3, 5, 7, 8, 10, 12].includes(month)) return 31;\n\t\t\tif (month == 2) {\n\t\t\t\tif (this.isLeapYear(year)) return 29;\n\t\t\t\treturn 28;\n\t\t\t}\n\t\t\treturn 30;\n\t\t}\n\t};\n\n\t/**\n\t * add to year\n\t * @param {?Number|String} [year=1] - a number for add with year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\tif (year < 0)\n\t\t\t// if the number was negative, send to subYear method\n\t\t\treturn this.subYear(Math.abs(year));\n\t\tthis.d.year += +year; //plus sign before a variable, convert variable to int\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to month\n\t * @param {?Number|String} [month=1] - a number for add with month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tif (month < 0)\n\t\t\t// if the number was negative, send to subMonth method\n\t\t\treturn this.subMonth(Math.abs(month));\n\t\tmonth = +month; // plus sign before a variable, convert variable to int\n\n\t\tlet monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n\t\tif (monthToStartNewYear > month) {\n\t\t\tthis.d.month += month;\n\t\t} else {\n\t\t\tthis.addYear(1, false);\n\t\t\tthis.d.month = 1;\n\t\t\tmonth -= monthToStartNewYear;\n\t\t\twhile (month >= 12) {\n\t\t\t\tmonth -= 12;\n\t\t\t\tthis.addYear(1, false);\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month += month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to day\n\t * @param {?Number|String} [day=1] - a number for add with day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tif (day < 0)\n\t\t\t// if the number was negative, send to subDay method\n\t\t\treturn this.subDay(Math.abs(day));\n\t\tday = +day; //plus sign before a variable, convert variable to int\n\n\t\tlet dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n\t\tif (dayToStartNextMonth > day) {\n\t\t\tthis.d.date += day;\n\t\t} else {\n\t\t\tthis.addMonth(1, false);\n\t\t\tthis.d.date = 1;\n\t\t\tday -= dayToStartNextMonth;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.addMonth(1, false);\n\t\t\t}\n\t\t\tif (day != 0) {\n\t\t\t\tthis.d.date += day;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to quarter\n\t * @param {?Number|String} [quarter=1] - a number for add with quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tif (quarter < 0)\n\t\t\t// if the number was negative, send to subQuarter method\n\t\t\treturn this.subQuarter(Math.abs(quarter));\n\t\tquarter = +quarter; //plus sign before a variable, convert variable to int\n\t\treturn this.addMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * add to week\n\t * @param {?Number|String} [week=1] - a number for add with week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tif (week < 0)\n\t\t\t// if the number was negative, send to subWeek method\n\t\t\treturn this.subWeek(Math.abs(week));\n\t\tweek = +week; //plus sign before a variable, convert variable to int\n\t\treturn this.addDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * add to hour\n\t * @param {?Number|String} [hour=1] - a number for add with hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\tif (hour < 0)\n\t\t\t// if the number was negative, send to subHour method\n\t\t\treturn this.subHour(Math.abs(hour));\n\t\thour = +hour; //plus sign before a variable, convert variable to int\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.addDay(1, false);\n\t\t}\n\t\tlet hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n\t\tif (hour >= hourToNextDay) {\n\t\t\tthis.addDay(1, false);\n\t\t\thour -= hourToNextDay;\n\t\t\tthis.d.hour = hour;\n\t\t} else this.d.hour += hour;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to minute\n\t * @param {?Number|String} [minute=1] - a number for add with minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tif (minute < 0)\n\t\t\t// if the number was negative, send to subMinute method\n\t\t\treturn this.subMinute(Math.abs(minute));\n\t\tminute = +minute; //plus sign before a variable, convert variable to int\n\t\twhile (minute >= 60) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= 60;\n\t\t}\n\t\tlet minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n\t\tif (minute >= minuteToNextHour) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= minuteToNextHour;\n\t\t\tthis.d.minute = minute;\n\t\t} else this.d.minute += minute;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to second\n\t * @param {?Number|String} [second=1] - a number for add with second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tif (second < 0)\n\t\t\t// if the number was negative, send to subSecond method\n\t\t\treturn this.subSecond(Math.abs(second));\n\t\tsecond = +second; //plus sign before a variable, convert variable to int\n\t\twhile (second >= 60) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= 60;\n\t\t}\n\t\tlet secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n\t\tif (second >= secondToNextMinute) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= secondToNextMinute;\n\t\t\tthis.d.second = second;\n\t\t} else this.d.second += second;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.addMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tif (millisecond < 0)\n\t\t\t// if the number was negative, send to subMillisecond method\n\t\t\treturn this.subMillisecond(Math.abs(millisecond));\n\t\tmillisecond = +millisecond; //plus sign before a variable, convert variable to int\n\t\twhile (millisecond >= 1000) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= 1000;\n\t\t}\n\t\tlet millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n\t\tif (millisecond >= millisecondToNextSecond) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= millisecondToNextSecond;\n\t\t\tthis.d.millisecond = millisecond;\n\t\t} else this.d.millisecond += millisecond;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from year\n\t * @param {?Number|String} [year=1] - a number for subtract from year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n\t\tif (!year) return this;\n\t\tthis.d.year -= Math.abs(year);\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from month\n\t * @param {?Number|String} [month=1] - a number for subtract from month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tmonth = Math.abs(month); //plus sign before a variable, convert variable to int\n\t\tlet pastMonth = this.d.month; //pastMonth -> Number of month that is past\n\t\tif (pastMonth > month) {\n\t\t\tthis.d.month -= month;\n\t\t} else {\n\t\t\tthis.subYear(1, false);\n\t\t\tthis.d.month = 12;\n\t\t\tmonth -= pastMonth;\n\t\t\twhile (month >= 12) {\n\t\t\t\tthis.subYear(1, false);\n\t\t\t\tmonth -= 12;\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month -= month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from day\n\t * @param {?Number|String} [day=1] - a number for subtract from day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tday = Math.abs(day);\n\t\tlet pastDays = this.d.date; // pastDays -> Number of days that is past\n\t\tif (pastDays > day) {\n\t\t\tthis.d.date -= day;\n\t\t} else {\n\t\t\tthis.subMonth(1, false);\n\t\t\tthis.d.date = this.getDaysInMonth();\n\t\t\tday -= pastDays;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.subMonth(1, false);\n\t\t\t}\n\t\t\tthis.d.date = this.getDaysInMonth() - day;\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from quarter\n\t * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tquarter = Math.abs(quarter);\n\t\treturn this.subMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * subtract from week\n\t * @param {?Number|String} [week=1] - a number for subtract from week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tweek = Math.abs(week);\n\t\treturn this.subDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * subtract from hour\n\t * @param {?Number|String} [hour=1] - a number for subtract from hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\thour = Math.abs(hour);\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\tlet pastHours = this.d.hour; // pastHours -> Number of hours that is past\n\t\tif (hour > pastHours) {\n\t\t\tthis.subDay(1, false);\n\t\t\thour -= pastHours;\n\t\t\tthis.d.hour = 24 - hour;\n\t\t} else this.d.hour -= hour;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from minute\n\t * @param {?Number|String} [minute=1] - a number for subtract from minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tminute = Math.abs(minute);\n\t\twhile (minute >= 60) {\n\t\t\tminute -= 60;\n\t\t\tthis.subHour(1, false);\n\t\t}\n\t\tlet pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n\t\tif (minute > pastMinute) {\n\t\t\tthis.subHour(1, false);\n\t\t\tminute -= pastMinute;\n\t\t\tthis.d.minute = 60 - minute;\n\t\t} else this.d.minute -= minute;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from second\n\t * @param {?Number|String} [second=1] - a number for subtract from second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tsecond = Math.abs(second);\n\t\twhile (second >= 60) {\n\t\t\tsecond -= 60;\n\t\t\tthis.subMinute(1, false);\n\t\t}\n\t\tlet pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n\t\tif (second > pastSeconds) {\n\t\t\tthis.subMinute(1, false);\n\t\t\tsecond -= pastSeconds;\n\t\t\tthis.d.second = 60 - second;\n\t\t} else this.d.second -= second;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.subMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tmillisecond = Math.abs(millisecond);\n\t\twhile (millisecond >= 1000) {\n\t\t\tmillisecond -= 1000;\n\t\t\tthis.subSecond(1, false);\n\t\t}\n\t\tlet pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n\t\tif (millisecond > pastMilliseconds) {\n\t\t\tthis.subSecond(1, false);\n\t\t\tmillisecond -= pastMilliseconds;\n\t\t\tthis.d.millisecond = 1000 - millisecond;\n\t\t} else this.d.millisecond -= millisecond;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * returns date as string with specify format\n\t * @param {?String} [format=date] - formatting date to string\n\t * @returns {String} date string\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toString = function (format = \"date\") {\n\t\tif (this.error) return this.error;\n\t\tlet texts = [];\n\t\tformat = format.replace(REGEX[\"betweenBacktick\"], (matched, text) => {\n\t\t\ttexts.push(text);\n\t\t\treturn \"###\";\n\t\t});\n\t\tformat = format.replace(/\\?/g, this.c == \"jalali\" ? \"j\" : \"\");\n\t\tif (this.c == \"jalali\")\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"jYYYY/jMM/jDD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"jYYYY/jMM/jDD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\telse\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"YYYY-MM-DD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"YYYY-MM-DD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\tlet matchedFormat = format.match(REGEX[\"format\"]);\n\t\tlet dateString = \"\";\n\t\tfor (const i of matchedFormat) {\n\t\t\tdateString += format.substring(0, format.indexOf(i));\n\t\t\tif (i.search(/Y|y/) != -1) dateString += this.year(i);\n\t\t\telse if (i.search(/M/) != -1) dateString += this.month(i);\n\t\t\telse if (i.search(/Q/) != -1) dateString += this.quarter(i);\n\t\t\telse if (i.search(/D|d/) != -1) dateString += this.date(i);\n\t\t\telse if (i.search(/W|w/) != -1) dateString += this.week(i);\n\t\t\telse if (i.search(/H|h|k/) != -1) dateString += this.hour(i);\n\t\t\telse if (i.search(/m/) != -1) dateString += this.minute(i);\n\t\t\telse if (i.search(/s/) != -1) dateString += this.second(i);\n\t\t\telse if (i.search(/c|C/) != -1) dateString += this.millisecond(i);\n\t\t\telse if (i.search(/t/) != -1) dateString += this.timestamp();\n\t\t\telse if (i.search(/a|A/) != -1) dateString += TIMETYPE(this.d.hour, i);\n\n\t\t\tformat = format.substr(format.indexOf(i) + i.length);\n\t\t}\n\t\tdateString += format;\n\t\tfor (let i = 0; i < texts.length; i++)\n\t\t\tdateString = dateString.replace(\"###\", texts[i]);\n\t\treturn String(dateString);\n\t};\n\n\t/**\n\t * get or set year\n\t * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the year, returns class,\n\t * else returns a number or string from year\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.year = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tthis.d.year = +format;\n\t\t\tif (!this.isValidDate()) {\n\t\t\t\treturn this.addYear(format);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jYYYY\" : \"YYYY\";\n\t\t\tlet year = this.c == \"jalali\" ? this.d.year : gtj(this.toDate())[0];\n\t\t\tif (format == \"jYYYY\" || format == \"jy\") return year;\n\t\t\tif (format == \"jYY\") return String(year).slice(-2);\n\t\t\tlet gYear =\n\t\t\t\tthis.c == \"jalali\" ? this.toDate().getFullYear() : this.d.year;\n\t\t\tif (format == \"YYYY\" || format == \"y\") return gYear;\n\t\t\tif (format == \"YY\") return String(gYear).slice(-2);\n\t\t\treturn year;\n\t\t}\n\t};\n\n\t/**\n\t * get or set month\n\t * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the month, returns class,\n\t * else returns a number or string from month\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.month = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subMonth(format - 1);\n\t\t\t} else if (format > 12) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addMonth(format - 12);\n\t\t\t}\n\t\t\tthis.d.month = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jM\" : \"M\";\n\t\t\tlet month = this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1];\n\t\t\tif (format == \"jMM\") return addPrefix(month, 2);\n\t\t\tif (format == \"jM\") return month;\n\t\t\tif (format == \"jMMMM\" || format == \"jMMM\")\n\t\t\t\treturn CALENDAR[\"jalali\"][\"months\"][month];\n\t\t\tif (format == \"jMo\") return ordinalNumber(month);\n\t\t\tif (format == \"jMO\") return ordinalNumber(month, \"jalali\", 2);\n\t\t\tlet gMonth =\n\t\t\t\tthis.c == \"jalali\" ? this.toDate().getMonth() + 1 : this.d.month;\n\t\t\tif (format == \"M\") return gMonth;\n\t\t\tif (format == \"MM\") return addPrefix(gMonth, 2);\n\t\t\tif (format == \"MMMM\") return CALENDAR[\"gregorian\"][\"months\"][gMonth];\n\t\t\tif (format == \"Mo\" || format == \"MO\")\n\t\t\t\treturn ordinalNumber(gMonth, \"gregorian\");\n\t\t\tif (format == \"MMM\")\n\t\t\t\treturn CALENDAR[\"gregorian\"][\"months\"][gMonth].slice(0, 3);\n\t\t\treturn month;\n\t\t}\n\t};\n\n\t/**\n\t * get or set day in month\n\t * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the day, returns class,\n\t * else returns a number or string from day\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.date = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet daysInMonth = this.getDaysInMonth();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.date = 1;\n\t\t\t\treturn this.subDay(format - 1);\n\t\t\t} else if (format > daysInMonth) {\n\t\t\t\tthis.d.date = daysInMonth;\n\t\t\t\treturn this.addDay(format - daysInMonth);\n\t\t\t}\n\t\t\tthis.d.date = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jD\" : \"D\";\n\t\t\tlet date = this.c == \"jalali\" ? this.d.date : gtj(this.toDate())[2];\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"jDD\") return addPrefix(date, 2);\n\t\t\tif (format == \"jD\") return date;\n\t\t\tif (format == \"jDo\") return ordinalNumber(date);\n\t\t\tif (format == \"jDO\") return ordinalNumber(date, \"jalali\", 2);\n\t\t\t//---------- Day of Week ----------//\n\t\t\tlet gDate = this.toDate();\n\t\t\tif (format == \"jdddd\" || format == \"jddd\") return getDayLabel(gDate);\n\t\t\tif (format == \"jdd\") return getDayLabel(gDate).slice(0, 1);\n\t\t\tlet dayOfWeek = getDayOfWeek(gDate);\n\t\t\tif (format == \"jdo\") return ordinalNumber(dayOfWeek);\n\t\t\tif (format == \"jdO\") return ordinalNumber(dayOfWeek, \"jalali\", 2);\n\t\t\tif (format == \"jd\") return getDayOfWeek(gDate, \"jalali\", \"array\");\n\t\t\tif (format == \"jde\") return dayOfWeek;\n\t\t\t//---------- Day of Year ----------//\n\t\t\tlet dayOfYear = getDayOfYear(\n\t\t\t\tthis.year(\"jy\"),\n\t\t\t\tthis.month(\"jM\"),\n\t\t\t\tdate,\n\t\t\t\t\"j\"\n\t\t\t);\n\t\t\tif (format == \"jDDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"jDDD\") return dayOfYear;\n\t\t\tif (format == \"jDDDo\") return ordinalNumber(dayOfYear);\n\t\t\tif (format == \"jDDDO\") return ordinalNumber(dayOfYear, \"jalali\", 2);\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"DD\") return addPrefix(gDate.getDate(), 2);\n\t\t\tif (format == \"D\") return gDate.getDate();\n\t\t\tif (format == \"Do\" || format == \"DO\")\n\t\t\t\treturn ordinalNumber(gDate.getDate(), \"gregorian\");\n\t\t\t//---------- Day of Week ----------//\n\t\t\tif (format == \"dddd\") return getDayLabel(gDate, \"gregorian\");\n\t\t\tif (format == \"ddd\") return getDayLabel(gDate, \"gregorian\").slice(0, 3);\n\t\t\tif (format == \"dd\") return getDayLabel(gDate, \"gregorian\").slice(0, 2);\n\t\t\tdayOfWeek = getDayOfWeek(gDate, \"gregorian\");\n\t\t\tif (format == \"do\" || format == \"dO\")\n\t\t\t\treturn ordinalNumber(dayOfWeek, \"gregorian\");\n\t\t\tif (format == \"d\") return getDayOfWeek(gDate, \"gregorian\", \"array\");\n\t\t\tif (format == \"de\") return dayOfWeek;\n\t\t\tdayOfYear = getDayOfYear(\n\t\t\t\tgDate.getFullYear(),\n\t\t\t\tgDate.getMonth() + 1,\n\t\t\t\tgDate.getDate(),\n\t\t\t\t\"g\"\n\t\t\t);\n\t\t\t//---------- Day of Year ----------//\n\t\t\tif (format == \"DDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"DDD\") return dayOfYear;\n\t\t\tif (format == \"DDDo\" || format == \"DDDO\")\n\t\t\t\treturn ordinalNumber(dayOfYear, \"gregorian\");\n\t\t\treturn date;\n\t\t}\n\t};\n\n\t/**\n\t * get or set quarter\n\t * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the quarter, returns class,\n\t * else returns a number or string from quarter\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.quarter = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subQuarter(format - 1);\n\t\t\t} else if (format > 4) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addQuarter(format - 4);\n\t\t\t}\n\t\t\tthis.d.month = +format * 3 - 2;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jQ\" : \"Q\";\n\t\t\tlet quarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1]) / 3\n\t\t\t);\n\t\t\tif (format == \"jQ\") return quarter;\n\t\t\tif (format == \"jQo\") return ordinalNumber(quarter);\n\t\t\tif (format == \"jQO\") return ordinalNumber(quarter, \"jalali\", 2);\n\t\t\tquarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\" ? this.toDate().getMonth() + 1 : this.d.month) / 3\n\t\t\t);\n\t\t\tif (format == \"Q\") return quarter;\n\t\t\tif (format == \"Qo\" || format == \"QO\")\n\t\t\t\treturn ordinalNumber(quarter, \"gregorian\");\n\t\t\treturn quarter;\n\t\t}\n\t};\n\n\t/**\n\t * get or set week\n\t * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the week, returns class,\n\t * else returns a number or string from week\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.week = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet weeksInYear = this.getWeeksInYear();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.week(1);\n\t\t\t\treturn this.subWeek(format - 1);\n\t\t\t} else if (format > weeksInYear) {\n\t\t\t\tthis.week(weeksInYear);\n\t\t\t\treturn this.addWeek(format - weeksInYear);\n\t\t\t}\n\t\t\tlet weekOfYear = getWeekOfYear(\n\t\t\t\tthis.d.year,\n\t\t\t\tthis.d.month,\n\t\t\t\tthis.d.date,\n\t\t\t\tthis.c\n\t\t\t);\n\t\t\tthis.addWeek(+format - weekOfYear);\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jw\" : \"w\";\n\t\t\tlet date =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? [this.d.year, this.d.month, this.d.date]\n\t\t\t\t\t: gtj(this.toDate());\n\t\t\tlet weekOfYear = getWeekOfYear(date[0], date[1], date[2], this.c);\n\t\t\tif (format == \"jw\" || format == \"jW\") return weekOfYear;\n\t\t\tif (format == \"jww\" || format == \"jWW\") return addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"jwo\" || format == \"jWo\") return ordinalNumber(weekOfYear);\n\t\t\tif (format == \"jwO\" || format == \"jWO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"jalali\", 2);\n\t\t\tweekOfYear = getWeekOfYear(\n\t\t\t\tthis.year(\"y\"),\n\t\t\t\tthis.month(\"M\"),\n\t\t\t\tthis.date(\"D\"),\n\t\t\t\t\"gregorian\"\n\t\t\t);\n\t\t\tif (format == \"w\" || format == \"W\") return weekOfYear;\n\t\t\tif (format == \"ww\" || format == \"WW\") return addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"wo\" || format == \"Wo\" || format == \"wO\" || format == \"WO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"gregorian\");\n\t\t\treturn weekOfYear;\n\t\t}\n\t};\n\n\t/**\n\t * get or set hour\n\t * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the hour, returns class,\n\t * else returns a number or string from hour\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.hour = function (format = \"H\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0) {\n\t\t\t\tthis.d.hour = 0;\n\t\t\t\treturn this.subHour(format - 1);\n\t\t\t} else if (format > 23) {\n\t\t\t\tthis.d.hour = 23;\n\t\t\t\treturn this.addHour(format - 23);\n\t\t\t}\n\t\t\tthis.d.hour = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tlet hour = this.d.hour;\n\t\t\tif (format == \"H\") return hour;\n\t\t\tif (format == \"HH\") return addPrefix(hour, 2);\n\t\t\tif (format == \"k\") return hour || 24;\n\t\t\tif (format == \"kk\") return addPrefix(hour || 24, 2);\n\t\t\thour = hour > 12 ? hour - 12 : hour;\n\t\t\tif (format == \"h\") return hour;\n\t\t\tif (format == \"hh\") return addPrefix(hour, 2);\n\t\t\treturn hour;\n\t\t}\n\t};\n\n\t/**\n\t * get or set minute\n\t * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the minute, returns class,\n\t * else returns a number or string from minute\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.minute = function (format = \"m\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59) return this.addMinute(format);\n\t\t\tthis.d.minute = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"m\") return this.d.minute;\n\t\t\tif (format == \"mm\") return addPrefix(this.d.minute, 2);\n\t\t\treturn this.d.minute;\n\t\t}\n\t};\n\n\t/**\n\t * get or set second\n\t * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the second, returns class,\n\t * else returns a number or string from second\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.second = function (format = \"s\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59) return this.addSecond(format);\n\t\t\tthis.d.second = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"s\") return this.d.second;\n\t\t\tif (format == \"ss\") return addPrefix(this.d.second, 2);\n\t\t\treturn this.d.second;\n\t\t}\n\t};\n\n\t/**\n\t * get or set millisecond\n\t * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n\t * else returns a number or string from millisecond\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.millisecond = function (format = \"c\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 999) return this.addMillisecond(format);\n\t\t\tthis.d.millisecond = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"CCC\" || format == \"c\") return this.d.millisecond;\n\t\t\tif (format == \"CCCC\") return addPrefix(this.d.millisecond, 3);\n\t\t\treturn this.d.millisecond;\n\t\t}\n\t};\n\n\t/**\n\t * get timestamp or set date from timestamp\n\t * @param {Null|Number|String} value - a number for set the millisecond\n\t * @returns {PersianDate|Number} if set the timestamp, returns class,\n\t * else returns timestamp (number)\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.timestamp = function (value) {\n\t\tif (this.error) return this.error;\n\t\tif (value) {\n\t\t\treturn this.fromGregorian(+String(value).trim());\n\t\t} else {\n\t\t\treturn this.toDate().getTime();\n\t\t}\n\t};\n\n\t////////////////////--- Version 1.1.0 ---////////////////////\n\n\t/**\n\t * get clone of this date\n\t * @since 1.1.0\n\t * @returns {PersianDate} returns the clone of this date\n\t */\n\tPersianDate.prototype.clone = function () {\n\t\treturn Object.assign(\n\t\t\tObject.create(Object.getPrototypeOf(this)),\n\t\t\tJSON.parse(JSON.stringify(this))\n\t\t);\n\t};\n\n\t/**\n\t * checks this date is the same to another date\n\t * @since 1.1.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isSame = function (...date) {\n\t\tif (this.error) return false;\n\t\tdate = typesToArray(this.c, ...date);\n\t\tdate = this.toArray().map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(date[i]) ? date[i] : value\n\t\t);\n\n\t\tif (this.isValid(...date))\n\t\t\treturn (\n\t\t\t\tthis.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp() == this.timestamp()\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t////////////////////--- Version 1.2.0 ---////////////////////\n\n\t/**\n\t * convert String or Array or Object or PersianDate to Array\n\t * @since 1.2.0\n\t * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n\t */\n\tconst typesToArray = function (\n\t\tcalendar,\n\t\tyear,\n\t\tmonth,\n\t\tdate,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (!year)\n\t\t\t// if year not defined\n\t\t\tyear = calendar == \"jalali\" ? gtj() : new Date(); // return now\n\t\tif (typeof year == \"string\" && year.search(REGEX[\"separators\"]) != -1) {\n\t\t\t// if type of year is String\n\t\t\tyear = year.split(/[/ -.,:\\\\]/);\n\t\t}\n\t\tif (year instanceof PersianDate)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn year.calendar(calendar).toArray();\n\t\telse if (year instanceof Date)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn new PersianDate(year).calendar(calendar).toArray();\n\t\telse if (Object.prototype.toString.call(year) === \"[object Array]\")\n\t\t\t// if type of year is Array\n\t\t\treturn year;\n\t\telse if (Object.prototype.toString.call(year) === \"[object Object]\")\n\t\t\t// if type of year is Object\n\t\t\treturn [\n\t\t\t\tyear.y || year.year || year.years,\n\t\t\t\tyear.M || year.month || year.months || 1,\n\t\t\t\tyear.d || year.day || year.days || year.date || 1,\n\t\t\t\tyear.h || year.hour || year.hours || 0,\n\t\t\t\tyear.m || year.minute || year.minutes || 0,\n\t\t\t\tyear.s || year.second || year.seconds || 0,\n\t\t\t\tyear.ms || year.millisecond || year.milliseconds || 0,\n\t\t\t];\n\t\treturn [year, month, date, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * checks this date is before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \"<\", date);\n\t};\n\n\t/**\n\t * checks this date is after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \">\", date);\n\t};\n\n\t////////////////////--- Version 1.3.0 ---////////////////////\n\n\t/**\n\t * return the object of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return Object of date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toObject = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn this.d;\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn {\n\t\t\tyear: this.year(formats[0]),\n\t\t\tmonth: this.month(formats[1]),\n\t\t\tdate: this.date(formats[2]),\n\t\t\thour: this.hour(formats[3]),\n\t\t\tminute: this.minute(formats[4]),\n\t\t\tsecond: this.second(formats[5]),\n\t\t\tmillisecond: this.millisecond(formats[6]),\n\t\t};\n\t};\n\n\t/**\n\t * checks date is a native js Date object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a native js Date, return true\n\t */\n\tPersianDate.prototype.isDate = function (date) {\n\t\treturn date instanceof Date;\n\t};\n\n\t/**\n\t * checks date is a PersianDate object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a PersianDate, return true\n\t */\n\tPersianDate.prototype.isPersianDate = function (date) {\n\t\treturn date instanceof PersianDate;\n\t};\n\n\t/**\n\t * checks this date is same or before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isSameOrBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \"<=\", date);\n\t};\n\n\t/**\n\t * checks this date is same or after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isSameOrAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \">=\", date);\n\t};\n\n\t/**\n\t * checks this date is between the another dates\n\t * @since 1.3.0\n\t * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} from.y - year of date\n\t * @param {Null|String|Number} from.year - year of date\n\t * @param {Null|String|Number} from.years - year of date\n\t * @param {Null|String|Number} from.M - month of date\n\t * @param {Null|String|Number} from.month - month of date\n\t * @param {Null|String|Number} from.months - month of date\n\t * @param {Null|String|Number} from.d - day of date\n\t * @param {Null|String|Number} from.day - day of date\n\t * @param {Null|String|Number} from.days - day of date\n\t * @param {Null|String|Number} from.date - day of date\n\t * @param {Null|String|Number} from.h - hour of date\n\t * @param {Null|String|Number} from.hour - hour of date\n\t * @param {Null|String|Number} from.hours - hour of date\n\t * @param {Null|String|Number} from.m - minute of date\n\t * @param {Null|String|Number} from.minute - minute of date\n\t * @param {Null|String|Number} from.minutes - minute of date\n\t * @param {Null|String|Number} from.s - second of date\n\t * @param {Null|String|Number} from.second - second of date\n\t * @param {Null|String|Number} from.seconds - second of date\n\t * @param {Null|String|Number} from.ms - millisecond of date\n\t * @param {Null|String|Number} from.millisecond - millisecond of date\n\t * @param {Null|String|Number} from.milliseconds - millisecond of date\n\t * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} to.y - year of date\n\t * @param {Null|String|Number} to.year - year of date\n\t * @param {Null|String|Number} to.years - year of date\n\t * @param {Null|String|Number} to.M - month of date\n\t * @param {Null|String|Number} to.month - month of date\n\t * @param {Null|String|Number} to.months - month of date\n\t * @param {Null|String|Number} to.d - day of date\n\t * @param {Null|String|Number} to.day - day of date\n\t * @param {Null|String|Number} to.days - day of date\n\t * @param {Null|String|Number} to.date - day of date\n\t * @param {Null|String|Number} to.h - hour of date\n\t * @param {Null|String|Number} to.hour - hour of date\n\t * @param {Null|String|Number} to.hours - hour of date\n\t * @param {Null|String|Number} to.m - minute of date\n\t * @param {Null|String|Number} to.minute - minute of date\n\t * @param {Null|String|Number} to.minutes - minute of date\n\t * @param {Null|String|Number} to.s - second of date\n\t * @param {Null|String|Number} to.second - second of date\n\t * @param {Null|String|Number} to.seconds - second of date\n\t * @param {Null|String|Number} to.ms - millisecond of date\n\t * @param {Null|String|Number} to.millisecond - millisecond of date\n\t * @param {Null|String|Number} to.milliseconds - millisecond of date\n\t * @param {String} method - determines that consider the dates themselves\n\t * @returns {‌Boolean} if date valid, return true or false\n\t * @throws {PersianDate} return the class\n\t */\n\tPersianDate.prototype.isBetween = function (from, to, method = \"()\") {\n\t\tif (this.error) return false;\n\t\t// let $this = this.clone();\n\t\tfrom = typesToArray(this.c, from);\n\t\tlet date = this.toArray();\n\t\tif (!from[2]) date[2] = 1;\n\t\t// $this.date(1);\n\t\tfrom = date.map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(from[i]) ? from[i] : value\n\t\t);\n\n\t\t// from = [\n\t\t// \tfrom[0] || this.d.year,\n\t\t// \tfrom[1] || this.d.month,\n\t\t// \tfrom[2] || 1,\n\t\t// \tfrom[3] || this.d.hour,\n\t\t// \tfrom[4] || this.d.minute,\n\t\t// \tfrom[5] || this.d.second,\n\t\t// \tfrom[6] || this.d.millisecond,\n\t\t// ];\n\t\tto = typesToArray(this.c, to);\n\t\t// to = [\n\t\t// \tto[0] || this.d.year,\n\t\t// \tto[1] || this.d.month,\n\t\t// \tto[2] || 1,\n\t\t// \tto[3] || this.d.hour,\n\t\t// \tto[4] || this.d.minute,\n\t\t// \tto[5] || this.d.second,\n\t\t// \tto[6] || this.d.millisecond,\n\t\t// ];\n\t\tto = date.map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(to[i]) ? to[i] : value\n\t\t);\n\n\t\tif (!(this.isValid(...from) && this.isValid(...to))) return false;\n\n\t\treturn (\n\t\t\tcompareDate(this, method[0] === \"[\" ? \">=\" : \">\", from) &&\n\t\t\tcompareDate(this, method[1] === \"]\" ? \"<=\" : \"<\", to)\n\t\t);\n\t\t// return (\n\t\t// \t(method[0] === \"[\"\n\t\t// \t\t? $this.isSameOrAfter(from)\n\t\t// \t\t: $this.isAfter(from)) &&\n\t\t// \t(method[1] === \"]\"\n\t\t// \t\t? $this.isSameOrBefore(to)\n\t\t// \t\t: $this.isBefore(to))\n\t\t// );\n\t};\n\n\t////////////////////--- Version 1.4.0 ---////////////////////\n\n\t/**\n\t * returns minimum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return minimum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.min = function () {\n\t\treturn mathOperation(arguments, this, \"min\");\n\t};\n\n\t/**\n\t * returns maximum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.max = function () {\n\t\treturn mathOperation(arguments, this, \"max\");\n\t};\n\n\t/**\n\t * get the diffrence between two date\n\t * @since 1.4.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {String} unit - the unit of the measurment\n\t * @returns {Number} diffrence\n\t * @throws {Boolean} if dates invalid, returns false\n\t */\n\tPersianDate.prototype.diff = function (date, unit, addOne = false) {\n\t\tif (this.error) return this.error;\n\t\tdate = typesToArray(this.c, date);\n\t\tif (!this.isValid(...date)) return \"تاریخ نامعتبر\";\n\t\tlet result =\n\t\t\tthis.timestamp() -\n\t\t\tthis.clone()\n\t\t\t\t.parse(...date)\n\t\t\t\t.timestamp();\n\t\tswitch (unit) {\n\t\t\tcase \"y\":\n\t\t\tcase \"year\":\n\t\t\tcase \"years\":\n\t\t\t\tresult = this.d.year - date[0];\n\t\t\t\tbreak;\n\t\t\tcase \"M\":\n\t\t\tcase \"month\":\n\t\t\tcase \"months\":\n\t\t\t\tresult = this.d.year * 12 + this.d.month - (+date[0] * 12 + +date[1]);\n\t\t\t\tbreak;\n\t\t\tcase \"d\":\n\t\t\tcase \"date\":\n\t\t\tcase \"day\":\n\t\t\tcase \"days\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60 / 24);\n\t\t\t\tbreak;\n\t\t\tcase \"h\":\n\t\t\tcase \"hour\":\n\t\t\tcase \"hours\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"m\":\n\t\t\tcase \"minute\":\n\t\t\tcase \"minutes\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"s\":\n\t\t\tcase \"second\":\n\t\t\tcase \"seconds\":\n\t\t\t\tresult = Math.ceil(result / 1000);\n\t\t\t\tbreak;\n\t\t\tcase \"ms\":\n\t\t\tcase \"millisecond\":\n\t\t\tcase \"milliseconds\":\n\t\t}\n\t\treturn addOne ? result + (result >= 0 ? 1 : -1) : result;\n\t};\n\n\t////////////////////--- Version 1.5.0 ---////////////////////\n\n\t/**\n\t * return the array of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return array of date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toArray = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn Object.values(this.d);\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn [\n\t\t\tthis.year(formats[0]),\n\t\t\tthis.month(formats[1]),\n\t\t\tthis.date(formats[2]),\n\t\t\tthis.hour(formats[3]),\n\t\t\tthis.minute(formats[4]),\n\t\t\tthis.second(formats[5]),\n\t\t\tthis.millisecond(formats[6]),\n\t\t];\n\t};\n\n\t////////////////////--- Version 2.0.0 ---////////////////////\n\n\t/**\n\t * get the diffrence between two date in a human-readable format\n\t * @since 2.0.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @returns {String} if date valid, return diff human-readable format\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.diffForHumans = function (date, suffix = true) {\n\t\tif (this.error) return this.error;\n\t\tlet result = this.diff(date, \"s\");\n\t\tif (typeof result == \"string\") return \"تاریخ نامعتبر\";\n\t\tlet prefix = result > 0 ? \"آینده\" : \"پیش\";\n\t\tresult = Math.abs(result);\n\n\t\tif (result == 0) return \"هم اکنون\";\n\t\telse if (result < 45) result = \"لحظات\";\n\t\telse if ((result /= 60) < 45)\n\t\t\t// divide by 60, for getting minute\n\t\t\tresult = Math.round(result) + \" \" + \"دقیقه\";\n\t\telse if ((result /= 60) < 23.5)\n\t\t\t// divide by 60, for getting hour\n\t\t\tresult = Math.round(result) + \" \" + \"ساعت\";\n\t\telse if ((result /= 24) < 26)\n\t\t\t// divide by 24, for getting day\n\t\t\tresult = Math.round(result) + \" \" + \"روز\";\n\t\telse if (result < 320) result = Math.round(result / 30) + \" \" + \"ماه\";\n\t\telse result = Math.round(result / 365) + \" \" + \"سال\";\n\t\treturn result + (suffix ? \" \" + prefix : \"\");\n\t};\n\n\t/**\n\t * convert a jalali date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.fromJalali = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date = gtj();\n\t\telse if (this.isPersianDate(date[0])) date = date[0].toArray();\n\t\telse date = typesToArray(this.c, ...date);\n\t\tif (this.c == \"jalali\") {\n\t\t\t//plus sign before a variable, convert variable to int\n\t\t\tthis.d.year = +date[0];\n\t\t\tthis.d.month = +date[1] || 1;\n\t\t\tthis.d.date = +date[2] || 1;\n\t\t\tthis.d.hour = +date[3] || 0;\n\t\t\tthis.d.minute = +date[4] || 0;\n\t\t\tthis.d.second = +date[5] || 0;\n\t\t\tthis.d.millisecond = +date[6] || 0;\n\t\t} else setGregorianDate(jtg(...date), this);\n\n\t\tif (!this.isValid()) return showError(\"تاریخ نامعتبر\", this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.fromGregorian = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date[0] = new Date().getTime();\n\t\tif (this.isPersianDate(date[0])) {\n\t\t\tdate = date[0].toArray();\n\t\t} else if (!isTimestamp(date[0])) {\n\t\t\tdate = typesToArray(this.c, ...date);\n\t\t\tdate[6] = +date[6] || 0;\n\t\t\tdate[5] = +date[5] || 0;\n\t\t\tdate[4] = +date[4] || 0;\n\t\t\tdate[3] = +date[3] || 0;\n\t\t\tdate[2] = +date[2] || 1;\n\t\t\tdate[1] = +date[1] || 1;\n\t\t}\n\t\tdate[0] = +date[0];\n\n\t\tif (date.length > 1) {\n\t\t\tif (!this.isValid(...date)) return showError(\"تاریخ نامعتبر\", this);\n\t\t\t--date[1]; // this is month; becuse the Date get month from 0, subtract one\n\t\t}\n\n\t\tdate = new Date(...date);\n\t\tif (date == \"Invalid Date\") return showError(\"تاریخ نامعتبر\", this);\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n\t * @returns {PersianDate} return class with persian date\n\t */\n\tPersianDate.prototype.calendar = function (calendar) {\n\t\tif (!calendar) return this.c;\n\t\tif (calendar[0] == \"j\" && this.c[0] == \"g\") {\n\t\t\tif (!this.error) setJalaliDate(gtj(this.toDate()), this);\n\t\t\tthis.c = \"jalali\";\n\t\t} else if (calendar[0] == \"g\" && this.c[0] == \"j\") {\n\t\t\tif (!this.error) setGregorianDate(this.toDate(), this);\n\t\t\tthis.c = \"gregorian\";\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * return number of weeks in year\n\t * @since 2.0.0\n\t * @param {Number|String} year - the year\n\t * @returns {Number} number of weeks in year\n\t */\n\tPersianDate.prototype.getWeeksInYear = function (year) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) year = this.year();\n\n\t\tlet dayOfYearFormat = this.c == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = this.clone().parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet lastOfYear = firstOfYear.clone().addYear().subDay();\n\t\tlet lastOfYearDay = lastOfYear.date(dayOfYearFormat);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\t\telse firstOfYear.subDay(firstOfYearDay);\n\n\t\tif (lastOfYearDay > 3) lastOfYear.addDay(7 - lastOfYearDay);\n\t\telse lastOfYear.subDay(lastOfYearDay);\n\t\treturn Math.ceil(lastOfYear.diff(firstOfYear, \"date\") / 7);\n\t};\n\n\t/**\n\t * return the Date instance of PersianDate\n\t * @since 2.0.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Date} if date valid, return Date instance of date\n\t * @throws {String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.toDate = function () {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") return jtg(...this.toArray());\n\t\tlet date = this.toArray();\n\t\t--date[1];\n\t\treturn new Date(...date);\n\t};\n\n\t/**\n\t * change the date to start of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.startOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 0;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 0;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 0;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 0;\n\t\tif (unit[0] == \"d\") return this;\n\t\tthis.d.date = 1;\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 1;\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\t/**\n\t * change the date to end of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.endOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 999;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 59;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 59;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 23;\n\t\tif (unit[0] == \"d\") return this;\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 12;\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\tPersianDate.prototype.valueOf = function () {\n\t\treturn this.timestamp();\n\t};\n\n\t/**\n\t * show warning for deprecated functions\n\t * @since 2.0.0\n\t * @param {String} msg - the message for warning\n\t */\n\tconst deprecate = (msg) => {\n\t\tconsole.warn(msg);\n\t};\n\n\t/**\n\t * check the input is timestamp\n\t * @since 2.0.0\n\t * @param {Number|String} timestamp - input that must be checked\n\t * @returns {Boolean} if input was timestamp, return true\n\t */\n\tconst isTimestamp = (timestamp) => {\n\t\treturn !isNaN(timestamp) && Math.floor(timestamp / 10000) > 0;\n\t};\n\n\t/**\n\t * set the date with Date instance\n\t * @since 2.0.0\n\t * @param {Date} date - the Date instance\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setGregorianDate = (date, instance) => {\n\t\tinstance.d = {\n\t\t\tyear: date.getFullYear(),\n\t\t\tmonth: date.getMonth() + 1,\n\t\t\tdate: date.getDate(),\n\t\t\thour: date.getHours(),\n\t\t\tminute: date.getMinutes(),\n\t\t\tsecond: date.getSeconds(),\n\t\t\tmillisecond: date.getMilliseconds(),\n\t\t};\n\t};\n\n\t/**\n\t * set the date with array of persian date\n\t * @since 2.0.0\n\t * @param {Array} date - the array of persian date\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setJalaliDate = (date, instance) => {\n\t\t[\n\t\t\tinstance.d.year,\n\t\t\tinstance.d.month,\n\t\t\tinstance.d.date,\n\t\t\tinstance.d.hour,\n\t\t\tinstance.d.minute,\n\t\t\tinstance.d.second,\n\t\t\tinstance.d.millisecond,\n\t\t] = date;\n\t};\n\n\t/**\n\t * compare the dates\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - the date\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'>'|'>='|'<'|'<='} operator - the operator for compare\n\t * @returns {‌Boolean} if date valid, return true of false\n\t * @throws {PersianDate} return the class\n\t */\n\tconst compareDate = (instance, operator, date) => {\n\t\tdate = typesToArray(instance.c, ...date);\n\n\t\tif (instance.isValid(...date))\n\t\t\treturn eval(\n\t\t\t\t\"instance.timestamp()\" +\n\t\t\t\toperator +\n\t\t\t\t\"instance.clone().parse(...date).timestamp()\"\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t/**\n\t * do the math operation on dates\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} values - the dates\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'min'|'max'} operation - the operation\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tconst mathOperation = (values, instance, operation) => {\n\t\tif (!values.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet args = Object.values(values).concat();\n\t\tlet argsNumber = args.map((date) => {\n\t\t\tdate = typesToArray(instance.c, date);\n\t\t\tif (instance.isValid(...date))\n\t\t\t\treturn instance\n\t\t\t\t\t.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp();\n\t\t\treturn false;\n\t\t});\n\t\tif (argsNumber.indexOf(false) != -1) return false;\n\t\treturn eval(\n\t\t\t\"args[argsNumber.indexOf(Math.\" + operation + \"(...argsNumber))]\"\n\t\t);\n\t};\n\n\tif (calendarVal) this.calendar(calendarVal);\n\tif (dateVal) {\n\t\tif (calendarVal && calendarVal[0] == \"j\") this.fromJalali(dateVal);\n\t\telse this.fromGregorian(dateVal);\n\t} else this.now();\n};\n\n//for next version\n//TODO: add quarter and week and day to startOf and endOf function\n//TODO: combine the add functions with sub functions\n//TODO: add time fuction just for change time\n//TODO: add the special character for get in all calendars\n//TODO: do better isSame - isBetween - clone --> if is possible\n//TODO: add doc for \"`\" and \"?\" character in toString function\n//TODO: refactor\n\nexport default PersianDate;\n\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n"],"sourceRoot":""}