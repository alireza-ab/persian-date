{"version":3,"sources":["webpack://PersianDate/webpack/universalModuleDefinition","webpack://PersianDate/./src/utils.js","webpack://PersianDate/webpack/bootstrap","webpack://PersianDate/webpack/runtime/define property getters","webpack://PersianDate/webpack/runtime/hasOwnProperty shorthand","webpack://PersianDate/./src/PersianDate.js"],"names":["root","factory","exports","module","define","amd","global","CALENDAR","jalali","months","1","2","3","4","5","6","7","8","9","10","11","12","days","label","0","weekNumber","ordinalNumbers","number","mode","numbers","13","14","15","16","17","18","19","20","30","40","50","60","70","80","90","100","200","300","ordinalNumber","remainder","Math","floor","gregorian","REGEX","format","isNumeric","separators","betweenBacktick","TIMETYPE","hour","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isLeapYear","year","calendar","includes","isDate","date","Date","isPersianDate","PersianDate","isValidDate","month","day","some","e","String","search","isValidTime","minute","second","millisecond","isValid","dateVal","calendarVal","this","c","gtj","jYear","jMonth","jDay","toString","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","newYear","parseInt","jtg","gYear","gMonth","gDay","daysOfMonths","v","getDayLabel","getDay","showError","getDayOfWeek","getDayOfYear","getDaysInMonth","getWeekOfYear","dayOfYearFormat","firstOfYear","parse","firstOfYearDay","clone","addDay","ceil","diff","weeksInYear","getWeeksInYear","addPrefix","text","length","prefix","repeat","errorText","instance","error","now","setJalaliDate","setGregorianDate","setDate","deprecate","fromGregorian","fromJalali","addYear","checkDate","subYear","abs","subDay","addMonth","subMonth","monthToStartNewYear","dayToStartNextMonth","addQuarter","quarter","subQuarter","addWeek","week","subWeek","addHour","subHour","hourToNextDay","subMillisecond","addMinute","subMinute","minuteToNextHour","addSecond","subSecond","secondToNextMinute","addMillisecond","millisecondToNextSecond","pastMonth","pastDays","pastHours","pastMinute","pastSeconds","pastMilliseconds","texts","replace","matched","push","matchedFormat","match","dateString","i","substring","indexOf","timestamp","substr","trim","toDate","slice","daysInMonth","gDate","dayOfWeek","dayOfYear","weekOfYear","value","getTime","assign","create","getPrototypeOf","JSON","stringify","isSame","typesToArray","toArray","map","split","y","years","M","h","hours","m","minutes","s","seconds","ms","milliseconds","isBefore","compareDate","isAfter","toObject","arguments","formats","isSameOrBefore","isSameOrAfter","isBetween","from","to","method","min","mathOperation","max","unit","addOne","result","values","diffForHumans","suffix","round","isTimestamp","lastOfYear","lastOfYearDay","startOf","endOf","valueOf","time","times","msg","console","warn","isNaN","operator","eval","operation","args","concat","argsNumber"],"mappings":"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","file":"PersianDate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PersianDate\"] = factory();\n\telse\n\t\troot[\"PersianDate\"] = factory();\n})(global, function() {\nreturn ","const CALENDAR = {\n    jalali: {\n        months: {\n            1: \"فروردین\",\n            2: \"اردیبهشت\",\n            3: \"خرداد\",\n            4: \"تیر\",\n            5: \"مرداد\",\n            6: \"شهریور\",\n            7: \"مهر\",\n            8: \"آبان\",\n            9: \"آذر\",\n            10: \"دی\",\n            11: \"بهمن\",\n            12: \"اسفند\",\n        },\n        days: {\n            label: {\n                6: \"شنبه\",\n                0: \"یکشنبه\",\n                1: \"دوشنبه\",\n                2: \"سه‌شنبه\",\n                3: \"چهارشنبه\",\n                4: \"پنجشنبه\",\n                5: \"جمعه\",\n            },\n            weekNumber: { // days in jalali calendar start from saturday or 6\n                6: 0,  //شنبه\n                0: 1,  //یکشنبه\n                1: 2,  //دوشنبه\n                2: 3,  //سه‌شنبه\n                3: 4,  //چهارشنبه\n                4: 5,  //پنجشنبه\n                5: 6,  //جمعه\n            },\n        },\n        ordinalNumbers: function (number, mode) {\n            const numbers = {\n                1: 'یک',\n                2: 'دو',\n                3: 'سو',\n                4: 'چهار',\n                5: 'پنج',\n                6: 'شش',\n                7: 'هفت',\n                8: 'هشت',\n                9: 'نه',\n                10: 'ده',\n                11: 'یازده',\n                12: 'دوازده',\n                13: 'سیزده',\n                14: 'چهارده',\n                15: 'پانزده',\n                16: 'شانزده',\n                17: 'هفده',\n                18: 'هجده',\n                19: 'نوزده',\n                20: 'بیست',\n                30: 'سی‌',\n                40: 'چهل',\n                50: 'پنجاه',\n                60: 'شصت',\n                70: 'هفتاد',\n                80: 'هشتاد',\n                90: 'نود',\n                100: 'صد',\n                200: 'دویست',\n                300: 'سیصد',\n            }\n            let ordinalNumber = '';\n            if (number == 1)\n                ordinalNumber = 'اول';\n            else if (numbers[number])\n                ordinalNumber = numbers[number] + (number == 30 ? 'ام' : 'م')\n            else {\n                let remainder = number % 10;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + 'م';\n                remainder = (number - remainder) % 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : (remainder == 30 ? 'ام ' : 'م'));\n                remainder = Math.floor(number / 100) * 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : 'م');\n            }\n            if (mode == 2)\n                ordinalNumber += 'ین';\n            return ordinalNumber;\n        },\n    },\n    gregorian: {\n        months: {\n            1: \"January\",\n            2: \"February\",\n            3: \"March\",\n            4: \"April\",\n            5: \"May\",\n            6: \"June\",\n            7: \"July\",\n            8: \"August\",\n            9: \"September\",\n            10: \"October\",\n            11: \"November\",\n            12: \"December\",\n        },\n        days: {\n            label: {\n                0: \"Sunday\",\n                1: \"Monday\",\n                2: \"Tuesday\",\n                3: \"Wednesday\",\n                4: \"Thursday\",\n                5: \"Friday\",\n                6: \"Saturday\",\n            },\n            weekNumber: { // days in gregorian calendar start from sunday or 0\n                0: 0, // Sunday\n                1: 1, // Monday\n                2: 2, // Tuesday\n                3: 3, // Wednesday\n                4: 4, // Thursday\n                5: 5, // Friday\n                6: 6, // Saturday\n            },\n        },\n        ordinalNumbers: function (number) {\n            if (number == 1 || number % 10 == 1 && number != 11)\n                return number + 'st';\n            else if (number == 2 || number % 10 == 2 && number != 12)\n                return number + 'nd';\n            else if (number == 3 || number % 10 == 3 && number != 13)\n                return number + 'rd';\n            else\n                return number + 'th';\n        },\n    }\n}\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n    betweenBacktick: /`(.*?)`/g, // find the texts between the backticks ==> `Alireza`\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour >= 12 && hour < 24) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\nexport { CALENDAR, TIMETYPE, REGEX };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\nimport { CALENDAR, TIMETYPE, REGEX } from \"./utils.js\";\n\nconst isLeapYear = function (year, calendar) {\n\tif (calendar[0] === \"j\") {\n\t\tlet array =\n\t\t\tyear > 1342\n\t\t\t\t? [1, 5, 9, 13, 17, 22, 26, 30]\n\t\t\t\t: [1, 5, 9, 13, 17, 21, 26, 30];\n\t\tlet remainder = year % 33;\n\t\treturn array.includes(remainder);\n\t} else {\n\t\treturn (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n\t}\n};\n\nconst isDate = function (date) {\n\treturn date instanceof Date;\n};\n\nconst isPersianDate = function (date) {\n\treturn date instanceof PersianDate;\n};\n\nconst isValidDate = function (calendar, year, month, day) {\n\tif ([year, month, day].some((e) => String(e).search(/null|NaN/) != -1))\n\t\treturn false;\n\tif (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n\t\treturn false;\n\tif (calendar[0] == \"j\") {\n\t\tif (month >= 7 && month <= 11 && day == 31) return false;\n\t\tif (month == 12 && day == 31) return false;\n\t\tif (month == 12 && day == 30 && !isLeapYear(year, calendar)) return false;\n\t} else {\n\t\tif ([2, 4, 6, 9, 11].includes(month) && day == 31) return false;\n\t\tif (month == 2 && (day == 30 || (day == 29 && !isLeapYear(year, calendar))))\n\t\t\treturn false;\n\t}\n\treturn true;\n};\n\nconst isValidTime = function (\n\thour,\n\tminute,\n\tsecond,\n\tmillisecond\n) {\n\tif (\n\t\t[hour, minute, second, millisecond].some(\n\t\t\t(e) => String(e).search(/null|NaN/) != -1\n\t\t)\n\t)\n\t\treturn false;\n\tif (hour < 0 || hour > 23) return false;\n\tif (minute < 0 || minute > 59) return false;\n\tif (second < 0 || second > 59) return false;\n\tif (millisecond < 0 || millisecond > 999) return false;\n\treturn true;\n};\n\nconst isValid = function (\n\tcalendar,\n\tyear,\n\tmonth,\n\tday,\n\thour,\n\tminute,\n\tsecond,\n\tmillisecond\n) {\n\treturn (\n\t\tisValidDate(calendar, year, month, day) &&\n\t\tisValidTime(hour, minute, second, millisecond)\n\t);\n};\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {Date|Array|Null|Object|String} date - the date that convert to persian date\n * @param {String} [calendar='jalali'] - the calendar\n */\nconst PersianDate = function (dateVal, calendarVal) {\n\t\"use strict\";\n\n\t/**\n\t * keeps the date and time\n\t * @type {Object}\n\t * @property {Number} year - the year of date\n\t * @property {Number} month - the month of date\n\t * @property {Number} date - the day of month of date\n\t * @property {Number} hour - the hour of time\n\t * @property {Number} minute - the minute of time\n\t * @property {Number} second - the second of time\n\t * @property {Number} millisecond - the millisecond of time\n\t * @property {Number} gregorian - the gregorian date\n\t */\n\tthis.d = {};\n\n\t/**\n\t * the calendar type\n\t * @type {String}\n\t * @default \"jalali\"\n\t * @example jalali | gregorian\n\t */\n\tthis.c = \"jalali\";\n\n\t/**\n\t * Gregorian to Jalali\n\t * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n\t * @param {Null|Number|String} [month=1] - Gregorian month\n\t * @param {Null|Number|String} [day=1] - Gregorian day\n\t * @param {Null|Number|String} [hour=0] - Gregorian hour\n\t * @param {Null|Number|String} [minute=0] - Gregorian minute\n\t * @param {Null|Number|String} [second=0] - Gregorian second\n\t * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n\t * @returns {Array} Jalali date\n\t */\n\tconst gtj = (year, month, day, hour, minute, second, millisecond) => {\n\t\tlet date;\n\t\tif (!year) date = new Date();\n\t\telse if (Object.prototype.toString.call(year) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\tdate = year;\n\t\telse\n\t\t\tdate = new Date(\n\t\t\t\tREGEX[\"isNumeric\"].test(year) ? year : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(month) ? month : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(day) ? day : 1,\n\t\t\t\tREGEX[\"isNumeric\"].test(hour) ? hour : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(minute) ? minute : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(second) ? second : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(millisecond) ? millisecond : 0\n\t\t\t);\n\t\tday = date.getDate();\n\t\tmonth = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n\t\tyear = date.getFullYear();\n\t\thour = date.getHours();\n\t\tminute = date.getMinutes();\n\t\tsecond = date.getSeconds();\n\t\tmillisecond = date.getMilliseconds();\n\t\tlet jYear, jMonth, jDay;\n\t\tlet pastDaysInMonth = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t59,\n\t\t\t90,\n\t\t\t120,\n\t\t\t151,\n\t\t\t181,\n\t\t\t212,\n\t\t\t243,\n\t\t\t273,\n\t\t\t304,\n\t\t\t334,\n\t\t]; //Past days from the start of the year in each month\n\t\tif (year > 1600) {\n\t\t\tjYear = 979;\n\t\t\tyear -= 1600;\n\t\t} else {\n\t\t\tjYear = 0;\n\t\t\tyear -= 621;\n\t\t}\n\t\tlet newYear = month > 2 ? year + 1 : year;\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt((newYear + 3) / 4) -\n\t\t\tparseInt((newYear + 99) / 100) +\n\t\t\tparseInt((newYear + 399) / 400) -\n\t\t\t80 +\n\t\t\tday +\n\t\t\tpastDaysInMonth[month - 1];\n\t\tjYear += 33 * parseInt(days / 12053);\n\t\tdays %= 12053;\n\t\tjYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tjYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tjMonth =\n\t\t\tdays < 186 ? 1 + parseInt(days / 31) : 7 + parseInt((days - 186) / 30);\n\t\tjDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n\t\treturn [jYear, jMonth, jDay, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * Jalali to Gregorian\n\t * @param {Null|Number|String} year - Jalali year\n\t * @param {Null|Number|String} [month=1] -  Jalali month\n\t * @param {Null|Number|String} [day=1] -  Jalali day\n\t * @param {Null|Number|String} [hour=0] -  Jalali hour\n\t * @param {Null|Number|String} [minute=0] -  Jalali minute\n\t * @param {Null|Number|String} [second=0] -  Jalali second\n\t * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n\t * @returns {Date} Gregorian date\n\t */\n\tconst jtg = (year, month, day, hour, minute, second, millisecond) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tyear = REGEX[\"isNumeric\"].test(year) ? +year : 1;\n\t\tmonth = REGEX[\"isNumeric\"].test(month) ? +month : 1;\n\t\tday = REGEX[\"isNumeric\"].test(day) ? +day : 1;\n\t\thour = REGEX[\"isNumeric\"].test(hour) ? +hour : 0;\n\t\tminute = REGEX[\"isNumeric\"].test(minute) ? +minute : 0;\n\t\tsecond = REGEX[\"isNumeric\"].test(second) ? +second : 0;\n\t\tmillisecond = REGEX[\"isNumeric\"].test(millisecond) ? +millisecond : 0;\n\t\tlet gYear, gMonth, gDay;\n\t\tif (year > 979) {\n\t\t\tgYear = 1600;\n\t\t\tyear -= 979;\n\t\t} else {\n\t\t\tgYear = 621;\n\t\t}\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt(year / 33) * 8 +\n\t\t\tparseInt(((year % 33) + 3) / 4) +\n\t\t\t78 +\n\t\t\tday +\n\t\t\t(month < 7 ? (month - 1) * 31 : (month - 7) * 30 + 186);\n\t\tgYear += 400 * parseInt(days / 146097);\n\t\tdays %= 146097;\n\t\tif (days > 36524) {\n\t\t\tgYear += 100 * parseInt(--days / 36524);\n\t\t\tdays %= 36524;\n\t\t\tif (days >= 365) days++;\n\t\t}\n\t\tgYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tgYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tgDay = days + 1;\n\t\tlet daysOfMonths = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t(gYear % 4 == 0 && gYear % 100 != 0) || gYear % 400 == 0 ? 29 : 28,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t];\n\t\tfor (gMonth = 0; gMonth < 13; gMonth++) {\n\t\t\tlet v = daysOfMonths[gMonth];\n\t\t\tif (gDay <= v) break;\n\t\t\tgDay -= v;\n\t\t}\n\n\t\treturn new Date(gYear, gMonth - 1, gDay, hour, minute, second, millisecond);\n\t};\n\n\t/**\n\t * get label of day\n\t * @param {Date} date - the date that received day\n\t * @param {'jalali'|'gregorian'} calendar - the calendar\n\t * @returns {String} returns day label\n\t * @example Saturday | شنبه\n\t */\n\tconst getDayLabel = (date = new Date(), calendar = \"jalali\") => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\treturn CALENDAR[calendar][\"days\"][\"label\"][date.getDay()];\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the week\n\t * @param {Date} date - the date that received day of week\n\t * @param {'jalali', 'gregorian'} calendar - the calendar\n\t * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n\t * @returns {Number|String} the number of the day of week\n\t */\n\tconst getDayOfWeek = (\n\t\tdate = new Date(),\n\t\tcalendar = \"jalali\",\n\t\tmode = \"standard\"\n\t) => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\") {\n\t\t\t// if the year was an instance of Date\n\t\t\treturn (\n\t\t\t\tCALENDAR[calendar][\"days\"][\"weekNumber\"][date.getDay()] +\n\t\t\t\t(mode != \"standard\" ? 0 : 1)\n\t\t\t);\n\t\t}\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the year\n\t * @param {Null|String|Number} year - the year of date\n\t * @param {Null|Number|String} month - the month of date that gives the day of the year\n\t * @param {Null|Number|String} day - the day of date that gives the day of the year\n\t * @param {Null|Number|String} calendar - the calendar\n\t * @returns {Number} the day of the year\n\t */\n\tconst getDayOfYear = (year, month, day, calendar) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tmonth = +month;\n\t\tday = +day;\n\t\twhile (--month != 0) {\n\t\t\tday += new PersianDate([year, month], calendar).getDaysInMonth();\n\t\t}\n\t\treturn day;\n\t};\n\n\t/**\n\t * get the week of the year\n\t * @param {Null|Number|String} year - the year of date that gives the week of the year\n\t * @param {Null|Number|String} month - the month of date that gives the week of the year\n\t * @param {Null|Number|String} day - the day of date that gives the week of the year\n\t * @param {String} calendar - the calendar\n\t * @returns {Number} the week of the year\n\t */\n\tconst getWeekOfYear = (year, month, day, calendar) => {\n\t\tlet dayOfYearFormat = calendar == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = new PersianDate().calendar(calendar).parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet date = firstOfYear.clone().parse(year, month, day);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\n\t\tlet weekNumber = Math.ceil(date.diff(firstOfYear, \"date\", true) / 7);\n\n\t\tlet weeksInYear = date.clone().getWeeksInYear();\n\t\treturn weekNumber > weeksInYear ? weeksInYear : weekNumber;\n\t};\n\n\t/**\n\t * returns the ordinal number of that number sent to it\n\t * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n\t * @param {'jalali','gregorian'} calendar - the calendar\n\t * @param {?Number} mode  - 'jalali' calendar have two mode of ordinal number\n\t * @returns {String} ordinal number\n\t * @example 1st | اول | اولین\n\t */\n\tconst ordinalNumber = (number, calendar = \"jalali\", mode = 1) => {\n\t\treturn CALENDAR[calendar].ordinalNumbers(number, mode);\n\t};\n\n\t/**\n\t * add a prefix to the text in the number of characters that the text has less\n\t * @param {String|Number} text a text need prefix\n\t * @param {Number} length length of text\n\t * @param {String} [prefix=0] - string for add before of text\n\t * @returns {String} text with or wihtout prefix\n\t */\n\tconst addPrefix = (text, length, prefix = \"0\") => {\n\t\treturn prefix.repeat(length - String(text).length) + text;\n\t};\n\n\t/**\n\t * make error and delete this.d\n\t * @param {String} errorText - Error Text\n\t * @param {PersianDate} instance - the PersianDate instance\n\t * @returns {PersianDate} make error and return class\n\t */\n\tconst showError = (errorText, instance) => {\n\t\tdelete instance.d;\n\t\tinstance.error = errorText;\n\t\treturn errorText;\n\t};\n\n\t/**\n\t * make current date in persian calendar\n\t * @returns {PersianDate} make current date and return class\n\t */\n\tPersianDate.prototype.now = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\tlet date = new Date();\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * set persian date from Gregorian date\n\t * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.setDate = function (...date) {\n\t\tdeprecate(\n\t\t\t'\"setDate\" function is deprecated! use \"fromGregorian\" function instead.\\n' +\n\t\t\t\"https://alireza-ab.ir/persian-date/create-and-parse#from-gregorian-date\"\n\t\t);\n\t\treturn this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * convert a jalali or gregorian date to PersianDate instance\n\t * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.parse = function (...date) {\n\t\tif (this.c == \"jalali\") return this.fromJalali(...date);\n\t\telse return this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * receives year and determined that is leap year or not\n\t * @param {?Number} year - the year to be determined is a leap or not\n\t * @returns {Boolean} if is leap year, returns true\n\t */\n\tPersianDate.prototype.isLeapYear = function (year) {\n\t\tif (this.error) return false;\n\t\tif (!year) year = this.year();\n\t\treturn isLeapYear(year, this.c)\n\t};\n\n\t/**\n\t * checks the persian date and time\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid, returns true\n\t */\n\tPersianDate.prototype.isValid = function (\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\treturn (\n\t\t\tthis.isValidDate(year, month, day) &&\n\t\t\tthis.isValidTime(hour, minute, second, millisecond)\n\t\t);\n\t};\n\n\t/**\n\t * checks the persian date\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @returns {Boolean} if is valid date, returns true\n\t */\n\tPersianDate.prototype.isValidDate = function (year, month, day) {\n\t\tif (this.error) return false;\n\t\tif (!year) {\n\t\t\tyear = this.d.year;\n\t\t\tmonth = this.d.month;\n\t\t\tday = this.d.date;\n\t\t}\n\t\treturn isValidDate(this.c, year, month, day)\n\t};\n\n\t/**\n\t * checks the time\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid time, returns true\n\t */\n\tPersianDate.prototype.isValidTime = function (\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\tif (hour == undefined) {\n\t\t\thour = this.d.hour;\n\t\t\tminute = this.d.minute;\n\t\t\tsecond = this.d.second;\n\t\t\tmillisecond = this.d.millisecond;\n\t\t}\n\t\treturn isValidTime(hour, minute, second, millisecond)\n\t};\n\n\t/**\n\t * returns number of days in month\n\t * @param {?Number} year - year of date that returns number of days in month\n\t * @param {?Number} month - month of date that returns number of days in month\n\t * @returns {Number} number of days in month\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.getDaysInMonth = function (\n\t\tyear = this.d.year,\n\t\tmonth = this.d.month\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 1 && month <= 6) return 31;\n\t\t\tif ((month > 6 && month <= 11) || this.isLeapYear(year)) {\n\t\t\t\treturn 30;\n\t\t\t}\n\t\t\treturn 29;\n\t\t} else {\n\t\t\tif ([1, 3, 5, 7, 8, 10, 12].includes(month)) return 31;\n\t\t\tif (month == 2) {\n\t\t\t\tif (this.isLeapYear(year)) return 29;\n\t\t\t\treturn 28;\n\t\t\t}\n\t\t\treturn 30;\n\t\t}\n\t};\n\n\t/**\n\t * add to year\n\t * @param {?Number|String} [year=1] - a number for add with year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\tif (year < 0)\n\t\t\t// if the number was negative, send to subYear method\n\t\t\treturn this.subYear(Math.abs(year));\n\t\tthis.d.year += +year; //plus sign before a variable, convert variable to int\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to month\n\t * @param {?Number|String} [month=1] - a number for add with month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tif (month < 0)\n\t\t\t// if the number was negative, send to subMonth method\n\t\t\treturn this.subMonth(Math.abs(month));\n\t\tmonth = +month; // plus sign before a variable, convert variable to int\n\n\t\tlet monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n\t\tif (monthToStartNewYear > month) {\n\t\t\tthis.d.month += month;\n\t\t} else {\n\t\t\tthis.addYear(1, false);\n\t\t\tthis.d.month = 1;\n\t\t\tmonth -= monthToStartNewYear;\n\t\t\twhile (month >= 12) {\n\t\t\t\tmonth -= 12;\n\t\t\t\tthis.addYear(1, false);\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month += month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to day\n\t * @param {?Number|String} [day=1] - a number for add with day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tif (day < 0)\n\t\t\t// if the number was negative, send to subDay method\n\t\t\treturn this.subDay(Math.abs(day));\n\t\tday = +day; //plus sign before a variable, convert variable to int\n\n\t\tlet dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n\t\tif (dayToStartNextMonth > day) {\n\t\t\tthis.d.date += day;\n\t\t} else {\n\t\t\tthis.addMonth(1, false);\n\t\t\tthis.d.date = 1;\n\t\t\tday -= dayToStartNextMonth;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.addMonth(1, false);\n\t\t\t}\n\t\t\tif (day != 0) {\n\t\t\t\tthis.d.date += day;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to quarter\n\t * @param {?Number|String} [quarter=1] - a number for add with quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tif (quarter < 0)\n\t\t\t// if the number was negative, send to subQuarter method\n\t\t\treturn this.subQuarter(Math.abs(quarter));\n\t\tquarter = +quarter; //plus sign before a variable, convert variable to int\n\t\treturn this.addMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * add to week\n\t * @param {?Number|String} [week=1] - a number for add with week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tif (week < 0)\n\t\t\t// if the number was negative, send to subWeek method\n\t\t\treturn this.subWeek(Math.abs(week));\n\t\tweek = +week; //plus sign before a variable, convert variable to int\n\t\treturn this.addDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * add to hour\n\t * @param {?Number|String} [hour=1] - a number for add with hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\tif (hour < 0)\n\t\t\t// if the number was negative, send to subHour method\n\t\t\treturn this.subHour(Math.abs(hour));\n\t\thour = +hour; //plus sign before a variable, convert variable to int\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.addDay(1, false);\n\t\t}\n\t\tlet hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n\t\tif (hour >= hourToNextDay) {\n\t\t\tthis.addDay(1, false);\n\t\t\thour -= hourToNextDay;\n\t\t\tthis.d.hour = hour;\n\t\t} else this.d.hour += hour;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to minute\n\t * @param {?Number|String} [minute=1] - a number for add with minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tif (minute < 0)\n\t\t\t// if the number was negative, send to subMinute method\n\t\t\treturn this.subMinute(Math.abs(minute));\n\t\tminute = +minute; //plus sign before a variable, convert variable to int\n\t\twhile (minute >= 60) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= 60;\n\t\t}\n\t\tlet minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n\t\tif (minute >= minuteToNextHour) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= minuteToNextHour;\n\t\t\tthis.d.minute = minute;\n\t\t} else this.d.minute += minute;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to second\n\t * @param {?Number|String} [second=1] - a number for add with second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tif (second < 0)\n\t\t\t// if the number was negative, send to subSecond method\n\t\t\treturn this.subSecond(Math.abs(second));\n\t\tsecond = +second; //plus sign before a variable, convert variable to int\n\t\twhile (second >= 60) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= 60;\n\t\t}\n\t\tlet secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n\t\tif (second >= secondToNextMinute) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= secondToNextMinute;\n\t\t\tthis.d.second = second;\n\t\t} else this.d.second += second;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tif (millisecond < 0)\n\t\t\t// if the number was negative, send to subMillisecond method\n\t\t\treturn this.subMillisecond(Math.abs(millisecond));\n\t\tmillisecond = +millisecond; //plus sign before a variable, convert variable to int\n\t\twhile (millisecond >= 1000) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= 1000;\n\t\t}\n\t\tlet millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n\t\tif (millisecond >= millisecondToNextSecond) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= millisecondToNextSecond;\n\t\t\tthis.d.millisecond = millisecond;\n\t\t} else this.d.millisecond += millisecond;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from year\n\t * @param {?Number|String} [year=1] - a number for subtract from year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\tthis.d.year -= Math.abs(year);\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from month\n\t * @param {?Number|String} [month=1] - a number for subtract from month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tmonth = Math.abs(month); //plus sign before a variable, convert variable to int\n\t\tlet pastMonth = this.d.month; //pastMonth -> Number of month that is past\n\t\tif (pastMonth > month) {\n\t\t\tthis.d.month -= month;\n\t\t} else {\n\t\t\tthis.subYear(1, false);\n\t\t\tthis.d.month = 12;\n\t\t\tmonth -= pastMonth;\n\t\t\twhile (month >= 12) {\n\t\t\t\tthis.subYear(1, false);\n\t\t\t\tmonth -= 12;\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month -= month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from day\n\t * @param {?Number|String} [day=1] - a number for subtract from day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tday = Math.abs(day);\n\t\tlet pastDays = this.d.date; // pastDays -> Number of days that is past\n\t\tif (pastDays > day) {\n\t\t\tthis.d.date -= day;\n\t\t} else {\n\t\t\tthis.subMonth(1, false);\n\t\t\tthis.d.date = this.getDaysInMonth();\n\t\t\tday -= pastDays;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.subMonth(1, false);\n\t\t\t}\n\t\t\tthis.d.date = this.getDaysInMonth() - day;\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from quarter\n\t * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tquarter = Math.abs(quarter);\n\t\treturn this.subMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * subtract from week\n\t * @param {?Number|String} [week=1] - a number for subtract from week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tweek = Math.abs(week);\n\t\treturn this.subDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * subtract from hour\n\t * @param {?Number|String} [hour=1] - a number for subtract from hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\thour = Math.abs(hour);\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\tlet pastHours = this.d.hour; // pastHours -> Number of hours that is past\n\t\tif (hour > pastHours) {\n\t\t\tthis.subDay(1, false);\n\t\t\thour -= pastHours;\n\t\t\tthis.d.hour = 24 - hour;\n\t\t} else this.d.hour -= hour;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from minute\n\t * @param {?Number|String} [minute=1] - a number for subtract from minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tminute = Math.abs(minute);\n\t\twhile (minute >= 60) {\n\t\t\tminute -= 60;\n\t\t\tthis.subHour(1, false);\n\t\t}\n\t\tlet pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n\t\tif (minute > pastMinute) {\n\t\t\tthis.subHour(1, false);\n\t\t\tminute -= pastMinute;\n\t\t\tthis.d.minute = 60 - minute;\n\t\t} else this.d.minute -= minute;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from second\n\t * @param {?Number|String} [second=1] - a number for subtract from second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tsecond = Math.abs(second);\n\t\twhile (second >= 60) {\n\t\t\tsecond -= 60;\n\t\t\tthis.subMinute(1, false);\n\t\t}\n\t\tlet pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n\t\tif (second > pastSeconds) {\n\t\t\tthis.subMinute(1, false);\n\t\t\tsecond -= pastSeconds;\n\t\t\tthis.d.second = 60 - second;\n\t\t} else this.d.second -= second;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tmillisecond = Math.abs(millisecond);\n\t\twhile (millisecond >= 1000) {\n\t\t\tmillisecond -= 1000;\n\t\t\tthis.subSecond(1, false);\n\t\t}\n\t\tlet pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n\t\tif (millisecond > pastMilliseconds) {\n\t\t\tthis.subSecond(1, false);\n\t\t\tmillisecond -= pastMilliseconds;\n\t\t\tthis.d.millisecond = 1000 - millisecond;\n\t\t} else this.d.millisecond -= millisecond;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * returns date as string with specify format\n\t * @param {?String} [format=date] - formatting date to string\n\t * @returns {String} date string\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toString = function (format = \"date\") {\n\t\tif (this.error) return this.error;\n\t\tlet texts = [];\n\t\tformat = format.replace(REGEX[\"betweenBacktick\"], (matched, text) => {\n\t\t\ttexts.push(text);\n\t\t\treturn \"###\";\n\t\t});\n\t\tformat = format.replace(/\\?/g, this.c == \"jalali\" ? \"j\" : \"\");\n\t\tif (this.c == \"jalali\")\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"jYYYY/jMM/jDD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"jYYYY/jMM/jDD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\telse\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"YYYY-MM-DD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"YYYY-MM-DD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\tlet matchedFormat = format.match(REGEX[\"format\"]);\n\t\tlet dateString = \"\";\n\t\tfor (const i of matchedFormat) {\n\t\t\tdateString += format.substring(0, format.indexOf(i));\n\t\t\tif (i.search(/Y|y/) != -1) dateString += this.year(i);\n\t\t\telse if (i.search(/M/) != -1) dateString += this.month(i);\n\t\t\telse if (i.search(/Q/) != -1) dateString += this.quarter(i);\n\t\t\telse if (i.search(/D|d/) != -1) dateString += this.date(i);\n\t\t\telse if (i.search(/W|w/) != -1) dateString += this.week(i);\n\t\t\telse if (i.search(/H|h|k/) != -1) dateString += this.hour(i);\n\t\t\telse if (i.search(/m/) != -1) dateString += this.minute(i);\n\t\t\telse if (i.search(/s/) != -1) dateString += this.second(i);\n\t\t\telse if (i.search(/c|C/) != -1) dateString += this.millisecond(i);\n\t\t\telse if (i.search(/t/) != -1) dateString += this.timestamp();\n\t\t\telse if (i.search(/a|A/) != -1) dateString += TIMETYPE(this.d.hour, i);\n\n\t\t\tformat = format.substr(format.indexOf(i) + i.length);\n\t\t}\n\t\tdateString += format;\n\t\tfor (let i = 0; i < texts.length; i++)\n\t\t\tdateString = dateString.replace(\"###\", texts[i]);\n\t\treturn String(dateString);\n\t};\n\n\t/**\n\t * get or set year\n\t * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the year, returns class,\n\t * else returns a number or string from year\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.year = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tthis.d.year = +format;\n\t\t\tif (!this.isValidDate()) {\n\t\t\t\treturn this.addYear(format);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jYYYY\" : \"YYYY\";\n\t\t\tlet year = this.c == \"jalali\" ? this.d.year : gtj(this.toDate())[0];\n\t\t\tif (format == \"jYYYY\" || format == \"jy\") return year;\n\t\t\tif (format == \"jYY\") return String(year).slice(-2);\n\t\t\tlet gYear =\n\t\t\t\tthis.c == \"jalali\" ? this.toDate().getFullYear() : this.d.year;\n\t\t\tif (format == \"YYYY\" || format == \"y\") return gYear;\n\t\t\tif (format == \"YY\") return String(gYear).slice(-2);\n\t\t\treturn year;\n\t\t}\n\t};\n\n\t/**\n\t * get or set month\n\t * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the month, returns class,\n\t * else returns a number or string from month\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.month = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subMonth(format - 1);\n\t\t\t} else if (format > 12) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addMonth(format - 12);\n\t\t\t}\n\t\t\tthis.d.month = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jM\" : \"M\";\n\t\t\tlet month = this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1];\n\t\t\tif (format == \"jMM\") return addPrefix(month, 2);\n\t\t\tif (format == \"jM\") return month;\n\t\t\tif (format == \"jMMMM\" || format == \"jMMM\")\n\t\t\t\treturn CALENDAR[\"jalali\"][\"months\"][month];\n\t\t\tif (format == \"jMo\") return ordinalNumber(month);\n\t\t\tif (format == \"jMO\") return ordinalNumber(month, \"jalali\", 2);\n\t\t\tlet gMonth =\n\t\t\t\tthis.c == \"jalali\" ? this.toDate().getMonth() + 1 : this.d.month;\n\t\t\tif (format == \"M\") return gMonth;\n\t\t\tif (format == \"MM\") return addPrefix(gMonth, 2);\n\t\t\tif (format == \"MMMM\") return CALENDAR[\"gregorian\"][\"months\"][gMonth];\n\t\t\tif (format == \"Mo\" || format == \"MO\")\n\t\t\t\treturn ordinalNumber(gMonth, \"gregorian\");\n\t\t\tif (format == \"MMM\")\n\t\t\t\treturn CALENDAR[\"gregorian\"][\"months\"][gMonth].slice(0, 3);\n\t\t\treturn month;\n\t\t}\n\t};\n\n\t/**\n\t * get or set day in month\n\t * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the day, returns class,\n\t * else returns a number or string from day\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.date = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet daysInMonth = this.getDaysInMonth();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.date = 1;\n\t\t\t\treturn this.subDay(format - 1);\n\t\t\t} else if (format > daysInMonth) {\n\t\t\t\tthis.d.date = daysInMonth;\n\t\t\t\treturn this.addDay(format - daysInMonth);\n\t\t\t}\n\t\t\tthis.d.date = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jD\" : \"D\";\n\t\t\tlet date = this.c == \"jalali\" ? this.d.date : gtj(this.toDate())[2];\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"jDD\") return addPrefix(date, 2);\n\t\t\tif (format == \"jD\") return date;\n\t\t\tif (format == \"jDo\") return ordinalNumber(date);\n\t\t\tif (format == \"jDO\") return ordinalNumber(date, \"jalali\", 2);\n\t\t\t//---------- Day of Week ----------//\n\t\t\tlet gDate = this.toDate();\n\t\t\tif (format == \"jdddd\" || format == \"jddd\") return getDayLabel(gDate);\n\t\t\tif (format == \"jdd\") return getDayLabel(gDate).slice(0, 1);\n\t\t\tlet dayOfWeek = getDayOfWeek(gDate);\n\t\t\tif (format == \"jdo\") return ordinalNumber(dayOfWeek);\n\t\t\tif (format == \"jdO\") return ordinalNumber(dayOfWeek, \"jalali\", 2);\n\t\t\tif (format == \"jd\") return getDayOfWeek(gDate, \"jalali\", \"array\");\n\t\t\tif (format == \"jde\") return dayOfWeek;\n\t\t\t//---------- Day of Year ----------//\n\t\t\tlet dayOfYear = getDayOfYear(\n\t\t\t\tthis.year(\"jy\"),\n\t\t\t\tthis.month(\"jM\"),\n\t\t\t\tdate,\n\t\t\t\t\"j\"\n\t\t\t);\n\t\t\tif (format == \"jDDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"jDDD\") return dayOfYear;\n\t\t\tif (format == \"jDDDo\") return ordinalNumber(dayOfYear);\n\t\t\tif (format == \"jDDDO\") return ordinalNumber(dayOfYear, \"jalali\", 2);\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"DD\") return addPrefix(gDate.getDate(), 2);\n\t\t\tif (format == \"D\") return gDate.getDate();\n\t\t\tif (format == \"Do\" || format == \"DO\")\n\t\t\t\treturn ordinalNumber(gDate.getDate(), \"gregorian\");\n\t\t\t//---------- Day of Week ----------//\n\t\t\tif (format == \"dddd\") return getDayLabel(gDate, \"gregorian\");\n\t\t\tif (format == \"ddd\") return getDayLabel(gDate, \"gregorian\").slice(0, 3);\n\t\t\tif (format == \"dd\") return getDayLabel(gDate, \"gregorian\").slice(0, 2);\n\t\t\tdayOfWeek = getDayOfWeek(gDate, \"gregorian\");\n\t\t\tif (format == \"do\" || format == \"dO\")\n\t\t\t\treturn ordinalNumber(dayOfWeek, \"gregorian\");\n\t\t\tif (format == \"d\") return getDayOfWeek(gDate, \"gregorian\", \"array\");\n\t\t\tif (format == \"de\") return dayOfWeek;\n\t\t\tdayOfYear = getDayOfYear(\n\t\t\t\tgDate.getFullYear(),\n\t\t\t\tgDate.getMonth() + 1,\n\t\t\t\tgDate.getDate(),\n\t\t\t\t\"g\"\n\t\t\t);\n\t\t\t//---------- Day of Year ----------//\n\t\t\tif (format == \"DDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"DDD\") return dayOfYear;\n\t\t\tif (format == \"DDDo\" || format == \"DDDO\")\n\t\t\t\treturn ordinalNumber(dayOfYear, \"gregorian\");\n\t\t\treturn date;\n\t\t}\n\t};\n\n\t/**\n\t * get or set quarter\n\t * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the quarter, returns class,\n\t * else returns a number or string from quarter\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.quarter = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subQuarter(format - 1);\n\t\t\t} else if (format > 4) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addQuarter(format - 4);\n\t\t\t}\n\t\t\tthis.d.month = +format * 3 - 2;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jQ\" : \"Q\";\n\t\t\tlet quarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1]) / 3\n\t\t\t);\n\t\t\tif (format == \"jQ\") return quarter;\n\t\t\tif (format == \"jQo\") return ordinalNumber(quarter);\n\t\t\tif (format == \"jQO\") return ordinalNumber(quarter, \"jalali\", 2);\n\t\t\tquarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\" ? this.toDate().getMonth() + 1 : this.d.month) / 3\n\t\t\t);\n\t\t\tif (format == \"Q\") return quarter;\n\t\t\tif (format == \"Qo\" || format == \"QO\")\n\t\t\t\treturn ordinalNumber(quarter, \"gregorian\");\n\t\t\treturn quarter;\n\t\t}\n\t};\n\n\t/**\n\t * get or set week\n\t * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the week, returns class,\n\t * else returns a number or string from week\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.week = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet weeksInYear = this.getWeeksInYear();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.week(1);\n\t\t\t\treturn this.subWeek(format - 1);\n\t\t\t} else if (format > weeksInYear) {\n\t\t\t\tthis.week(weeksInYear);\n\t\t\t\treturn this.addWeek(format - weeksInYear);\n\t\t\t}\n\t\t\tlet weekOfYear = getWeekOfYear(\n\t\t\t\tthis.d.year,\n\t\t\t\tthis.d.month,\n\t\t\t\tthis.d.date,\n\t\t\t\tthis.c\n\t\t\t);\n\t\t\tthis.addWeek(+format - weekOfYear);\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jw\" : \"w\";\n\t\t\tlet date =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? [this.d.year, this.d.month, this.d.date]\n\t\t\t\t\t: gtj(this.toDate());\n\t\t\tlet weekOfYear = getWeekOfYear(date[0], date[1], date[2], this.c);\n\t\t\tif (format == \"jw\" || format == \"jW\") return weekOfYear;\n\t\t\tif (format == \"jww\" || format == \"jWW\") return addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"jwo\" || format == \"jWo\") return ordinalNumber(weekOfYear);\n\t\t\tif (format == \"jwO\" || format == \"jWO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"jalali\", 2);\n\t\t\tweekOfYear = getWeekOfYear(\n\t\t\t\tthis.year(\"y\"),\n\t\t\t\tthis.month(\"M\"),\n\t\t\t\tthis.date(\"D\"),\n\t\t\t\t\"gregorian\"\n\t\t\t);\n\t\t\tif (format == \"w\" || format == \"W\") return weekOfYear;\n\t\t\tif (format == \"ww\" || format == \"WW\") return addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"wo\" || format == \"Wo\" || format == \"wO\" || format == \"WO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"gregorian\");\n\t\t\treturn weekOfYear;\n\t\t}\n\t};\n\n\t/**\n\t * get or set hour\n\t * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the hour, returns class,\n\t * else returns a number or string from hour\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.hour = function (format = \"H\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0) {\n\t\t\t\tthis.d.hour = 0;\n\t\t\t\treturn this.subHour(format - 1);\n\t\t\t} else if (format > 23) {\n\t\t\t\tthis.d.hour = 23;\n\t\t\t\treturn this.addHour(format - 23);\n\t\t\t}\n\t\t\tthis.d.hour = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tlet hour = this.d.hour;\n\t\t\tif (format == \"H\") return hour;\n\t\t\tif (format == \"HH\") return addPrefix(hour, 2);\n\t\t\tif (format == \"k\") return hour || 24;\n\t\t\tif (format == \"kk\") return addPrefix(hour || 24, 2);\n\t\t\thour = hour > 12 ? hour - 12 : hour;\n\t\t\tif (format == \"h\") return hour;\n\t\t\tif (format == \"hh\") return addPrefix(hour, 2);\n\t\t\treturn hour;\n\t\t}\n\t};\n\n\t/**\n\t * get or set minute\n\t * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the minute, returns class,\n\t * else returns a number or string from minute\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.minute = function (format = \"m\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59) return this.addMinute(format);\n\t\t\tthis.d.minute = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"m\") return this.d.minute;\n\t\t\tif (format == \"mm\") return addPrefix(this.d.minute, 2);\n\t\t\treturn this.d.minute;\n\t\t}\n\t};\n\n\t/**\n\t * get or set second\n\t * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the second, returns class,\n\t * else returns a number or string from second\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.second = function (format = \"s\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59) return this.addSecond(format);\n\t\t\tthis.d.second = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"s\") return this.d.second;\n\t\t\tif (format == \"ss\") return addPrefix(this.d.second, 2);\n\t\t\treturn this.d.second;\n\t\t}\n\t};\n\n\t/**\n\t * get or set millisecond\n\t * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n\t * else returns a number or string from millisecond\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.millisecond = function (format = \"c\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 999) return this.addMillisecond(format);\n\t\t\tthis.d.millisecond = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"CCC\" || format == \"c\") return this.d.millisecond;\n\t\t\tif (format == \"CCCC\") return addPrefix(this.d.millisecond, 3);\n\t\t\treturn this.d.millisecond;\n\t\t}\n\t};\n\n\t/**\n\t * get timestamp or set date from timestamp\n\t * @param {Null|Number|String} value - a number for set the millisecond\n\t * @returns {PersianDate|Number} if set the timestamp, returns class,\n\t * else returns timestamp (number)\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.timestamp = function (value) {\n\t\tif (this.error) return this.error;\n\t\tif (value) {\n\t\t\treturn this.fromGregorian(+String(value).trim());\n\t\t} else {\n\t\t\treturn this.toDate().getTime();\n\t\t}\n\t};\n\n\t////////////////////--- Version 1.1.0 ---////////////////////\n\n\t/**\n\t * get clone of this date\n\t * @since 1.1.0\n\t * @returns {PersianDate} returns the clone of this date\n\t */\n\tPersianDate.prototype.clone = function () {\n\t\treturn Object.assign(\n\t\t\tObject.create(Object.getPrototypeOf(this)),\n\t\t\tJSON.parse(JSON.stringify(this))\n\t\t);\n\t};\n\n\t/**\n\t * checks this date is the same to another date\n\t * @since 1.1.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSame = function (...date) {\n\t\tif (this.error) return false;\n\t\tdate = typesToArray(this.c, ...date);\n\t\tdate = this.toArray().map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(date[i]) ? date[i] : value\n\t\t);\n\n\t\tif (this.isValid(...date))\n\t\t\treturn (\n\t\t\t\tthis.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp() == this.timestamp()\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t////////////////////--- Version 1.2.0 ---////////////////////\n\n\t/**\n\t * convert String or Array or Object or PersianDate to Array\n\t * @since 1.2.0\n\t * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n\t */\n\tconst typesToArray = function (\n\t\tcalendar,\n\t\tyear,\n\t\tmonth,\n\t\tdate,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (!year)\n\t\t\t// if year not defined\n\t\t\tyear = calendar == \"jalali\" ? gtj() : new Date(); // return now\n\t\tif (typeof year == \"string\" && year.search(REGEX[\"separators\"]) != -1) {\n\t\t\t// if type of year is String\n\t\t\tyear = year.split(/[/ -.,:\\\\]/);\n\t\t}\n\t\tif (year instanceof PersianDate)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn year.calendar(calendar).toArray();\n\t\telse if (year instanceof Date)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn new PersianDate(year).calendar(calendar).toArray();\n\t\telse if (Object.prototype.toString.call(year) === \"[object Array]\")\n\t\t\t// if type of year is Array\n\t\t\treturn year;\n\t\telse if (Object.prototype.toString.call(year) === \"[object Object]\")\n\t\t\t// if type of year is Object\n\t\t\treturn [\n\t\t\t\tyear.y || year.year || year.years,\n\t\t\t\tyear.M || year.month || year.months || 1,\n\t\t\t\tyear.d || year.day || year.days || year.date || 1,\n\t\t\t\tyear.h || year.hour || year.hours || 0,\n\t\t\t\tyear.m || year.minute || year.minutes || 0,\n\t\t\t\tyear.s || year.second || year.seconds || 0,\n\t\t\t\tyear.ms || year.millisecond || year.milliseconds || 0,\n\t\t\t];\n\t\treturn [year, month, date, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * checks this date is before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \"<\", date);\n\t};\n\n\t/**\n\t * checks this date is after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \">\", date);\n\t};\n\n\t////////////////////--- Version 1.3.0 ---////////////////////\n\n\t/**\n\t * return the object of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return Object of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toObject = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn this.d;\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn {\n\t\t\tyear: this.year(formats[0]),\n\t\t\tmonth: this.month(formats[1]),\n\t\t\tdate: this.date(formats[2]),\n\t\t\thour: this.hour(formats[3]),\n\t\t\tminute: this.minute(formats[4]),\n\t\t\tsecond: this.second(formats[5]),\n\t\t\tmillisecond: this.millisecond(formats[6]),\n\t\t};\n\t};\n\n\t/**\n\t * checks date is a native js Date object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a native js Date, return true\n\t */\n\tPersianDate.prototype.isDate = isDate\n\n\t/**\n\t * checks date is a PersianDate object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a PersianDate, return true\n\t */\n\tPersianDate.prototype.isPersianDate = isPersianDate\n\n\t/**\n\t * checks this date is same or before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSameOrBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \"<=\", date);\n\t};\n\n\t/**\n\t * checks this date is same or after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSameOrAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \">=\", date);\n\t};\n\n\t/**\n\t * checks this date is between the another dates\n\t * @since 1.3.0\n\t * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} from.y - year of date\n\t * @param {Null|String|Number} from.year - year of date\n\t * @param {Null|String|Number} from.years - year of date\n\t * @param {Null|String|Number} from.M - month of date\n\t * @param {Null|String|Number} from.month - month of date\n\t * @param {Null|String|Number} from.months - month of date\n\t * @param {Null|String|Number} from.d - day of date\n\t * @param {Null|String|Number} from.day - day of date\n\t * @param {Null|String|Number} from.days - day of date\n\t * @param {Null|String|Number} from.date - day of date\n\t * @param {Null|String|Number} from.h - hour of date\n\t * @param {Null|String|Number} from.hour - hour of date\n\t * @param {Null|String|Number} from.hours - hour of date\n\t * @param {Null|String|Number} from.m - minute of date\n\t * @param {Null|String|Number} from.minute - minute of date\n\t * @param {Null|String|Number} from.minutes - minute of date\n\t * @param {Null|String|Number} from.s - second of date\n\t * @param {Null|String|Number} from.second - second of date\n\t * @param {Null|String|Number} from.seconds - second of date\n\t * @param {Null|String|Number} from.ms - millisecond of date\n\t * @param {Null|String|Number} from.millisecond - millisecond of date\n\t * @param {Null|String|Number} from.milliseconds - millisecond of date\n\t * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} to.y - year of date\n\t * @param {Null|String|Number} to.year - year of date\n\t * @param {Null|String|Number} to.years - year of date\n\t * @param {Null|String|Number} to.M - month of date\n\t * @param {Null|String|Number} to.month - month of date\n\t * @param {Null|String|Number} to.months - month of date\n\t * @param {Null|String|Number} to.d - day of date\n\t * @param {Null|String|Number} to.day - day of date\n\t * @param {Null|String|Number} to.days - day of date\n\t * @param {Null|String|Number} to.date - day of date\n\t * @param {Null|String|Number} to.h - hour of date\n\t * @param {Null|String|Number} to.hour - hour of date\n\t * @param {Null|String|Number} to.hours - hour of date\n\t * @param {Null|String|Number} to.m - minute of date\n\t * @param {Null|String|Number} to.minute - minute of date\n\t * @param {Null|String|Number} to.minutes - minute of date\n\t * @param {Null|String|Number} to.s - second of date\n\t * @param {Null|String|Number} to.second - second of date\n\t * @param {Null|String|Number} to.seconds - second of date\n\t * @param {Null|String|Number} to.ms - millisecond of date\n\t * @param {Null|String|Number} to.millisecond - millisecond of date\n\t * @param {Null|String|Number} to.milliseconds - millisecond of date\n\t * @param {String} method - determines that consider the dates themselves\n\t * @returns {‌Boolean} if date valid, return true or false\n\t */\n\tPersianDate.prototype.isBetween = function (from, to, method = \"()\") {\n\t\tif (this.error) return false;\n\t\t// let $this = this.clone();\n\t\tfrom = typesToArray(this.c, from);\n\t\tlet date = this.toArray();\n\t\tif (!from[2]) date[2] = 1;\n\t\t// $this.date(1);\n\t\tfrom = date.map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(from[i]) ? from[i] : value\n\t\t);\n\n\t\t// from = [\n\t\t// \tfrom[0] || this.d.year,\n\t\t// \tfrom[1] || this.d.month,\n\t\t// \tfrom[2] || 1,\n\t\t// \tfrom[3] || this.d.hour,\n\t\t// \tfrom[4] || this.d.minute,\n\t\t// \tfrom[5] || this.d.second,\n\t\t// \tfrom[6] || this.d.millisecond,\n\t\t// ];\n\t\tto = typesToArray(this.c, to);\n\t\t// to = [\n\t\t// \tto[0] || this.d.year,\n\t\t// \tto[1] || this.d.month,\n\t\t// \tto[2] || 1,\n\t\t// \tto[3] || this.d.hour,\n\t\t// \tto[4] || this.d.minute,\n\t\t// \tto[5] || this.d.second,\n\t\t// \tto[6] || this.d.millisecond,\n\t\t// ];\n\t\tto = date.map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(to[i]) ? to[i] : value\n\t\t);\n\n\t\tif (!(this.isValid(...from) && this.isValid(...to))) return false;\n\n\t\treturn (\n\t\t\tcompareDate(this, method[0] === \"[\" ? \">=\" : \">\", from) &&\n\t\t\tcompareDate(this, method[1] === \"]\" ? \"<=\" : \"<\", to)\n\t\t);\n\t\t// return (\n\t\t// \t(method[0] === \"[\"\n\t\t// \t\t? $this.isSameOrAfter(from)\n\t\t// \t\t: $this.isAfter(from)) &&\n\t\t// \t(method[1] === \"]\"\n\t\t// \t\t? $this.isSameOrBefore(to)\n\t\t// \t\t: $this.isBefore(to))\n\t\t// );\n\t};\n\n\t////////////////////--- Version 1.4.0 ---////////////////////\n\n\t/**\n\t * returns minimum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return minimum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.min = function () {\n\t\treturn mathOperation(arguments, this, \"min\");\n\t};\n\n\t/**\n\t * returns maximum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.max = function () {\n\t\treturn mathOperation(arguments, this, \"max\");\n\t};\n\n\t/**\n\t * get the diffrence between two date\n\t * @since 1.4.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {String} unit - the unit of the measurment\n\t * @param {Boolean} addOne - add one day to result\n\t * @returns {Number} diffrence\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.diff = function (date, unit, addOne = false) {\n\t\tif (this.error) return this.error;\n\t\tdate = typesToArray(this.c, date);\n\t\tif (!this.isValid(...date)) return \"تاریخ نامعتبر\";\n\t\tlet result =\n\t\t\tthis.timestamp() -\n\t\t\tthis.clone()\n\t\t\t\t.parse(...date)\n\t\t\t\t.timestamp();\n\t\tswitch (unit) {\n\t\t\tcase \"y\":\n\t\t\tcase \"year\":\n\t\t\tcase \"years\":\n\t\t\t\tresult = this.d.year - date[0];\n\t\t\t\tbreak;\n\t\t\tcase \"M\":\n\t\t\tcase \"month\":\n\t\t\tcase \"months\":\n\t\t\t\tresult = this.d.year * 12 + this.d.month - (+date[0] * 12 + +date[1]);\n\t\t\t\tbreak;\n\t\t\tcase \"d\":\n\t\t\tcase \"date\":\n\t\t\tcase \"day\":\n\t\t\tcase \"days\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60 / 24);\n\t\t\t\tbreak;\n\t\t\tcase \"h\":\n\t\t\tcase \"hour\":\n\t\t\tcase \"hours\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"m\":\n\t\t\tcase \"minute\":\n\t\t\tcase \"minutes\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"s\":\n\t\t\tcase \"second\":\n\t\t\tcase \"seconds\":\n\t\t\t\tresult = Math.ceil(result / 1000);\n\t\t\t\tbreak;\n\t\t\tcase \"ms\":\n\t\t\tcase \"millisecond\":\n\t\t\tcase \"milliseconds\":\n\t\t}\n\t\treturn addOne ? result + (result >= 0 ? 1 : -1) : result;\n\t};\n\n\t////////////////////--- Version 1.5.0 ---////////////////////\n\n\t/**\n\t * return the array of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return array of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toArray = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn Object.values(this.d);\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn [\n\t\t\tthis.year(formats[0]),\n\t\t\tthis.month(formats[1]),\n\t\t\tthis.date(formats[2]),\n\t\t\tthis.hour(formats[3]),\n\t\t\tthis.minute(formats[4]),\n\t\t\tthis.second(formats[5]),\n\t\t\tthis.millisecond(formats[6]),\n\t\t];\n\t};\n\n\t////////////////////--- Version 2.0.0 ---////////////////////\n\n\t/**\n\t * get the diffrence between two date in a human-readable format\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {Boolean} suffix - add suffix or not\n\t * @returns {String} if date valid, return diff human-readable format\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.diffForHumans = function (date, suffix = true) {\n\t\tif (this.error) return this.error;\n\t\tlet result = this.diff(date, \"s\");\n\t\tif (typeof result == \"string\") return \"تاریخ نامعتبر\";\n\t\tlet prefix = result > 0 ? \"آینده\" : \"پیش\";\n\t\tresult = Math.abs(result);\n\n\t\tif (result == 0) return \"هم اکنون\";\n\t\telse if (result < 45) result = \"لحظات\";\n\t\telse if ((result /= 60) < 45)\n\t\t\t// divide by 60, for getting minute\n\t\t\tresult = Math.round(result) + \" \" + \"دقیقه\";\n\t\telse if ((result /= 60) < 23.5)\n\t\t\t// divide by 60, for getting hour\n\t\t\tresult = Math.round(result) + \" \" + \"ساعت\";\n\t\telse if ((result /= 24) < 26)\n\t\t\t// divide by 24, for getting day\n\t\t\tresult = Math.round(result) + \" \" + \"روز\";\n\t\telse if (result < 320) result = Math.round(result / 30) + \" \" + \"ماه\";\n\t\telse result = Math.round(result / 365) + \" \" + \"سال\";\n\t\treturn result + (suffix ? \" \" + prefix : \"\");\n\t};\n\n\t/**\n\t * convert a jalali date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.fromJalali = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date = gtj();\n\t\telse if (this.isPersianDate(date[0])) date = date[0].toArray();\n\t\telse date = typesToArray(\"jalali\", ...date);\n\t\tif (this.c == \"jalali\") {\n\t\t\t//plus sign before a variable, convert variable to int\n\t\t\tthis.d.year = +date[0];\n\t\t\tthis.d.month = +date[1] || 1;\n\t\t\tthis.d.date = +date[2] || 1;\n\t\t\tthis.d.hour = +date[3] || 0;\n\t\t\tthis.d.minute = +date[4] || 0;\n\t\t\tthis.d.second = +date[5] || 0;\n\t\t\tthis.d.millisecond = +date[6] || 0;\n\t\t} else setGregorianDate(jtg(...date), this);\n\n\t\tif (!this.isValid()) return showError(\"تاریخ نامعتبر\", this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.fromGregorian = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date[0] = new Date().getTime();\n\t\tif (this.isPersianDate(date[0])) {\n\t\t\tdate = date[0].toArray();\n\t\t} else if (!isTimestamp(date[0])) {\n\t\t\tdate = typesToArray('gregorian', ...date);\n\t\t\tdate[6] = +date[6] || 0;\n\t\t\tdate[5] = +date[5] || 0;\n\t\t\tdate[4] = +date[4] || 0;\n\t\t\tdate[3] = +date[3] || 0;\n\t\t\tdate[2] = +date[2] || 1;\n\t\t\tdate[1] = +date[1] || 1;\n\t\t}\n\t\tdate[0] = +date[0];\n\n\t\tif (date.length > 1) {\n\t\t\tif (!isValid('gregorian', ...date)) return showError(\"تاریخ نامعتبر\", this);\n\t\t\t--date[1]; // this is month; becuse the Date get month from 0, subtract one\n\t\t}\n\n\t\tdate = new Date(...date);\n\t\tif (date == \"Invalid Date\") return showError(\"تاریخ نامعتبر\", this);\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n\t * @returns {PersianDate} return class with persian date\n\t */\n\tPersianDate.prototype.calendar = function (calendar) {\n\t\tif (!calendar) return this.c;\n\t\tif (calendar[0] == \"j\" && this.c[0] == \"g\") {\n\t\t\tif (!this.error) setJalaliDate(gtj(this.toDate()), this);\n\t\t\tthis.c = \"jalali\";\n\t\t} else if (calendar[0] == \"g\" && this.c[0] == \"j\") {\n\t\t\tif (!this.error) setGregorianDate(this.toDate(), this);\n\t\t\tthis.c = \"gregorian\";\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * return number of weeks in year\n\t * @since 2.0.0\n\t * @param {Number|String} year - the year\n\t * @returns {Number} number of weeks in year\n\t */\n\tPersianDate.prototype.getWeeksInYear = function (year) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) year = this.year();\n\n\t\tlet dayOfYearFormat = this.c == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = this.clone().parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet lastOfYear = firstOfYear.clone().addYear().subDay();\n\t\tlet lastOfYearDay = lastOfYear.date(dayOfYearFormat);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\t\telse firstOfYear.subDay(firstOfYearDay);\n\n\t\tif (lastOfYearDay > 3) lastOfYear.addDay(7 - lastOfYearDay);\n\t\telse lastOfYear.subDay(lastOfYearDay);\n\t\treturn Math.ceil(lastOfYear.diff(firstOfYear, \"date\") / 7);\n\t};\n\n\t/**\n\t * return the Date instance of PersianDate\n\t * @since 2.0.0\n\t * @returns {Date} if date valid, return Date instance of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toDate = function () {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") return jtg(...this.toArray());\n\t\tlet date = this.toArray();\n\t\t--date[1];\n\t\treturn new Date(...date);\n\t};\n\n\t/**\n\t * change the date to start of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.startOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 0;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 0;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 0;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 0;\n\t\tif (unit[0] == \"d\") return this;\n\t\tif (unit[0] == 'w')\n\t\t\treturn this.subDay(getDayOfWeek(this.toDate(), this.c, 'array'));\n\t\tthis.d.date = 1;\n\t\tif (unit[0] == 'q')\n\t\t\treturn this.quarter(this.quarter())\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 1;\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\t/**\n\t * change the date to end of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.endOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 999;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 59;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 59;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 23;\n\t\tif (unit[0] == \"d\") return this;\n\t\tif (unit[0] == 'w')\n\t\t\treturn this.addDay(7 - getDayOfWeek(this.toDate(), this.c));\n\t\tif (unit[0] == 'q') {\n\t\t\tthis.quarter(this.quarter()).addMonth(2)\n\t\t\tthis.d.date = this.getDaysInMonth();\n\t\t\treturn this;\n\t\t}\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 12;\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\tPersianDate.prototype.valueOf = function () {\n\t\treturn this.timestamp();\n\t};\n\n\t////////////////////--- Version 2.3.0 ---////////////////////\n\n\t/**\n\t * change the time\n\t * @since 2.3.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} time - the new time\n\t * @param {Null|String|Number} time.h - hour of date\n\t * @param {Null|String|Number} time.hour - hour of date\n\t * @param {Null|String|Number} time.hours - hour of date\n\t * @param {Null|String|Number} time.m - minute of date\n\t * @param {Null|String|Number} time.minute - minute of date\n\t * @param {Null|String|Number} time.minutes - minute of date\n\t * @param {Null|String|Number} time.s - second of date\n\t * @param {Null|String|Number} time.second - second of date\n\t * @param {Null|String|Number} time.seconds - second of date\n\t * @param {Null|String|Number} time.ms - millisecond of date\n\t * @param {Null|String|Number} time.millisecond - millisecond of date\n\t * @param {Null|String|Number} time.milliseconds - millisecond of date\n\t * @returns {PersianDate|Array} if set the time, returns class,\n\t * else returns an array of time\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.time = function (...time) {\n\t\tif (this.error) return this.error;\n\t\tif (!time.length)\n\t\t\treturn this.toArray().slice(3)\n\t\tlet times = []\n\t\tif (time[0] instanceof PersianDate)\n\t\t\ttimes = time[0].time();\n\t\telse if (time[0] instanceof Date)\n\t\t\ttimes = [\n\t\t\t\ttime[0].getHours(),\n\t\t\t\ttime[0].getMinutes(),\n\t\t\t\ttime[0].getSeconds(),\n\t\t\t\ttime[0].getMilliseconds()\n\t\t\t]\n\t\telse if (Object.prototype.toString.call(time[0]) === \"[object Object]\")\n\t\t\ttimes = [\n\t\t\t\ttime[0].h || time[0].hour || time[0].hours || 0,\n\t\t\t\ttime[0].m || time[0].minute || time[0].minutes || 0,\n\t\t\t\ttime[0].s || time[0].second || time[0].seconds || 0,\n\t\t\t\ttime[0].ms || time[0].millisecond || time[0].milliseconds || 0,\n\t\t\t];\n\t\telse\n\t\t\ttimes = typesToArray(this.c, ...time)\n\t\tif (this.isValidTime(...times)) {\n\t\t\treturn this.hour(times[0] || 0).minute(times[1] || 0).second(times[2] || 0).millisecond(times[3] || 0)\n\t\t}\n\t\telse\n\t\t\treturn showError(\"تاریخ نامعتبر\", this)\n\t};\n\n\t/**\n\t * show warning for deprecated functions\n\t * @since 2.0.0\n\t * @param {String} msg - the message for warning\n\t */\n\tconst deprecate = (msg) => {\n\t\tconsole.warn(msg);\n\t};\n\n\t/**\n\t * check the input is timestamp\n\t * @since 2.0.0\n\t * @param {Number|String} timestamp - input that must be checked\n\t * @returns {Boolean} if input was timestamp, return true\n\t */\n\tconst isTimestamp = (timestamp) => {\n\t\treturn !isNaN(timestamp) && Math.floor(timestamp / 10000) > 0;\n\t};\n\n\t/**\n\t * set the date with Date instance\n\t * @since 2.0.0\n\t * @param {Date} date - the Date instance\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setGregorianDate = (date, instance) => {\n\t\tinstance.d = {\n\t\t\tyear: date.getFullYear(),\n\t\t\tmonth: date.getMonth() + 1,\n\t\t\tdate: date.getDate(),\n\t\t\thour: date.getHours(),\n\t\t\tminute: date.getMinutes(),\n\t\t\tsecond: date.getSeconds(),\n\t\t\tmillisecond: date.getMilliseconds(),\n\t\t};\n\t};\n\n\t/**\n\t * set the date with array of persian date\n\t * @since 2.0.0\n\t * @param {Array} date - the array of persian date\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setJalaliDate = (date, instance) => {\n\t\t[\n\t\t\tinstance.d.year,\n\t\t\tinstance.d.month,\n\t\t\tinstance.d.date,\n\t\t\tinstance.d.hour,\n\t\t\tinstance.d.minute,\n\t\t\tinstance.d.second,\n\t\t\tinstance.d.millisecond,\n\t\t] = date;\n\t};\n\n\t/**\n\t * compare the dates\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - the date\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'>'|'>='|'<'|'<='} operator - the operator for compare\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tconst compareDate = (instance, operator, date) => {\n\t\tdate = typesToArray(instance.c, ...date);\n\n\t\tif (instance.isValid(...date))\n\t\t\treturn eval(\n\t\t\t\t\"instance.timestamp()\" +\n\t\t\t\toperator +\n\t\t\t\t\"instance.clone().parse(...date).timestamp()\"\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t/**\n\t * do the math operation on dates\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} values - the dates\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'min'|'max'} operation - the operation\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tconst mathOperation = (values, instance, operation) => {\n\t\tif (!values.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet args = Object.values(values).concat();\n\t\tlet argsNumber = args.map((date) => {\n\t\t\tdate = typesToArray(instance.c, date);\n\t\t\tif (instance.isValid(...date))\n\t\t\t\treturn instance\n\t\t\t\t\t.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp();\n\t\t\treturn false;\n\t\t});\n\t\tif (argsNumber.indexOf(false) != -1) return false;\n\t\treturn eval(\n\t\t\t\"args[argsNumber.indexOf(Math.\" + operation + \"(...argsNumber))]\"\n\t\t);\n\t};\n\n\tif (calendarVal) this.calendar(calendarVal);\n\tif (dateVal) {\n\t\tif (calendarVal && calendarVal[0] == \"j\") this.fromJalali(dateVal);\n\t\telse this.fromGregorian(dateVal);\n\t} else this.now();\n};\n\n/**\n * receives year and determined that is leap year or not\n * @static\n * @since 2.3.0\n * @param {Number} year - the year to be determined is a leap or not\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @returns {Boolean} if is leap year, returns true\n */\nPersianDate.isLeapYear = isLeapYear;\n\n/**\n * checks date is a native js Date object\n * @static\n * @since 2.3.0\n * @param {*} date date that must be checked\n * @returns {Boolean} if date is a native js Date, return true\n */\nPersianDate.isDate = isDate\n\n/**\n * checks date is a PersianDate object\n * @static\n * @since 2.3.0\n * @param {*} date date that must be checked\n * @returns {Boolean} if date is a PersianDate, return true\n */\nPersianDate.isPersianDate = isPersianDate\n\n/**\n * checks the date and time\n * @static\n * @since 2.4.0\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @param {?Number} year - year of date that will be checked\n * @param {?Number} month - month of date that will be checked\n * @param {?Number} day - day of date that will be checked\n * @param {?Number} hour - hour of date that will be checked\n * @param {?Number} minute - minute of date that will be checked\n * @param {?Number} second - second of date that will be checked\n * @param {?Number} millisecond - millisecond of date that will be checked\n * @returns {Boolean} if is valid, returns true\n */\nPersianDate.isValid = isValid\n\n/**\n * checks the date\n * @static\n * @since 2.4.0\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @param {?Number} year - year of date that will be checked\n * @param {?Number} month - month of date that will be checked\n * @param {?Number} day - day of date that will be checked\n * @returns {Boolean} if is valid date, returns true\n */\nPersianDate.isValidDate = isValidDate\n\n/**\n * checks the time\n * @static\n * @since 2.4.0\n * @param {?Number} hour - hour of date that will be checked\n * @param {?Number} minute - minute of date that will be checked\n * @param {?Number} second - second of date that will be checked\n * @param {?Number} millisecond - millisecond of date that will be checked\n * @returns {Boolean} if is valid time, returns true\n */\nPersianDate.isValidTime = isValidTime\n\n//TODO: add localization\n//TODO: refactor\n\nexport default PersianDate;\n\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n"],"sourceRoot":""}