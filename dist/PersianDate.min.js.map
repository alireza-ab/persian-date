{"version":3,"sources":["webpack://PersianDate/webpack/universalModuleDefinition","webpack://PersianDate/./src/utils.js","webpack://PersianDate/webpack/bootstrap","webpack://PersianDate/webpack/runtime/define property getters","webpack://PersianDate/webpack/runtime/hasOwnProperty shorthand","webpack://PersianDate/./src/PersianDate.js"],"names":["root","factory","exports","module","define","amd","global","CALENDAR","jalali","months","1","2","3","4","5","6","7","8","9","10","11","12","days","label","0","weekNumber","ordinalNumbers","number","mode","numbers","13","14","15","16","17","18","19","20","30","40","50","60","70","80","90","100","200","300","ordinalNumber","remainder","Math","floor","gregorian","REGEX","format","isNumeric","separators","betweenBacktick","TIMETYPE","hour","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","isLeapYear","year","calendar","includes","isDate","date","Date","isPersianDate","PersianDate","dateVal","calendarVal","this","c","gtj","month","day","minute","second","millisecond","jYear","jMonth","jDay","toString","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","newYear","parseInt","jtg","gYear","gMonth","gDay","daysOfMonths","v","getDayLabel","getDay","showError","getDayOfWeek","getDayOfYear","getDaysInMonth","getWeekOfYear","dayOfYearFormat","firstOfYear","parse","firstOfYearDay","clone","addDay","ceil","diff","weeksInYear","getWeeksInYear","addPrefix","text","length","prefix","repeat","String","errorText","instance","error","now","setJalaliDate","setGregorianDate","setDate","deprecate","fromGregorian","fromJalali","isValid","isValidDate","isValidTime","some","e","search","undefined","addYear","checkDate","subYear","abs","subDay","addMonth","subMonth","monthToStartNewYear","dayToStartNextMonth","addQuarter","quarter","subQuarter","addWeek","week","subWeek","addHour","subHour","hourToNextDay","subMillisecond","addMinute","subMinute","minuteToNextHour","addSecond","subSecond","secondToNextMinute","addMillisecond","millisecondToNextSecond","pastMonth","pastDays","pastHours","pastMinute","pastSeconds","pastMilliseconds","texts","replace","matched","push","matchedFormat","match","dateString","i","substring","indexOf","timestamp","substr","trim","toDate","slice","daysInMonth","gDate","dayOfWeek","dayOfYear","weekOfYear","value","getTime","assign","create","getPrototypeOf","JSON","stringify","isSame","typesToArray","toArray","map","split","y","years","M","h","hours","m","minutes","s","seconds","ms","milliseconds","isBefore","compareDate","isAfter","toObject","arguments","formats","isSameOrBefore","isSameOrAfter","isBetween","from","to","method","min","mathOperation","max","unit","addOne","result","values","diffForHumans","suffix","round","isTimestamp","lastOfYear","lastOfYearDay","startOf","endOf","valueOf","time","times","msg","console","warn","isNaN","operator","eval","operation","args","concat","argsNumber","__proto__"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAqB,YAAID,IAEzBD,EAAkB,YAAIC,IARxB,CASGK,QAAQ,WACX,M,8FCVA,MAAMC,EAAW,CACbC,OAAQ,CACJC,OAAQ,CACJC,EAAG,UACHC,EAAG,WACHC,EAAG,QACHC,EAAG,MACHC,EAAG,QACHC,EAAG,SACHC,EAAG,MACHC,EAAG,OACHC,EAAG,MACHC,GAAI,KACJC,GAAI,OACJC,GAAI,SAERC,KAAM,CACFC,MAAO,CACHR,EAAG,OACHS,EAAG,SACHd,EAAG,SACHC,EAAG,UACHC,EAAG,WACHC,EAAG,UACHC,EAAG,QAEPW,WAAY,CACRV,EAAG,EACHS,EAAG,EACHd,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,IAGXY,eAAgB,SAAUC,EAAQC,GAC9B,MAAMC,EAAU,CACZnB,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,OACHC,EAAG,MACHC,EAAG,KACHC,EAAG,MACHC,EAAG,MACHC,EAAG,KACHC,GAAI,KACJC,GAAI,QACJC,GAAI,SACJS,GAAI,QACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,OACJC,GAAI,OACJC,GAAI,QACJC,GAAI,OACJC,GAAI,MACJC,GAAI,MACJC,GAAI,QACJC,GAAI,MACJC,GAAI,QACJC,GAAI,QACJC,GAAI,MACJC,IAAK,KACLC,IAAK,QACLC,IAAK,QAET,IAAIC,EAAgB,GACpB,GAAc,GAAVrB,EACAqB,EAAgB,WACf,GAAInB,EAAQF,GACbqB,EAAgBnB,EAAQF,IAAqB,IAAVA,EAAe,KAAO,SACxD,CACD,IAAIsB,EAAYtB,EAAS,GACrBsB,IACAD,EAAgBnB,EAAQoB,GAAa,KACzCA,GAAatB,EAASsB,GAAa,IAC/BA,IACAD,EAAgBnB,EAAQoB,IAAcD,EAAiB,MAAQA,EAA+B,IAAbC,EAAkB,MAAQ,MAC/GA,EAAuC,IAA3BC,KAAKC,MAAMxB,EAAS,KAC5BsB,IACAD,EAAgBnB,EAAQoB,IAAcD,EAAiB,MAAQA,EAAiB,MAIxF,OAFY,GAARpB,IACAoB,GAAiB,MACdA,IAGfI,UAAW,CACP3C,OAAQ,CACJC,EAAG,UACHC,EAAG,WACHC,EAAG,QACHC,EAAG,QACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACHC,EAAG,SACHC,EAAG,YACHC,GAAI,UACJC,GAAI,WACJC,GAAI,YAERC,KAAM,CACFC,MAAO,CACHC,EAAG,SACHd,EAAG,SACHC,EAAG,UACHC,EAAG,YACHC,EAAG,WACHC,EAAG,SACHC,EAAG,YAEPU,WAAY,CACRD,EAAG,EACHd,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,IAGXW,eAAgB,SAAUC,GACtB,OAAc,GAAVA,GAAeA,EAAS,IAAM,GAAe,IAAVA,EAC5BA,EAAS,KACD,GAAVA,GAAeA,EAAS,IAAM,GAAe,IAAVA,EACjCA,EAAS,KACD,GAAVA,GAAeA,EAAS,IAAM,GAAe,IAAVA,EACjCA,EAAS,KAETA,EAAS,QAK1B0B,EAAQ,CACVC,OAAQ,qKACRC,UAAW,QACXC,WAAY,kBACZC,gBAAiB,YAGfC,EAAW,SAAUC,EAAML,GAC7B,OAAIK,GAAQ,GAAKA,EAAO,GACN,KAAVL,EACO,KACG,MAAVA,EACO,OACG,KAAVA,EACO,KACG,MAAVA,EACO,MACG,OAAVA,EACO,MACG,MAAVA,EACO,aACJ,MAEPK,GAAQ,IAAMA,EAAO,GACP,KAAVL,EACO,KACG,MAAVA,EACO,OACG,KAAVA,EACO,KACG,MAAVA,EACO,MACG,OAAVA,EACO,MACG,MAAVA,EACO,aACJ,WAbX,KChKAM,yBAA2B,GAG/B,SAASC,oBAAoBC,GAE5B,GAAGF,yBAAyBE,GAC3B,OAAOF,yBAAyBE,GAAU5D,QAG3C,IAAIC,EAASyD,yBAAyBE,GAAY,CAGjD5D,QAAS,IAOV,OAHA6D,oBAAoBD,GAAU3D,EAAQA,EAAOD,QAAS2D,qBAG/C1D,EAAOD,QCnBf2D,oBAAoBG,EAAI,CAAC9D,EAAS+D,KACjC,IAAI,IAAIC,KAAOD,EACXJ,oBAAoBM,EAAEF,EAAYC,KAASL,oBAAoBM,EAAEjE,EAASgE,IAC5EE,OAAOC,eAAenE,EAASgE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EL,oBAAoBM,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,G,+LCUlF,MAAMI,WAAa,SAAUC,EAAMC,GAClC,MAAoB,MAAhBA,EAAS,IAEXD,EAAO,KACJ,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAC1B,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,KAEjBE,SADGF,EAAO,IAGfA,EAAO,GAAK,GAAKA,EAAO,KAAO,GAAMA,EAAO,KAAO,GAIvDG,OAAS,SAAUC,GACxB,OAAOA,aAAgBC,MAGlBC,cAAgB,SAAUF,GAC/B,OAAOA,aAAgBG,aASlBA,YAAc,SAAUC,QAASC,aAetCC,KAAKxB,EAAI,GAQTwB,KAAKC,EAAI,SAaT,MAAMC,IAAM,CAACZ,EAAMa,EAAOC,EAAKjC,EAAMkC,EAAQC,EAAQC,KACpD,IAAIb,EAsBAc,EAAOC,EAAQC,EAlBlBhB,EAHIJ,EAC6C,kBAAzCV,OAAOM,UAAUyB,SAASvB,KAAKE,GAEhCA,EAEA,IAAIK,KACV,yDAAwBL,GAAQA,EAAO,EACvC,yDAAwBa,GAASA,EAAQ,EACzC,yDAAwBC,GAAOA,EAAM,EACrC,yDAAwBjC,GAAQA,EAAO,EACvC,yDAAwBkC,GAAUA,EAAS,EAC3C,yDAAwBC,GAAUA,EAAS,EAC3C,yDAAwBC,GAAeA,EAAc,GAZrC,IAAIZ,KActBS,EAAMV,EAAKkB,UACXT,EAAQT,EAAKmB,WAAa,EAC1BvB,EAAOI,EAAKoB,cACZ3C,EAAOuB,EAAKqB,WACZV,EAASX,EAAKsB,aACdV,EAASZ,EAAKuB,aACdV,EAAcb,EAAKwB,kBAgBf5B,EAAO,MACVkB,EAAQ,IACRlB,GAAQ,OAERkB,EAAQ,EACRlB,GAAQ,KAET,IAAI6B,EAAUhB,EAAQ,EAAIb,EAAO,EAAIA,EACjCxD,EACH,IAAMwD,EACN8B,UAAUD,EAAU,GAAK,GACzBC,UAAUD,EAAU,IAAM,KAC1BC,UAAUD,EAAU,KAAO,KAC3B,GACAf,EA5BqB,CACrB,EACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAiBgBD,EAAQ,GAYzB,OAXAK,GAAS,GAAKY,SAAStF,EAAO,OAC9BA,GAAQ,MACR0E,GAAS,EAAIY,SAAStF,EAAO,MAC7BA,GAAQ,KACJA,EAAO,MACV0E,GAASY,UAAUtF,EAAO,GAAK,KAC/BA,GAAQA,EAAO,GAAK,KAErB2E,EACC3E,EAAO,IAAM,EAAIsF,SAAStF,EAAO,IAAM,EAAIsF,UAAUtF,EAAO,KAAO,IACpE4E,EAAO,GAAK5E,EAAO,IAAMA,EAAO,IAAMA,EAAO,KAAO,IAC7C,CAAC0E,EAAOC,EAAQC,EAAMvC,EAAMkC,EAAQC,EAAQC,IAc9Cc,IAAM,CAAC/B,EAAMa,EAAOC,EAAKjC,EAAMkC,EAAQC,EAAQC,KASpD,IAAIe,EAAOC,EAAQC,EAPnBlC,EAAO,yDAAwBA,IAASA,EAAO,EAC/Ca,EAAQ,yDAAwBA,IAAUA,EAAQ,EAClDC,EAAM,yDAAwBA,IAAQA,EAAM,EAC5CjC,EAAO,yDAAwBA,IAASA,EAAO,EAC/CkC,EAAS,yDAAwBA,IAAWA,EAAS,EACrDC,EAAS,yDAAwBA,IAAWA,EAAS,EACrDC,EAAc,yDAAwBA,IAAgBA,EAAc,EAEhEjB,EAAO,KACVgC,EAAQ,KACRhC,GAAQ,KAERgC,EAAQ,IAET,IAAIxF,EACH,IAAMwD,EACgB,EAAtB8B,SAAS9B,EAAO,IAChB8B,UAAW9B,EAAO,GAAM,GAAK,GAC7B,GACAc,GACCD,EAAQ,EAAkB,IAAbA,EAAQ,GAAwB,IAAbA,EAAQ,GAAU,KACpDmB,GAAS,IAAMF,SAAStF,EAAO,QAC/BA,GAAQ,OACJA,EAAO,QACVwF,GAAS,IAAMF,WAAWtF,EAAO,OACjCA,GAAQ,MACJA,GAAQ,KAAKA,KAElBwF,GAAS,EAAIF,SAAStF,EAAO,MAC7BA,GAAQ,KACJA,EAAO,MACVwF,GAASF,UAAUtF,EAAO,GAAK,KAC/BA,GAAQA,EAAO,GAAK,KAErB0F,EAAO1F,EAAO,EACd,IAAI2F,EAAe,CAClB,EACA,GACCH,EAAQ,GAAK,GAAKA,EAAQ,KAAO,GAAMA,EAAQ,KAAO,EAAI,GAAK,GAChE,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAED,IAAKC,EAAS,EAAGA,EAAS,GAAIA,IAAU,CACvC,IAAIG,EAAID,EAAaF,GACrB,GAAIC,GAAQE,EAAG,MACfF,GAAQE,EAGT,OAAO,IAAI/B,KAAK2B,EAAOC,EAAS,EAAGC,EAAMrD,EAAMkC,EAAQC,EAAQC,IAU1DoB,YAAc,CAACjC,EAAO,IAAIC,KAAQJ,EAAW,WACL,kBAAzCX,OAAOM,UAAUyB,SAASvB,KAAKM,GAE3B,0CAASH,GAAgB,KAAS,MAAEG,EAAKkC,UAC1CC,UAAU,gBAAiB7B,MAU7B8B,aAAe,CACpBpC,EAAO,IAAIC,KACXJ,EAAW,SACXnD,EAAO,aAEsC,kBAAzCwC,OAAOM,UAAUyB,SAASvB,KAAKM,GAGjC,0CAASH,GAAgB,KAAc,WAAEG,EAAKkC,WACrC,YAARxF,EAAqB,EAAI,GAGrByF,UAAU,gBAAiB7B,MAW7B+B,aAAe,CAACzC,EAAMa,EAAOC,EAAKb,KAIvC,IAFAY,GAASA,EACTC,GAAOA,EACW,KAATD,GACRC,GAAO,IAAIP,YAAY,CAACP,EAAMa,GAAQZ,GAAUyC,iBAEjD,OAAO5B,GAWF6B,cAAgB,CAAC3C,EAAMa,EAAOC,EAAKb,KACxC,IAAI2C,EAA8B,UAAZ3C,EAAuB,KAAO,IAChD4C,GAAc,IAAItC,aAAcN,SAASA,GAAU6C,MAAM9C,GACzD+C,EAAiBF,EAAYzC,KAAKwC,GAClCxC,EAAOyC,EAAYG,QAAQF,MAAM9C,EAAMa,EAAOC,GAC9CiC,EAAiB,GAAGF,EAAYI,OAAO,EAAIF,GAE/C,IAAIpG,EAAayB,KAAK8E,KAAK9C,EAAK+C,KAAKN,EAAa,QAAQ,GAAQ,GAE9DO,EAAchD,EAAK4C,QAAQK,iBAC/B,OAAO1G,EAAayG,EAAcA,EAAczG,GAW3CuB,cAAgB,CAACrB,EAAQoD,EAAW,SAAUnD,EAAO,IACnD,0CAASmD,GAAUrD,eAAeC,EAAQC,GAU5CwG,UAAY,CAACC,EAAMC,EAAQC,EAAS,MAClCA,EAAOC,OAAOF,EAASG,OAAOJ,GAAMC,QAAUD,EAShDhB,UAAY,CAACqB,EAAWC,YACtBA,EAAS3E,EAChB2E,EAASC,MAAQF,EACVA,GAORrD,YAAYX,UAAUmE,IAAM,WACvBrD,KAAKoD,eACDpD,KAAKoD,MACZpD,KAAKxB,EAAI,IAEV,IAAIkB,EAAO,IAAIC,KAGf,MAFc,UAAVK,KAAKC,EAAeqD,cAAcpD,IAAIR,GAAOM,MAC5CuD,iBAAiB7D,EAAMM,MACrBA,MASRH,YAAYX,UAAUsE,QAAU,YAAa9D,GAK5C,OAJA+D,UACC,oJAGMzD,KAAK0D,iBAAiBhE,IAqC9BG,YAAYX,UAAUkD,MAAQ,YAAa1C,GAC1C,MAAc,UAAVM,KAAKC,EAAsBD,KAAK2D,cAAcjE,GACtCM,KAAK0D,iBAAiBhE,IAQnCG,YAAYX,UAAUG,WAAa,SAAUC,GAC5C,OAAIU,KAAKoD,QACJ9D,IAAMA,EAAOU,KAAKV,QAChBD,WAAWC,EAAMU,KAAKC,KAc9BJ,YAAYX,UAAU0E,QAAU,SAC/BtE,EACAa,EACAC,EACAjC,EACAkC,EACAC,EACAC,GAEA,OAAIP,KAAKoD,OAERpD,KAAK6D,YAAYvE,EAAMa,EAAOC,IAC9BJ,KAAK8D,YAAY3F,EAAMkC,EAAQC,EAAQC,IAWzCV,YAAYX,UAAU2E,YAAc,SAAUvE,EAAMa,EAAOC,GAC1D,GAAIJ,KAAKoD,MAAO,OAAO,EAMvB,GALK9D,IACJA,EAAOU,KAAKxB,EAAEc,KACda,EAAQH,KAAKxB,EAAE2B,MACfC,EAAMJ,KAAKxB,EAAEkB,MAEV,CAACJ,EAAMa,EAAOC,GAAK2D,MAAMC,IAAuC,GAAjCf,OAAOe,GAAGC,OAAO,cACnD,OAAO,EACR,GAAI3E,EAAO,GAAKa,EAAQ,IAAMA,EAAQ,GAAKC,EAAM,IAAMA,EAAM,EAC5D,OAAO,EACR,GAAc,UAAVJ,KAAKC,EAAe,CACvB,GAAIE,GAAS,GAAKA,GAAS,IAAa,IAAPC,EAAW,OAAO,EACnD,GAAa,IAATD,GAAsB,IAAPC,EAAW,OAAO,EACrC,GAAa,IAATD,GAAsB,IAAPC,IAAcJ,KAAKX,WAAWC,GAAO,OAAO,MACzD,CACN,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,IAAIE,SAASW,IAAiB,IAAPC,EAAW,OAAO,EAC1D,GAAa,GAATD,IAAsB,IAAPC,GAAqB,IAAPA,IAAcJ,KAAKX,WAAWC,IAC9D,OAAO,EAET,OAAO,GAWRO,YAAYX,UAAU4E,YAAc,SACnC3F,EACAkC,EACAC,EACAC,GAEA,QAAIP,KAAKoD,QACGc,MAAR/F,IACHA,EAAO6B,KAAKxB,EAAEL,KACdkC,EAASL,KAAKxB,EAAE6B,OAChBC,EAASN,KAAKxB,EAAE8B,OAChBC,EAAcP,KAAKxB,EAAE+B,aAIrB,CAACpC,EAAMkC,EAAQC,EAAQC,GAAawD,MAClCC,IAAuC,GAAjCf,OAAOe,GAAGC,OAAO,eAItB9F,EAAO,GAAKA,EAAO,IACnBkC,EAAS,GAAKA,EAAS,IACvBC,EAAS,GAAKA,EAAS,IACvBC,EAAc,GAAKA,EAAc,OAWtCV,YAAYX,UAAU8C,eAAiB,SACtC1C,EAAOU,KAAKxB,EAAEc,KACda,EAAQH,KAAKxB,EAAE2B,OAEf,OAAIH,KAAKoD,MAAcpD,KAAKoD,MACd,UAAVpD,KAAKC,EACJE,GAAS,GAAKA,GAAS,EAAU,GAChCA,EAAQ,GAAKA,GAAS,IAAOH,KAAKX,WAAWC,GAC1C,GAED,GAEH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAIE,SAASW,GAAe,GACvC,GAATA,EACCH,KAAKX,WAAWC,GAAc,GAC3B,GAED,IAYTO,YAAYX,UAAUiF,QAAU,SAAU7E,EAAO,EAAG8E,GAAY,GAC/D,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK9D,EAAM,OAAOU,KAClB,GAAIV,EAAO,EAEV,OAAOU,KAAKqE,QAAQ3G,KAAK4G,IAAIhF,IAE9B,IADAU,KAAKxB,EAAEc,OAASA,EACT8E,IAAcpE,KAAK6D,eAAe7D,KAAKuE,OAAO,GAAG,GACxD,OAAOvE,MAWRH,YAAYX,UAAUsF,SAAW,SAAUrE,EAAQ,EAAGiE,GAAY,GACjE,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKjD,EAAO,OAAOH,KACnB,GAAIG,EAAQ,EAEX,OAAOH,KAAKyE,SAAS/G,KAAK4G,IAAInE,IAC/BA,GAASA,EAET,IAAIuE,EAAsB,GAAK1E,KAAKxB,EAAE2B,MAAQ,EAC9C,GAAIuE,EAAsBvE,EACzBH,KAAKxB,EAAE2B,OAASA,MACV,CAIN,IAHAH,KAAKmE,QAAQ,GAAG,GAChBnE,KAAKxB,EAAE2B,MAAQ,EACfA,GAASuE,EACFvE,GAAS,IACfA,GAAS,GACTH,KAAKmE,QAAQ,GAAG,GAEJ,GAAThE,IACHH,KAAKxB,EAAE2B,OAASA,GAIlB,KAAOiE,IAAcpE,KAAK6D,eAAe7D,KAAKuE,OAAO,GAAG,GACxD,OAAOvE,MAWRH,YAAYX,UAAUqD,OAAS,SAAUnC,EAAM,EAAGgE,GAAY,GAC7D,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKhD,EAAK,OAAOJ,KACjB,GAAII,EAAM,EAET,OAAOJ,KAAKuE,OAAO7G,KAAK4G,IAAIlE,IAC7BA,GAAOA,EAEP,IAAIuE,EAAsB3E,KAAKgC,iBAAmBhC,KAAKxB,EAAEkB,KAAO,EAChE,GAAIiF,EAAsBvE,EACzBJ,KAAKxB,EAAEkB,MAAQU,MACT,CAIN,IAHAJ,KAAKwE,SAAS,GAAG,GACjBxE,KAAKxB,EAAEkB,KAAO,EACdU,GAAOuE,EACAvE,GAAOJ,KAAKgC,kBAClB5B,GAAOJ,KAAKgC,iBACZhC,KAAKwE,SAAS,GAAG,GAEP,GAAPpE,IACHJ,KAAKxB,EAAEkB,MAAQU,GAIjB,KAAOgE,IAAcpE,KAAK6D,eAAe7D,KAAKuE,OAAO,GAAG,GACxD,OAAOvE,MAWRH,YAAYX,UAAU0F,WAAa,SAAUC,EAAU,EAAGT,GAAY,GACrE,OAAIpE,KAAKoD,MAAcpD,KAAKoD,MACvByB,EACDA,EAAU,EAEN7E,KAAK8E,WAAWpH,KAAK4G,IAAIO,KACjCA,GAAWA,EACJ7E,KAAKwE,SAAmB,EAAVK,EAAaT,IALbpE,MAgBtBH,YAAYX,UAAU6F,QAAU,SAAUC,EAAO,EAAGZ,GAAY,GAC/D,OAAIpE,KAAKoD,MAAcpD,KAAKoD,MACvB4B,EACDA,EAAO,EAEHhF,KAAKiF,QAAQvH,KAAK4G,IAAIU,KAC9BA,GAAQA,EACDhF,KAAKuC,OAAc,EAAPyC,EAAUZ,IALXpE,MAgBnBH,YAAYX,UAAUgG,QAAU,SAAU/G,EAAO,EAAGiG,GAAY,GAC/D,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKjF,EAAM,OAAO6B,KAClB,GAAI7B,EAAO,EAEV,OAAO6B,KAAKmF,QAAQzH,KAAK4G,IAAInG,IAE9B,IADAA,GAAQA,EACDA,GAAQ,IACdA,GAAQ,GACR6B,KAAKuC,OAAO,GAAG,GAEhB,IAAI6C,EAAgB,GAAKpF,KAAKxB,EAAEL,KAOhC,IANIA,GAAQiH,GACXpF,KAAKuC,OAAO,GAAG,GACfpE,GAAQiH,EACRpF,KAAKxB,EAAEL,KAAOA,GACR6B,KAAKxB,EAAEL,MAAQA,EAEfiG,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAUoG,UAAY,SAAUjF,EAAS,EAAG+D,GAAY,GACnE,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK/C,EAAQ,OAAOL,KACpB,GAAIK,EAAS,EAEZ,OAAOL,KAAKuF,UAAU7H,KAAK4G,IAAIjE,IAEhC,IADAA,GAAUA,EACHA,GAAU,IAChBL,KAAKkF,QAAQ,GAAG,GAChB7E,GAAU,GAEX,IAAImF,EAAmB,GAAKxF,KAAKxB,EAAE6B,OAOnC,IANIA,GAAUmF,GACbxF,KAAKkF,QAAQ,GAAG,GAChB7E,GAAUmF,EACVxF,KAAKxB,EAAE6B,OAASA,GACVL,KAAKxB,EAAE6B,QAAUA,EAEjB+D,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAUuG,UAAY,SAAUnF,EAAS,EAAG8D,GAAY,GACnE,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK9C,EAAQ,OAAON,KACpB,GAAIM,EAAS,EAEZ,OAAON,KAAK0F,UAAUhI,KAAK4G,IAAIhE,IAEhC,IADAA,GAAUA,EACHA,GAAU,IAChBN,KAAKsF,UAAU,GAAG,GAClBhF,GAAU,GAEX,IAAIqF,EAAqB,GAAK3F,KAAKxB,EAAE8B,OAOrC,IANIA,GAAUqF,GACb3F,KAAKsF,UAAU,GAAG,GAClBhF,GAAUqF,EACV3F,KAAKxB,EAAE8B,OAASA,GACVN,KAAKxB,EAAE8B,QAAUA,EAEjB8D,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAU0G,eAAiB,SACtCrF,EAAc,EACd6D,GAAY,GAEZ,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK7C,EAAa,OAAOP,KACzB,GAAIO,EAAc,EAEjB,OAAOP,KAAKqF,eAAe3H,KAAK4G,IAAI/D,IAErC,IADAA,GAAeA,EACRA,GAAe,KACrBP,KAAKyF,UAAU,GAAG,GAClBlF,GAAe,IAEhB,IAAIsF,EAA0B,IAAO7F,KAAKxB,EAAE+B,YAO5C,IANIA,GAAesF,GAClB7F,KAAKyF,UAAU,GAAG,GAClBlF,GAAesF,EACf7F,KAAKxB,EAAE+B,YAAcA,GACfP,KAAKxB,EAAE+B,aAAeA,EAEtB6D,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAUmF,QAAU,SAAU/E,EAAO,EAAG8E,GAAY,GAC/D,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK9D,EAAM,OAAOU,KAElB,IADAA,KAAKxB,EAAEc,MAAQ5B,KAAK4G,IAAIhF,GACjB8E,IAAcpE,KAAK6D,eAAe7D,KAAKuE,OAAO,GAAG,GACxD,OAAOvE,MAWRH,YAAYX,UAAUuF,SAAW,SAAUtE,EAAQ,EAAGiE,GAAY,GACjE,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKjD,EAAO,OAAOH,KACnBG,EAAQzC,KAAK4G,IAAInE,GACjB,IAAI2F,EAAY9F,KAAKxB,EAAE2B,MACvB,GAAI2F,EAAY3F,EACfH,KAAKxB,EAAE2B,OAASA,MACV,CAIN,IAHAH,KAAKqE,QAAQ,GAAG,GAChBrE,KAAKxB,EAAE2B,MAAQ,GACfA,GAAS2F,EACF3F,GAAS,IACfH,KAAKqE,QAAQ,GAAG,GAChBlE,GAAS,GAEG,GAATA,IACHH,KAAKxB,EAAE2B,OAASA,GAIlB,KAAOiE,IAAcpE,KAAK6D,eAAe7D,KAAKuE,OAAO,GAAG,GACxD,OAAOvE,MAWRH,YAAYX,UAAUqF,OAAS,SAAUnE,EAAM,EAAGgE,GAAY,GAC7D,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKhD,EAAK,OAAOJ,KACjBI,EAAM1C,KAAK4G,IAAIlE,GACf,IAAI2F,EAAW/F,KAAKxB,EAAEkB,KACtB,GAAIqG,EAAW3F,EACdJ,KAAKxB,EAAEkB,MAAQU,MACT,CAIN,IAHAJ,KAAKyE,SAAS,GAAG,GACjBzE,KAAKxB,EAAEkB,KAAOM,KAAKgC,iBACnB5B,GAAO2F,EACA3F,GAAOJ,KAAKgC,kBAClB5B,GAAOJ,KAAKgC,iBACZhC,KAAKyE,SAAS,GAAG,GAElBzE,KAAKxB,EAAEkB,KAAOM,KAAKgC,iBAAmB5B,EAGvC,KAAOgE,IAAcpE,KAAK6D,eAAe7D,KAAKuE,OAAO,GAAG,GACxD,OAAOvE,MAWRH,YAAYX,UAAU4F,WAAa,SAAUD,EAAU,EAAGT,GAAY,GACrE,OAAIpE,KAAKoD,MAAcpD,KAAKoD,MACvByB,GACLA,EAAUnH,KAAK4G,IAAIO,GACZ7E,KAAKyE,SAAmB,EAAVI,EAAaT,IAFbpE,MAatBH,YAAYX,UAAU+F,QAAU,SAAUD,EAAO,EAAGZ,GAAY,GAC/D,OAAIpE,KAAKoD,MAAcpD,KAAKoD,MACvB4B,GACLA,EAAOtH,KAAK4G,IAAIU,GACThF,KAAKuE,OAAc,EAAPS,EAAUZ,IAFXpE,MAanBH,YAAYX,UAAUiG,QAAU,SAAUhH,EAAO,EAAGiG,GAAY,GAC/D,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKjF,EAAM,OAAO6B,KAElB,IADA7B,EAAOT,KAAK4G,IAAInG,GACTA,GAAQ,IACdA,GAAQ,GACR6B,KAAKuE,OAAO,GAAG,GAEhB,IAAIyB,EAAYhG,KAAKxB,EAAEL,KAOvB,IANIA,EAAO6H,GACVhG,KAAKuE,OAAO,GAAG,GACfpG,GAAQ6H,EACRhG,KAAKxB,EAAEL,KAAO,GAAKA,GACb6B,KAAKxB,EAAEL,MAAQA,EAEfiG,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAUqG,UAAY,SAAUlF,EAAS,EAAG+D,GAAY,GACnE,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK/C,EAAQ,OAAOL,KAEpB,IADAK,EAAS3C,KAAK4G,IAAIjE,GACXA,GAAU,IAChBA,GAAU,GACVL,KAAKmF,QAAQ,GAAG,GAEjB,IAAIc,EAAajG,KAAKxB,EAAE6B,OAOxB,IANIA,EAAS4F,GACZjG,KAAKmF,QAAQ,GAAG,GAChB9E,GAAU4F,EACVjG,KAAKxB,EAAE6B,OAAS,GAAKA,GACfL,KAAKxB,EAAE6B,QAAUA,EAEjB+D,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAUwG,UAAY,SAAUpF,EAAS,EAAG8D,GAAY,GACnE,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK9C,EAAQ,OAAON,KAEpB,IADAM,EAAS5C,KAAK4G,IAAIhE,GACXA,GAAU,IAChBA,GAAU,GACVN,KAAKuF,UAAU,GAAG,GAEnB,IAAIW,EAAclG,KAAKxB,EAAE8B,OAOzB,IANIA,EAAS4F,GACZlG,KAAKuF,UAAU,GAAG,GAClBjF,GAAU4F,EACVlG,KAAKxB,EAAE8B,OAAS,GAAKA,GACfN,KAAKxB,EAAE8B,QAAUA,EAEjB8D,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MAWRH,YAAYX,UAAUmG,eAAiB,SACtC9E,EAAc,EACd6D,GAAY,GAEZ,GAAIpE,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK7C,EAAa,OAAOP,KAEzB,IADAO,EAAc7C,KAAK4G,IAAI/D,GAChBA,GAAe,KACrBA,GAAe,IACfP,KAAK0F,UAAU,GAAG,GAEnB,IAAIS,EAAmBnG,KAAKxB,EAAE+B,YAO9B,IANIA,EAAc4F,GACjBnG,KAAK0F,UAAU,GAAG,GAClBnF,GAAe4F,EACfnG,KAAKxB,EAAE+B,YAAc,IAAOA,GACtBP,KAAKxB,EAAE+B,aAAeA,EAEtB6D,IAAcpE,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GAChE,OAAOrF,MASRH,YAAYX,UAAUyB,SAAW,SAAU7C,EAAS,QACnD,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAIgD,EAAQ,GAKZtI,GAJAA,EAASA,EAAOuI,QAAQ,2DAA0B,CAACC,EAASzD,KAC3DuD,EAAMG,KAAK1D,GACJ,UAEQwD,QAAQ,MAAiB,UAAVrG,KAAKC,EAAgB,IAAM,IAW1D,IAAIuG,GATH1I,EADa,UAAVkC,KAAKC,EACCnC,EACPuI,QAAQ,aAAc,uBACtBA,QAAQ,SAAU,iBAClBA,QAAQ,SAAU,SAEXvI,EACPuI,QAAQ,aAAc,oBACtBA,QAAQ,SAAU,cAClBA,QAAQ,SAAU,UACMI,MAAM,kDAC7BC,EAAa,GACjB,IAAK,MAAMC,KAAKH,EACfE,GAAc5I,EAAO8I,UAAU,EAAG9I,EAAO+I,QAAQF,KACzB,GAApBA,EAAE1C,OAAO,OAAcyC,GAAc1G,KAAKV,KAAKqH,IACxB,GAAlBA,EAAE1C,OAAO,KAAYyC,GAAc1G,KAAKG,MAAMwG,IAC5B,GAAlBA,EAAE1C,OAAO,KAAYyC,GAAc1G,KAAK6E,QAAQ8B,IAC5B,GAApBA,EAAE1C,OAAO,OAAcyC,GAAc1G,KAAKN,KAAKiH,IAC3B,GAApBA,EAAE1C,OAAO,OAAcyC,GAAc1G,KAAKgF,KAAK2B,IACzB,GAAtBA,EAAE1C,OAAO,SAAgByC,GAAc1G,KAAK7B,KAAKwI,IAC/B,GAAlBA,EAAE1C,OAAO,KAAYyC,GAAc1G,KAAKK,OAAOsG,IAC7B,GAAlBA,EAAE1C,OAAO,KAAYyC,GAAc1G,KAAKM,OAAOqG,IAC3B,GAApBA,EAAE1C,OAAO,OAAcyC,GAAc1G,KAAKO,YAAYoG,IACpC,GAAlBA,EAAE1C,OAAO,KAAYyC,GAAc1G,KAAK8G,aACpB,GAApBH,EAAE1C,OAAO,SAAcyC,IAAc,6CAAS1G,KAAKxB,EAAEL,KAAMwI,IAEpE7I,EAASA,EAAOiJ,OAAOjJ,EAAO+I,QAAQF,GAAKA,EAAE7D,QAE9C4D,GAAc5I,EACd,IAAK,IAAI6I,EAAI,EAAGA,EAAIP,EAAMtD,OAAQ6D,IACjCD,EAAaA,EAAWL,QAAQ,MAAOD,EAAMO,IAC9C,OAAO1D,OAAOyD,IAUf7G,YAAYX,UAAUI,KAAO,SAAUxB,EAAS,IAC/C,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAE3B,OADAkC,KAAKxB,EAAEc,MAAQxB,EACVkC,KAAK6D,cAGH7D,KAFCA,KAAKmE,QAAQrG,GAGf,CACDA,IAAQA,EAAmB,UAAVkC,KAAKC,EAAgB,QAAU,QACrD,IAAIX,EAAiB,UAAVU,KAAKC,EAAgBD,KAAKxB,EAAEc,KAAOY,IAAIF,KAAKiH,UAAU,GACjE,GAAc,SAAVnJ,GAA+B,MAAVA,EAAgB,OAAOwB,EAChD,GAAc,OAAVxB,EAAiB,OAAOmF,OAAO3D,GAAM4H,OAAO,GAChD,IAAI5F,EACO,UAAVtB,KAAKC,EAAgBD,KAAKiH,SAASnG,cAAgBd,KAAKxB,EAAEc,KAC3D,MAAc,QAAVxB,GAA8B,KAAVA,EAAsBwD,EAChC,MAAVxD,EAAuBmF,OAAO3B,GAAO4F,OAAO,GACzC5H,IAWTO,YAAYX,UAAUiB,MAAQ,SAAUrC,EAAS,IAChD,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,GAAIA,EAAS,EAEZ,OADAkC,KAAKxB,EAAE2B,MAAQ,EACRH,KAAKyE,SAAS3G,EAAS,GACxB,GAAIA,EAAS,GAEnB,OADAkC,KAAKxB,EAAE2B,MAAQ,GACRH,KAAKwE,SAAS1G,EAAS,IAG/B,IADAkC,KAAKxB,EAAE2B,OAASrC,GACRkC,KAAK6D,eACZ7D,KAAKuE,OAAO,GAAG,GAEhB,OAAOvE,KACD,CACDlC,IAAQA,EAAmB,UAAVkC,KAAKC,EAAgB,KAAO,KAClD,IAAIE,EAAkB,UAAVH,KAAKC,EAAgBD,KAAKxB,EAAE2B,MAAQD,IAAIF,KAAKiH,UAAU,GACnE,GAAc,OAAVnJ,EAAiB,OAAO8E,UAAUzC,EAAO,GAC7C,GAAc,MAAVrC,EAAgB,OAAOqC,EAC3B,GAAc,SAAVrC,GAA+B,QAAVA,EACxB,OAAO,wDAA6BqC,GACrC,GAAc,OAAVrC,EAAiB,OAAON,cAAc2C,GAC1C,GAAc,OAAVrC,EAAiB,OAAON,cAAc2C,EAAO,SAAU,GAC3D,IAAIoB,EACO,UAAVvB,KAAKC,EAAgBD,KAAKiH,SAASpG,WAAa,EAAIb,KAAKxB,EAAE2B,MAC5D,MAAc,KAAVrC,EAAsByD,EACZ,MAAVzD,EAAuB8E,UAAUrB,EAAQ,GAC/B,QAAVzD,EAAyB,2DAAgCyD,GAC/C,MAAVzD,GAA4B,MAAVA,EACdN,cAAc+D,EAAQ,aAChB,OAAVzD,EACI,2DAAgCyD,GAAQ2F,MAAM,EAAG,GAClD/G,IAWTN,YAAYX,UAAUQ,KAAO,SAAU5B,EAAS,IAC/C,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,IAAIqJ,EAAcnH,KAAKgC,iBACvB,GAAIlE,EAAS,EAEZ,OADAkC,KAAKxB,EAAEkB,KAAO,EACPM,KAAKuE,OAAOzG,EAAS,GACtB,GAAIA,EAASqJ,EAEnB,OADAnH,KAAKxB,EAAEkB,KAAOyH,EACPnH,KAAKuC,OAAOzE,EAASqJ,GAG7B,IADAnH,KAAKxB,EAAEkB,MAAQ5B,GACPkC,KAAK6D,eACZ7D,KAAKuE,OAAO,GAAG,GAEhB,OAAOvE,KACD,CACDlC,IAAQA,EAAmB,UAAVkC,KAAKC,EAAgB,KAAO,KAClD,IAAIP,EAAiB,UAAVM,KAAKC,EAAgBD,KAAKxB,EAAEkB,KAAOQ,IAAIF,KAAKiH,UAAU,GAEjE,GAAc,OAAVnJ,EAAiB,OAAO8E,UAAUlD,EAAM,GAC5C,GAAc,MAAV5B,EAAgB,OAAO4B,EAC3B,GAAc,OAAV5B,EAAiB,OAAON,cAAckC,GAC1C,GAAc,OAAV5B,EAAiB,OAAON,cAAckC,EAAM,SAAU,GAE1D,IAAI0H,EAAQpH,KAAKiH,SACjB,GAAc,SAAVnJ,GAA+B,QAAVA,EAAkB,OAAO6D,YAAYyF,GAC9D,GAAc,OAAVtJ,EAAiB,OAAO6D,YAAYyF,GAAOF,MAAM,EAAG,GACxD,IAAIG,EAAYvF,aAAasF,GAC7B,GAAc,OAAVtJ,EAAiB,OAAON,cAAc6J,GAC1C,GAAc,OAAVvJ,EAAiB,OAAON,cAAc6J,EAAW,SAAU,GAC/D,GAAc,MAAVvJ,EAAgB,OAAOgE,aAAasF,EAAO,SAAU,SACzD,GAAc,OAAVtJ,EAAiB,OAAOuJ,EAE5B,IAAIC,EAAYvF,aACf/B,KAAKV,KAAK,MACVU,KAAKG,MAAM,MACXT,EACA,KAED,MAAc,SAAV5B,EAA0B8E,UAAU0E,EAAW,GACrC,QAAVxJ,EAAyBwJ,EACf,SAAVxJ,EAA0BN,cAAc8J,GAC9B,SAAVxJ,EAA0BN,cAAc8J,EAAW,SAAU,GAEnD,MAAVxJ,EAAuB8E,UAAUwE,EAAMxG,UAAW,GACxC,KAAV9C,EAAsBsJ,EAAMxG,UAClB,MAAV9C,GAA4B,MAAVA,EACdN,cAAc4J,EAAMxG,UAAW,aAEzB,QAAV9C,EAAyB6D,YAAYyF,EAAO,aAClC,OAAVtJ,EAAwB6D,YAAYyF,EAAO,aAAaF,MAAM,EAAG,GACvD,MAAVpJ,EAAuB6D,YAAYyF,EAAO,aAAaF,MAAM,EAAG,IACpEG,EAAYvF,aAAasF,EAAO,aAClB,MAAVtJ,GAA4B,MAAVA,EACdN,cAAc6J,EAAW,aACnB,KAAVvJ,EAAsBgE,aAAasF,EAAO,YAAa,SAC7C,MAAVtJ,EAAuBuJ,GAC3BC,EAAYvF,aACXqF,EAAMtG,cACNsG,EAAMvG,WAAa,EACnBuG,EAAMxG,UACN,KAGa,QAAV9C,EAAyB8E,UAAU0E,EAAW,GACpC,OAAVxJ,EAAwBwJ,EACd,QAAVxJ,GAA8B,QAAVA,EAChBN,cAAc8J,EAAW,aAC1B5H,MAWTG,YAAYX,UAAU2F,QAAU,SAAU/G,EAAS,IAClD,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,GAAIA,EAAS,EAEZ,OADAkC,KAAKxB,EAAE2B,MAAQ,EACRH,KAAK8E,WAAWhH,EAAS,GAC1B,GAAIA,EAAS,EAEnB,OADAkC,KAAKxB,EAAE2B,MAAQ,GACRH,KAAK4E,WAAW9G,EAAS,GAGjC,IADAkC,KAAKxB,EAAE2B,MAAkB,GAATrC,EAAa,GACrBkC,KAAK6D,eACZ7D,KAAKuE,OAAO,GAAG,GAEhB,OAAOvE,KACD,CACDlC,IAAQA,EAAmB,UAAVkC,KAAKC,EAAgB,KAAO,KAClD,IAAI4E,EAAUnH,KAAK8E,MACP,UAAVxC,KAAKC,EAAgBD,KAAKxB,EAAE2B,MAAQD,IAAIF,KAAKiH,UAAU,IAAM,GAE/D,MAAc,MAAVnJ,EAAuB+G,EACb,OAAV/G,EAAwBN,cAAcqH,GAC5B,OAAV/G,EAAwBN,cAAcqH,EAAS,SAAU,IAC7DA,EAAUnH,KAAK8E,MACH,UAAVxC,KAAKC,EAAgBD,KAAKiH,SAASpG,WAAa,EAAIb,KAAKxB,EAAE2B,OAAS,GAExD,KAAVrC,EAAsB+G,EACZ,MAAV/G,GAA4B,MAAVA,EACdN,cAAcqH,EAAS,aACxBA,KAWThF,YAAYX,UAAU8F,KAAO,SAAUlH,EAAS,IAC/C,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,IAAI4E,EAAc1C,KAAK2C,iBACvB,GAAI7E,EAAS,EAEZ,OADAkC,KAAKgF,KAAK,GACHhF,KAAKiF,QAAQnH,EAAS,GACvB,GAAIA,EAAS4E,EAEnB,OADA1C,KAAKgF,KAAKtC,GACH1C,KAAK+E,QAAQjH,EAAS4E,GAE9B,IAAI6E,EAAatF,cAChBjC,KAAKxB,EAAEc,KACPU,KAAKxB,EAAE2B,MACPH,KAAKxB,EAAEkB,KACPM,KAAKC,GAGN,IADAD,KAAK+E,SAASjH,EAASyJ,IACfvH,KAAK6D,eACZ7D,KAAKuE,OAAO,GAAG,GAEhB,OAAOvE,KACD,CACDlC,IAAQA,EAAmB,UAAVkC,KAAKC,EAAgB,KAAO,KAClD,IAAIP,EACO,UAAVM,KAAKC,EACF,CAACD,KAAKxB,EAAEc,KAAMU,KAAKxB,EAAE2B,MAAOH,KAAKxB,EAAEkB,MACnCQ,IAAIF,KAAKiH,UACTM,EAAatF,cAAcvC,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIM,KAAKC,GAC/D,MAAc,MAAVnC,GAA4B,MAAVA,EAAuByJ,EAC/B,OAAVzJ,GAA6B,OAAVA,EAAwB8E,UAAU2E,EAAY,GACvD,OAAVzJ,GAA6B,OAAVA,EAAwBN,cAAc+J,GAC/C,OAAVzJ,GAA6B,OAAVA,EACfN,cAAc+J,EAAY,SAAU,IAC5CA,EAAatF,cACZjC,KAAKV,KAAK,KACVU,KAAKG,MAAM,KACXH,KAAKN,KAAK,KACV,aAEa,KAAV5B,GAA2B,KAAVA,EAAsByJ,EAC7B,MAAVzJ,GAA4B,MAAVA,EAAuB8E,UAAU2E,EAAY,GACrD,MAAVzJ,GAA4B,MAAVA,GAA4B,MAAVA,GAA4B,MAAVA,EAClDN,cAAc+J,EAAY,aAC3BA,KAWT1H,YAAYX,UAAUf,KAAO,SAAUL,EAAS,KAC/C,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,GAAIA,EAAS,EAEZ,OADAkC,KAAKxB,EAAEL,KAAO,EACP6B,KAAKmF,QAAQrH,EAAS,GACvB,GAAIA,EAAS,GAEnB,OADAkC,KAAKxB,EAAEL,KAAO,GACP6B,KAAKkF,QAAQpH,EAAS,IAG9B,IADAkC,KAAKxB,EAAEL,MAAQL,GACPkC,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GACnD,OAAOrF,KACD,CACN,IAAI7B,EAAO6B,KAAKxB,EAAEL,KAClB,MAAc,KAAVL,EAAsBK,EACZ,MAAVL,EAAuB8E,UAAUzE,EAAM,GAC7B,KAAVL,EAAsBK,GAAQ,GACpB,MAAVL,EAAuB8E,UAAUzE,GAAQ,GAAI,IACjDA,EAAOA,EAAO,GAAKA,EAAO,GAAKA,EACjB,KAAVL,EAAsBK,EACZ,MAAVL,EAAuB8E,UAAUzE,EAAM,GACpCA,KAWT0B,YAAYX,UAAUmB,OAAS,SAAUvC,EAAS,KACjD,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,GAAIA,EAAS,GAAKA,EAAS,GAAI,OAAOkC,KAAKsF,UAAUxH,GAErD,IADAkC,KAAKxB,EAAE6B,QAAUvC,GACTkC,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GACnD,OAAOrF,KAEP,MAAc,KAAVlC,EAAsBkC,KAAKxB,EAAE6B,OACnB,MAAVvC,EAAuB8E,UAAU5C,KAAKxB,EAAE6B,OAAQ,GAC7CL,KAAKxB,EAAE6B,QAWhBR,YAAYX,UAAUoB,OAAS,SAAUxC,EAAS,KACjD,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,GAAIA,EAAS,GAAKA,EAAS,GAAI,OAAOkC,KAAKyF,UAAU3H,GAErD,IADAkC,KAAKxB,EAAE8B,QAAUxC,GACTkC,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GACnD,OAAOrF,KAEP,MAAc,KAAVlC,EAAsBkC,KAAKxB,EAAE8B,OACnB,MAAVxC,EAAuB8E,UAAU5C,KAAKxB,EAAE8B,OAAQ,GAC7CN,KAAKxB,EAAE8B,QAWhBT,YAAYX,UAAUqB,YAAc,SAAUzC,EAAS,KACtD,GAAIkC,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADAtF,EAASmF,OAAOnF,GAAQkJ,OACpB,yDAAwBlJ,GAAS,CACpC,GAAIA,EAAS,GAAKA,EAAS,IAAK,OAAOkC,KAAK4F,eAAe9H,GAE3D,IADAkC,KAAKxB,EAAE+B,aAAezC,GACdkC,KAAK8D,eAAe9D,KAAKqF,eAAe,GAAG,GACnD,OAAOrF,KAEP,MAAc,OAAVlC,GAA6B,KAAVA,EAAsBkC,KAAKxB,EAAE+B,YACtC,QAAVzC,EAAyB8E,UAAU5C,KAAKxB,EAAE+B,YAAa,GACpDP,KAAKxB,EAAE+B,aAWhBV,YAAYX,UAAU4H,UAAY,SAAUU,GAC3C,OAAIxH,KAAKoD,MAAcpD,KAAKoD,MACxBoE,EACIxH,KAAK0D,eAAeT,OAAOuE,GAAOR,QAElChH,KAAKiH,SAASQ,WAWvB5H,YAAYX,UAAUoD,MAAQ,WAC7B,OAAO1D,OAAO8I,OACb9I,OAAO+I,OAAO/I,OAAOgJ,eAAe5H,OACpC6H,KAAKzF,MAAMyF,KAAKC,UAAU9H,SAsC5BH,YAAYX,UAAU6I,OAAS,YAAarI,GAC3C,OAAIM,KAAKoD,QACT1D,EAAOsI,aAAahI,KAAKC,KAAMP,GAC/BA,EAAOM,KAAKiI,UAAUC,KAAI,CAACV,EAAOb,IACjC,yDAAwBjH,EAAKiH,IAAMjH,EAAKiH,GAAKa,MAG1CxH,KAAK4D,WAAWlE,IAElBM,KAAKsC,QACHF,SAAS1C,GACToH,aAAe9G,KAAK8G,cAyCzB,MAAMkB,aAAe,SACpBzI,EACAD,EACAa,EACAT,EACAvB,EACAkC,EACAC,EACAC,GASA,OAPKjB,IAEJA,EAAmB,UAAZC,EAAuBW,MAAQ,IAAIP,MACxB,iBAARL,IAAyD,GAArCA,EAAK2E,OAAO,wDAE1C3E,EAAOA,EAAK6I,MAAM,eAEf7I,aAAgBO,YAEZP,EAAKC,SAASA,GAAU0I,UACvB3I,aAAgBK,KAEjB,IAAIE,YAAYP,GAAMC,SAASA,GAAU0I,UACC,mBAAzCrJ,OAAOM,UAAUyB,SAASvB,KAAKE,GAEhCA,EAC0C,oBAAzCV,OAAOM,UAAUyB,SAASvB,KAAKE,GAEhC,CACNA,EAAK8I,GAAK9I,EAAKA,MAAQA,EAAK+I,MAC5B/I,EAAKgJ,GAAKhJ,EAAKa,OAASb,EAAKrE,QAAU,EACvCqE,EAAKd,GAAKc,EAAKc,KAAOd,EAAKxD,MAAQwD,EAAKI,MAAQ,EAChDJ,EAAKiJ,GAAKjJ,EAAKnB,MAAQmB,EAAKkJ,OAAS,EACrClJ,EAAKmJ,GAAKnJ,EAAKe,QAAUf,EAAKoJ,SAAW,EACzCpJ,EAAKqJ,GAAKrJ,EAAKgB,QAAUhB,EAAKsJ,SAAW,EACzCtJ,EAAKuJ,IAAMvJ,EAAKiB,aAAejB,EAAKwJ,cAAgB,GAE/C,CAACxJ,EAAMa,EAAOT,EAAMvB,EAAMkC,EAAQC,EAAQC,IAqClDV,YAAYX,UAAU6J,SAAW,YAAarJ,GAC7C,OAAIM,KAAKoD,OACF4F,YAAYhJ,KAAM,IAAKN,IAqC/BG,YAAYX,UAAU+J,QAAU,YAAavJ,GAC5C,OAAIM,KAAKoD,OACF4F,YAAYhJ,KAAM,IAAKN,IAwC/BG,YAAYX,UAAUgK,SAAW,WAChC,GAAIlJ,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK+F,UAAUrG,OACd,OAAO9C,KAAKxB,EAEb,IAAI4K,EAAUpB,aAAahI,KAAKC,KAAMkJ,WACtC,MAAO,CACN7J,KAAMU,KAAKV,KAAK8J,EAAQ,IACxBjJ,MAAOH,KAAKG,MAAMiJ,EAAQ,IAC1B1J,KAAMM,KAAKN,KAAK0J,EAAQ,IACxBjL,KAAM6B,KAAK7B,KAAKiL,EAAQ,IACxB/I,OAAQL,KAAKK,OAAO+I,EAAQ,IAC5B9I,OAAQN,KAAKM,OAAO8I,EAAQ,IAC5B7I,YAAaP,KAAKO,YAAY6I,EAAQ,MAUxCvJ,YAAYX,UAAUO,OAASA,OAQ/BI,YAAYX,UAAUU,cAAgBA,cAoCtCC,YAAYX,UAAUmK,eAAiB,YAAa3J,GACnD,OAAIM,KAAKoD,OACF4F,YAAYhJ,KAAM,KAAMN,IAqChCG,YAAYX,UAAUoK,cAAgB,YAAa5J,GAClD,OAAIM,KAAKoD,OACF4F,YAAYhJ,KAAM,KAAMN,IAuDhCG,YAAYX,UAAUqK,UAAY,SAAUC,EAAMC,EAAIC,EAAS,MAC9D,GAAI1J,KAAKoD,MAAO,OAAO,EAEvBoG,EAAOxB,aAAahI,KAAKC,EAAGuJ,GAC5B,IAAI9J,EAAOM,KAAKiI,UA8BhB,OA7BKuB,EAAK,KAAI9J,EAAK,GAAK,GAExB8J,EAAO9J,EAAKwI,KAAI,CAACV,EAAOb,IACvB,yDAAwB6C,EAAK7C,IAAM6C,EAAK7C,GAAKa,IAY9CiC,EAAKzB,aAAahI,KAAKC,EAAGwJ,GAU1BA,EAAK/J,EAAKwI,KAAI,CAACV,EAAOb,IACrB,yDAAwB8C,EAAG9C,IAAM8C,EAAG9C,GAAKa,OAGpCxH,KAAK4D,WAAW4F,KAASxJ,KAAK4D,WAAW6F,KAG9CT,YAAYhJ,KAAoB,MAAd0J,EAAO,GAAa,KAAO,IAAKF,IAClDR,YAAYhJ,KAAoB,MAAd0J,EAAO,GAAa,KAAO,IAAKD,IA2CpD5J,YAAYX,UAAUyK,IAAM,WAC3B,OAAOC,cAAcT,UAAWnJ,KAAM,QAgCvCH,YAAYX,UAAU2K,IAAM,WAC3B,OAAOD,cAAcT,UAAWnJ,KAAM,QAkCvCH,YAAYX,UAAUuD,KAAO,SAAU/C,EAAMoK,EAAMC,GAAS,GAC3D,GAAI/J,KAAKoD,MAAO,OAAOpD,KAAKoD,MAE5B,GADA1D,EAAOsI,aAAahI,KAAKC,EAAGP,IACvBM,KAAK4D,WAAWlE,GAAO,MAAO,gBACnC,IAAIsK,EACHhK,KAAK8G,YACL9G,KAAKsC,QACHF,SAAS1C,GACToH,YACH,OAAQgD,GACP,IAAK,IACL,IAAK,OACL,IAAK,QACJE,EAAShK,KAAKxB,EAAEc,KAAOI,EAAK,GAC5B,MACD,IAAK,IACL,IAAK,QACL,IAAK,SACJsK,EAAuB,GAAdhK,KAAKxB,EAAEc,KAAYU,KAAKxB,EAAE2B,OAAoB,IAAVT,EAAK,KAAWA,EAAK,IAClE,MACD,IAAK,IACL,IAAK,OACL,IAAK,MACL,IAAK,OACJsK,EAAStM,KAAK8E,KAAKwH,EAAS,IAAO,GAAK,GAAK,IAC7C,MACD,IAAK,IACL,IAAK,OACL,IAAK,QACJA,EAAStM,KAAK8E,KAAKwH,EAAS,IAAO,GAAK,IACxC,MACD,IAAK,IACL,IAAK,SACL,IAAK,UACJA,EAAStM,KAAK8E,KAAKwH,EAAS,IAAO,IACnC,MACD,IAAK,IACL,IAAK,SACL,IAAK,UACJA,EAAStM,KAAK8E,KAAKwH,EAAS,KAM9B,OAAOD,EAASC,GAAUA,GAAU,EAAI,GAAK,GAAKA,GAwCnDnK,YAAYX,UAAU+I,QAAU,WAC/B,GAAIjI,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAK+F,UAAUrG,OACd,OAAOlE,OAAOqL,OAAOjK,KAAKxB,GAE3B,IAAI4K,EAAUpB,aAAahI,KAAKC,KAAMkJ,WACtC,MAAO,CACNnJ,KAAKV,KAAK8J,EAAQ,IAClBpJ,KAAKG,MAAMiJ,EAAQ,IACnBpJ,KAAKN,KAAK0J,EAAQ,IAClBpJ,KAAK7B,KAAKiL,EAAQ,IAClBpJ,KAAKK,OAAO+I,EAAQ,IACpBpJ,KAAKM,OAAO8I,EAAQ,IACpBpJ,KAAKO,YAAY6I,EAAQ,MAoC3BvJ,YAAYX,UAAUgL,cAAgB,SAAUxK,EAAMyK,GAAS,GAC9D,GAAInK,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAI4G,EAAShK,KAAKyC,KAAK/C,EAAM,KAC7B,GAAqB,iBAAVsK,EAAoB,MAAO,gBACtC,IAAIjH,EAASiH,EAAS,EAAI,QAAU,MAGpC,OAFAA,EAAStM,KAAK4G,IAAI0F,GAEJ,GAAVA,EAAoB,YACFA,EAAbA,EAAS,GAAa,SACrBA,GAAU,IAAM,GAEhBtM,KAAK0M,MAAMJ,GAAXtM,UACAsM,GAAU,IAAM,KAEhBtM,KAAK0M,MAAMJ,GAAXtM,SACAsM,GAAU,IAAM,GAEhBtM,KAAK0M,MAAMJ,GAAXtM,OACDsM,EAAS,IAActM,KAAK0M,MAAMJ,EAAS,IAApBtM,OAClBA,KAAK0M,MAAMJ,EAAS,KAApBtM,OACPsM,GAAUG,EAAS,IAAMpH,EAAS,MAsC1ClD,YAAYX,UAAUyE,WAAa,YAAajE,GAoB/C,OAnBIM,KAAKoD,eACDpD,KAAKoD,MACZpD,KAAKxB,EAAI,IAI4BkB,EADjCA,EAAKoD,OACD9C,KAAKJ,cAAcF,EAAK,IAAYA,EAAK,GAAGuI,UACzCD,aAAahI,KAAKC,KAAMP,GAFXQ,MAGX,UAAVF,KAAKC,GAERD,KAAKxB,EAAEc,MAAQI,EAAK,GACpBM,KAAKxB,EAAE2B,OAAST,EAAK,IAAM,EAC3BM,KAAKxB,EAAEkB,MAAQA,EAAK,IAAM,EAC1BM,KAAKxB,EAAEL,MAAQuB,EAAK,IAAM,EAC1BM,KAAKxB,EAAE6B,QAAUX,EAAK,IAAM,EAC5BM,KAAKxB,EAAE8B,QAAUZ,EAAK,IAAM,EAC5BM,KAAKxB,EAAE+B,aAAeb,EAAK,IAAM,GAC3B6D,iBAAiBlC,OAAO3B,GAAOM,MAEjCA,KAAK4D,UACH5D,KADqB6B,UAAU,gBAAiB7B,OAuCxDH,YAAYX,UAAUwE,cAAgB,YAAahE,GAoBlD,GAnBIM,KAAKoD,eACDpD,KAAKoD,MACZpD,KAAKxB,EAAI,IAGLkB,EAAKoD,SAAQpD,EAAK,IAAK,IAAIC,MAAO8H,WACnCzH,KAAKJ,cAAcF,EAAK,IAC3BA,EAAOA,EAAK,GAAGuI,UACJoC,YAAY3K,EAAK,OAC5BA,EAAOsI,aAAahI,KAAKC,KAAMP,IAC1B,IAAMA,EAAK,IAAM,EACtBA,EAAK,IAAMA,EAAK,IAAM,EACtBA,EAAK,IAAMA,EAAK,IAAM,EACtBA,EAAK,IAAMA,EAAK,IAAM,EACtBA,EAAK,IAAMA,EAAK,IAAM,EACtBA,EAAK,IAAMA,EAAK,IAAM,GAEvBA,EAAK,IAAMA,EAAK,GAEZA,EAAKoD,OAAS,EAAG,CACpB,IAAK9C,KAAK4D,WAAWlE,GAAO,OAAOmC,UAAU,gBAAiB7B,QAC5DN,EAAK,GAIR,MAAY,iBADZA,EAAO,IAAIC,QAAQD,IACgBmC,UAAU,gBAAiB7B,OAChD,UAAVA,KAAKC,EAAeqD,cAAcpD,IAAIR,GAAOM,MAC5CuD,iBAAiB7D,EAAMM,MACrBA,OASRH,YAAYX,UAAUK,SAAW,SAAUA,GAC1C,OAAKA,GACc,KAAfA,EAAS,IAA0B,KAAbS,KAAKC,EAAE,IAC3BD,KAAKoD,OAAOE,cAAcpD,IAAIF,KAAKiH,UAAWjH,MACnDA,KAAKC,EAAI,UACgB,KAAfV,EAAS,IAA0B,KAAbS,KAAKC,EAAE,KAClCD,KAAKoD,OAAOG,iBAAiBvD,KAAKiH,SAAUjH,MACjDA,KAAKC,EAAI,aAEHD,MAReA,KAAKC,GAiB5BJ,YAAYX,UAAUyD,eAAiB,SAAUrD,GAChD,GAAIU,KAAKoD,MAAO,OAAOpD,KAAKoD,MACvB9D,IAAMA,EAAOU,KAAKV,QAEvB,IAAI4C,EAA4B,UAAVlC,KAAKC,EAAgB,KAAO,IAC9CkC,EAAcnC,KAAKsC,QAAQF,MAAM9C,GACjC+C,EAAiBF,EAAYzC,KAAKwC,GAClCoI,EAAanI,EAAYG,QAAQ6B,UAAUI,SAC3CgG,EAAgBD,EAAW5K,KAAKwC,GAMpC,OALIG,EAAiB,EAAGF,EAAYI,OAAO,EAAIF,GAC1CF,EAAYoC,OAAOlC,GAEpBkI,EAAgB,EAAGD,EAAW/H,OAAO,EAAIgI,GACxCD,EAAW/F,OAAOgG,GAChB7M,KAAK8E,KAAK8H,EAAW7H,KAAKN,EAAa,QAAU,IASzDtC,YAAYX,UAAU+H,OAAS,WAC9B,GAAIjH,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,GAAc,UAAVpD,KAAKC,EAAe,OAAOoB,OAAOrB,KAAKiI,WAC3C,IAAIvI,EAAOM,KAAKiI,UAEhB,QADEvI,EAAK,GACA,IAAIC,QAAQD,IASpBG,YAAYX,UAAUsL,QAAU,SAAUV,EAAO,QAEhD,OADA9J,KAAKxB,EAAE+B,YAAc,EACN,KAAXuJ,EAAK,GAAkB9J,MAC3BA,KAAKxB,EAAE8B,OAAS,EACJ,KAARwJ,GAAuB,UAARA,EAAyB9J,MAC5CA,KAAKxB,EAAE6B,OAAS,EACD,KAAXyJ,EAAK,GAAkB9J,MAC3BA,KAAKxB,EAAEL,KAAO,EACC,KAAX2L,EAAK,GAAkB9J,KACZ,KAAX8J,EAAK,GACD9J,KAAKuE,OAAOzC,aAAa9B,KAAKiH,SAAUjH,KAAKC,EAAG,WACxDD,KAAKxB,EAAEkB,KAAO,EACC,KAAXoK,EAAK,GACD9J,KAAK6E,QAAQ7E,KAAK6E,WACd,KAARiF,GAAuB,SAARA,EAAwB9J,MAC3CA,KAAKxB,EAAE2B,MAAQ,EACA,KAAX2J,EAAK,GAAkB9J,UAA3B,QASDH,YAAYX,UAAUuL,MAAQ,SAAUX,EAAO,QAE9C,OADA9J,KAAKxB,EAAE+B,YAAc,IACN,KAAXuJ,EAAK,GAAkB9J,MAC3BA,KAAKxB,EAAE8B,OAAS,GACJ,KAARwJ,GAAuB,UAARA,EAAyB9J,MAC5CA,KAAKxB,EAAE6B,OAAS,GACD,KAAXyJ,EAAK,GAAkB9J,MAC3BA,KAAKxB,EAAEL,KAAO,GACC,KAAX2L,EAAK,GAAkB9J,KACZ,KAAX8J,EAAK,GACD9J,KAAKuC,OAAO,EAAIT,aAAa9B,KAAKiH,SAAUjH,KAAKC,IAC1C,KAAX6J,EAAK,IACR9J,KAAK6E,QAAQ7E,KAAK6E,WAAWL,SAAS,GACtCxE,KAAKxB,EAAEkB,KAAOM,KAAKgC,iBACZhC,OAERA,KAAKxB,EAAEkB,KAAOM,KAAKgC,iBACP,KAAR8H,GAAuB,SAARA,EAAwB9J,MAC3CA,KAAKxB,EAAE2B,MAAQ,GACfH,KAAKxB,EAAEkB,KAAOM,KAAKgC,iBACJ,KAAX8H,EAAK,GAAkB9J,UAA3B,QAGDH,YAAYX,UAAUwL,QAAU,WAC/B,OAAO1K,KAAK8G,aAyBbjH,YAAYX,UAAUyL,KAAO,YAAaA,GACzC,GAAI3K,KAAKoD,MAAO,OAAOpD,KAAKoD,MAC5B,IAAKuH,EAAK7H,OACT,OAAO9C,KAAKiI,UAAUf,MAAM,GAC7B,IAAI0D,EAAQ,GAmBZ,OAjBCA,EADGD,EAAK,aAAc9K,YACd8K,EAAK,GAAGpL,SAASS,KAAKC,GAAG0K,OACzBA,EAAK,aAAchL,KACnB,CACPgL,EAAK,GAAG5J,WACR4J,EAAK,GAAG3J,aACR2J,EAAK,GAAG1J,aACR0J,EAAK,GAAGzJ,mBAE2C,oBAA5CtC,OAAOM,UAAUyB,SAASvB,KAAKuL,EAAK,IACpC,CACPA,EAAK,GAAGpC,GAAKoC,EAAK,GAAGxM,MAAQwM,EAAK,GAAGnC,OAAS,EAC9CmC,EAAK,GAAGlC,GAAKkC,EAAK,GAAGtK,QAAUsK,EAAK,GAAGjC,SAAW,EAClDiC,EAAK,GAAGhC,GAAKgC,EAAK,GAAGrK,QAAUqK,EAAK,GAAG/B,SAAW,EAClD+B,EAAK,GAAG9B,IAAM8B,EAAK,GAAGpK,aAAeoK,EAAK,GAAG7B,cAAgB,GAGtDd,aAAahI,KAAKC,KAAM0K,GAC7B3K,KAAK8D,eAAe8G,GAChB5K,KAAK7B,KAAKyM,EAAM,IAAM,GAAGvK,OAAOuK,EAAM,IAAM,GAAGtK,OAAOsK,EAAM,IAAM,GAAGrK,YAAYqK,EAAM,IAAM,GAG7F/I,UAAU,gBAAiB7B,OAQpC,MAAMyD,UAAaoH,IAClBC,QAAQC,KAAKF,IASRR,YAAevD,IACZkE,MAAMlE,IAAcpJ,KAAKC,MAAMmJ,EAAY,KAAS,EASvDvD,iBAAmB,CAAC7D,EAAMyD,KAC/BA,EAAS3E,EAAI,CACZc,KAAMI,EAAKoB,cACXX,MAAOT,EAAKmB,WAAa,EACzBnB,KAAMA,EAAKkB,UACXzC,KAAMuB,EAAKqB,WACXV,OAAQX,EAAKsB,aACbV,OAAQZ,EAAKuB,aACbV,YAAab,EAAKwB,oBAUdoC,cAAgB,CAAC5D,EAAMyD,MAE3BA,EAAS3E,EAAEc,KACX6D,EAAS3E,EAAE2B,MACXgD,EAAS3E,EAAEkB,KACXyD,EAAS3E,EAAEL,KACXgF,EAAS3E,EAAE6B,OACX8C,EAAS3E,EAAE8B,OACX6C,EAAS3E,EAAE+B,aACRb,GAWCsJ,YAAc,CAAC7F,SAAU8H,SAAUvL,QACxCA,KAAOsI,aAAa7E,SAASlD,KAAMP,QAE/ByD,SAASS,WAAWlE,OAChBwL,KACN,uBACAD,SACA,gDAcGrB,cAAgB,CAACK,OAAQ9G,SAAUgI,aACxC,IAAKlB,OAAOnH,OACX,OAAO,EAER,IAAIsI,KAAOxM,OAAOqL,OAAOA,QAAQoB,SAC7BC,WAAaF,KAAKlD,KAAKxI,IAC1BA,EAAOsI,aAAa7E,SAASlD,EAAGP,KAC5ByD,SAASS,WAAWlE,IAChByD,SACLb,QACAF,SAAS1C,GACToH,eAGJ,OAAkC,GAA9BwE,WAAWzE,SAAQ,IAChBqE,KACN,gCAAkCC,UAAY,sBAI5CpL,aAAaC,KAAKT,SAASQ,aAC3BD,QACCC,aAAiC,KAAlBA,YAAY,GAAWC,KAAK2D,WAAW7D,SACrDE,KAAK0D,cAAc5D,SAClBE,KAAKqD,OAUbxD,YAAY0L,UAAUlM,WAAaA,WASnCQ,YAAY0L,UAAU9L,OAASA,OAS/BI,YAAY0L,UAAU3L,cAAgBA,cAUtC,8C","file":"PersianDate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PersianDate\"] = factory();\n\telse\n\t\troot[\"PersianDate\"] = factory();\n})(global, function() {\nreturn ","const CALENDAR = {\n    jalali: {\n        months: {\n            1: \"فروردین\",\n            2: \"اردیبهشت\",\n            3: \"خرداد\",\n            4: \"تیر\",\n            5: \"مرداد\",\n            6: \"شهریور\",\n            7: \"مهر\",\n            8: \"آبان\",\n            9: \"آذر\",\n            10: \"دی\",\n            11: \"بهمن\",\n            12: \"اسفند\",\n        },\n        days: {\n            label: {\n                6: \"شنبه\",\n                0: \"یکشنبه\",\n                1: \"دوشنبه\",\n                2: \"سه‌شنبه\",\n                3: \"چهارشنبه\",\n                4: \"پنجشنبه\",\n                5: \"جمعه\",\n            },\n            weekNumber: { // days in jalali calendar start from saturday or 6\n                6: 0,  //شنبه\n                0: 1,  //یکشنبه\n                1: 2,  //دوشنبه\n                2: 3,  //سه‌شنبه\n                3: 4,  //چهارشنبه\n                4: 5,  //پنجشنبه\n                5: 6,  //جمعه\n            },\n        },\n        ordinalNumbers: function (number, mode) {\n            const numbers = {\n                1: 'یک',\n                2: 'دو',\n                3: 'سو',\n                4: 'چهار',\n                5: 'پنج',\n                6: 'شش',\n                7: 'هفت',\n                8: 'هشت',\n                9: 'نه',\n                10: 'ده',\n                11: 'یازده',\n                12: 'دوازده',\n                13: 'سیزده',\n                14: 'چهارده',\n                15: 'پانزده',\n                16: 'شانزده',\n                17: 'هفده',\n                18: 'هجده',\n                19: 'نوزده',\n                20: 'بیست',\n                30: 'سی‌',\n                40: 'چهل',\n                50: 'پنجاه',\n                60: 'شصت',\n                70: 'هفتاد',\n                80: 'هشتاد',\n                90: 'نود',\n                100: 'صد',\n                200: 'دویست',\n                300: 'سیصد',\n            }\n            let ordinalNumber = '';\n            if (number == 1)\n                ordinalNumber = 'اول';\n            else if (numbers[number])\n                ordinalNumber = numbers[number] + (number == 30 ? 'ام' : 'م')\n            else {\n                let remainder = number % 10;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + 'م';\n                remainder = (number - remainder) % 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : (remainder == 30 ? 'ام ' : 'م'));\n                remainder = Math.floor(number / 100) * 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : 'م');\n            }\n            if (mode == 2)\n                ordinalNumber += 'ین';\n            return ordinalNumber;\n        },\n    },\n    gregorian: {\n        months: {\n            1: \"January\",\n            2: \"February\",\n            3: \"March\",\n            4: \"April\",\n            5: \"May\",\n            6: \"June\",\n            7: \"July\",\n            8: \"August\",\n            9: \"September\",\n            10: \"October\",\n            11: \"November\",\n            12: \"December\",\n        },\n        days: {\n            label: {\n                0: \"Sunday\",\n                1: \"Monday\",\n                2: \"Tuesday\",\n                3: \"Wednesday\",\n                4: \"Thursday\",\n                5: \"Friday\",\n                6: \"Saturday\",\n            },\n            weekNumber: { // days in gregorian calendar start from sunday or 0\n                0: 0, // Sunday\n                1: 1, // Monday\n                2: 2, // Tuesday\n                3: 3, // Wednesday\n                4: 4, // Thursday\n                5: 5, // Friday\n                6: 6, // Saturday\n            },\n        },\n        ordinalNumbers: function (number) {\n            if (number == 1 || number % 10 == 1 && number != 11)\n                return number + 'st';\n            else if (number == 2 || number % 10 == 2 && number != 12)\n                return number + 'nd';\n            else if (number == 3 || number % 10 == 3 && number != 13)\n                return number + 'rd';\n            else\n                return number + 'th';\n        },\n    }\n}\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n    betweenBacktick: /`(.*?)`/g, // find the texts between the backticks ==> `Alireza`\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour >= 12 && hour < 24) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\nexport { CALENDAR, TIMETYPE, REGEX };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\nimport { CALENDAR, TIMETYPE, REGEX } from \"./utils.js\";\n\nconst isLeapYear = function (year, calendar) {\n\tif (calendar[0] === \"j\") {\n\t\tlet array =\n\t\t\tyear > 1342\n\t\t\t\t? [1, 5, 9, 13, 17, 22, 26, 30]\n\t\t\t\t: [1, 5, 9, 13, 17, 21, 26, 30];\n\t\tlet remainder = year % 33;\n\t\treturn array.includes(remainder);\n\t} else {\n\t\treturn (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n\t}\n};\n\nconst isDate = function (date) {\n\treturn date instanceof Date;\n};\n\nconst isPersianDate = function (date) {\n\treturn date instanceof PersianDate;\n};\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {Date|Array|Null|Object|String} date - the date that convert to persian date\n * @param {String} [calendar='jalali'] - the calendar\n */\nconst PersianDate = function (dateVal, calendarVal) {\n\t\"use strict\";\n\n\t/**\n\t * keeps the date and time\n\t * @type {Object}\n\t * @property {Number} year - the year of date\n\t * @property {Number} month - the month of date\n\t * @property {Number} date - the day of month of date\n\t * @property {Number} hour - the hour of time\n\t * @property {Number} minute - the minute of time\n\t * @property {Number} second - the second of time\n\t * @property {Number} millisecond - the millisecond of time\n\t * @property {Number} gregorian - the gregorian date\n\t */\n\tthis.d = {};\n\n\t/**\n\t * the calendar type\n\t * @type {String}\n\t * @default \"jalali\"\n\t * @example jalali | gregorian\n\t */\n\tthis.c = \"jalali\";\n\n\t/**\n\t * Gregorian to Jalali\n\t * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n\t * @param {Null|Number|String} [month=1] - Gregorian month\n\t * @param {Null|Number|String} [day=1] - Gregorian day\n\t * @param {Null|Number|String} [hour=0] - Gregorian hour\n\t * @param {Null|Number|String} [minute=0] - Gregorian minute\n\t * @param {Null|Number|String} [second=0] - Gregorian second\n\t * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n\t * @returns {Array} Jalali date\n\t */\n\tconst gtj = (year, month, day, hour, minute, second, millisecond) => {\n\t\tlet date;\n\t\tif (!year) date = new Date();\n\t\telse if (Object.prototype.toString.call(year) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\tdate = year;\n\t\telse\n\t\t\tdate = new Date(\n\t\t\t\tREGEX[\"isNumeric\"].test(year) ? year : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(month) ? month : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(day) ? day : 1,\n\t\t\t\tREGEX[\"isNumeric\"].test(hour) ? hour : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(minute) ? minute : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(second) ? second : 0,\n\t\t\t\tREGEX[\"isNumeric\"].test(millisecond) ? millisecond : 0\n\t\t\t);\n\t\tday = date.getDate();\n\t\tmonth = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n\t\tyear = date.getFullYear();\n\t\thour = date.getHours();\n\t\tminute = date.getMinutes();\n\t\tsecond = date.getSeconds();\n\t\tmillisecond = date.getMilliseconds();\n\t\tlet jYear, jMonth, jDay;\n\t\tlet pastDaysInMonth = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t59,\n\t\t\t90,\n\t\t\t120,\n\t\t\t151,\n\t\t\t181,\n\t\t\t212,\n\t\t\t243,\n\t\t\t273,\n\t\t\t304,\n\t\t\t334,\n\t\t]; //Past days from the start of the year in each month\n\t\tif (year > 1600) {\n\t\t\tjYear = 979;\n\t\t\tyear -= 1600;\n\t\t} else {\n\t\t\tjYear = 0;\n\t\t\tyear -= 621;\n\t\t}\n\t\tlet newYear = month > 2 ? year + 1 : year;\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt((newYear + 3) / 4) -\n\t\t\tparseInt((newYear + 99) / 100) +\n\t\t\tparseInt((newYear + 399) / 400) -\n\t\t\t80 +\n\t\t\tday +\n\t\t\tpastDaysInMonth[month - 1];\n\t\tjYear += 33 * parseInt(days / 12053);\n\t\tdays %= 12053;\n\t\tjYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tjYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tjMonth =\n\t\t\tdays < 186 ? 1 + parseInt(days / 31) : 7 + parseInt((days - 186) / 30);\n\t\tjDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n\t\treturn [jYear, jMonth, jDay, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * Jalali to Gregorian\n\t * @param {Null|Number|String} year - Jalali year\n\t * @param {Null|Number|String} [month=1] -  Jalali month\n\t * @param {Null|Number|String} [day=1] -  Jalali day\n\t * @param {Null|Number|String} [hour=0] -  Jalali hour\n\t * @param {Null|Number|String} [minute=0] -  Jalali minute\n\t * @param {Null|Number|String} [second=0] -  Jalali second\n\t * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n\t * @returns {Date} Gregorian date\n\t */\n\tconst jtg = (year, month, day, hour, minute, second, millisecond) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tyear = REGEX[\"isNumeric\"].test(year) ? +year : 1;\n\t\tmonth = REGEX[\"isNumeric\"].test(month) ? +month : 1;\n\t\tday = REGEX[\"isNumeric\"].test(day) ? +day : 1;\n\t\thour = REGEX[\"isNumeric\"].test(hour) ? +hour : 0;\n\t\tminute = REGEX[\"isNumeric\"].test(minute) ? +minute : 0;\n\t\tsecond = REGEX[\"isNumeric\"].test(second) ? +second : 0;\n\t\tmillisecond = REGEX[\"isNumeric\"].test(millisecond) ? +millisecond : 0;\n\t\tlet gYear, gMonth, gDay;\n\t\tif (year > 979) {\n\t\t\tgYear = 1600;\n\t\t\tyear -= 979;\n\t\t} else {\n\t\t\tgYear = 621;\n\t\t}\n\t\tlet days =\n\t\t\t365 * year +\n\t\t\tparseInt(year / 33) * 8 +\n\t\t\tparseInt(((year % 33) + 3) / 4) +\n\t\t\t78 +\n\t\t\tday +\n\t\t\t(month < 7 ? (month - 1) * 31 : (month - 7) * 30 + 186);\n\t\tgYear += 400 * parseInt(days / 146097);\n\t\tdays %= 146097;\n\t\tif (days > 36524) {\n\t\t\tgYear += 100 * parseInt(--days / 36524);\n\t\t\tdays %= 36524;\n\t\t\tif (days >= 365) days++;\n\t\t}\n\t\tgYear += 4 * parseInt(days / 1461);\n\t\tdays %= 1461;\n\t\tif (days > 365) {\n\t\t\tgYear += parseInt((days - 1) / 365);\n\t\t\tdays = (days - 1) % 365;\n\t\t}\n\t\tgDay = days + 1;\n\t\tlet daysOfMonths = [\n\t\t\t0,\n\t\t\t31,\n\t\t\t(gYear % 4 == 0 && gYear % 100 != 0) || gYear % 400 == 0 ? 29 : 28,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t\t30,\n\t\t\t31,\n\t\t];\n\t\tfor (gMonth = 0; gMonth < 13; gMonth++) {\n\t\t\tlet v = daysOfMonths[gMonth];\n\t\t\tif (gDay <= v) break;\n\t\t\tgDay -= v;\n\t\t}\n\n\t\treturn new Date(gYear, gMonth - 1, gDay, hour, minute, second, millisecond);\n\t};\n\n\t/**\n\t * get label of day\n\t * @param {Date} date - the date that received day\n\t * @param {'jalali'|'gregorian'} calendar - the calendar\n\t * @returns {String} returns day label\n\t * @example Saturday | شنبه\n\t */\n\tconst getDayLabel = (date = new Date(), calendar = \"jalali\") => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\")\n\t\t\t// if the year was an instance of Date\n\t\t\treturn CALENDAR[calendar][\"days\"][\"label\"][date.getDay()];\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the week\n\t * @param {Date} date - the date that received day of week\n\t * @param {'jalali', 'gregorian'} calendar - the calendar\n\t * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n\t * @returns {Number|String} the number of the day of week\n\t */\n\tconst getDayOfWeek = (\n\t\tdate = new Date(),\n\t\tcalendar = \"jalali\",\n\t\tmode = \"standard\"\n\t) => {\n\t\tif (Object.prototype.toString.call(date) === \"[object Date]\") {\n\t\t\t// if the year was an instance of Date\n\t\t\treturn (\n\t\t\t\tCALENDAR[calendar][\"days\"][\"weekNumber\"][date.getDay()] +\n\t\t\t\t(mode != \"standard\" ? 0 : 1)\n\t\t\t);\n\t\t}\n\t\treturn showError(\"تاریخ نامعتبر\", this);\n\t};\n\n\t/**\n\t * get the day of the year\n\t * @param {Null|String|Number} year - the year of date\n\t * @param {Null|Number|String} month - the month of date that gives the day of the year\n\t * @param {Null|Number|String} day - the day of date that gives the day of the year\n\t * @param {Null|Number|String} calendar - the calendar\n\t * @returns {Number} the day of the year\n\t */\n\tconst getDayOfYear = (year, month, day, calendar) => {\n\t\t//plus sign before a variable, convert variable to int\n\t\tmonth = +month;\n\t\tday = +day;\n\t\twhile (--month != 0) {\n\t\t\tday += new PersianDate([year, month], calendar).getDaysInMonth();\n\t\t}\n\t\treturn day;\n\t};\n\n\t/**\n\t * get the week of the year\n\t * @param {Null|Number|String} year - the year of date that gives the week of the year\n\t * @param {Null|Number|String} month - the month of date that gives the week of the year\n\t * @param {Null|Number|String} day - the day of date that gives the week of the year\n\t * @param {String} calendar - the calendar\n\t * @returns {Number} the week of the year\n\t */\n\tconst getWeekOfYear = (year, month, day, calendar) => {\n\t\tlet dayOfYearFormat = calendar == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = new PersianDate().calendar(calendar).parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet date = firstOfYear.clone().parse(year, month, day);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\n\t\tlet weekNumber = Math.ceil(date.diff(firstOfYear, \"date\", true) / 7);\n\n\t\tlet weeksInYear = date.clone().getWeeksInYear();\n\t\treturn weekNumber > weeksInYear ? weeksInYear : weekNumber;\n\t};\n\n\t/**\n\t * returns the ordinal number of that number sent to it\n\t * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n\t * @param {'jalali','gregorian'} calendar - the calendar\n\t * @param {?Number} mode  - 'jalali' calendar have two mode of ordinal number\n\t * @returns {String} ordinal number\n\t * @example 1st | اول | اولین\n\t */\n\tconst ordinalNumber = (number, calendar = \"jalali\", mode = 1) => {\n\t\treturn CALENDAR[calendar].ordinalNumbers(number, mode);\n\t};\n\n\t/**\n\t * add a prefix to the text in the number of characters that the text has less\n\t * @param {String|Number} text a text need prefix\n\t * @param {Number} length length of text\n\t * @param {String} [prefix=0] - string for add before of text\n\t * @returns {String} text with or wihtout prefix\n\t */\n\tconst addPrefix = (text, length, prefix = \"0\") => {\n\t\treturn prefix.repeat(length - String(text).length) + text;\n\t};\n\n\t/**\n\t * make error and delete this.d\n\t * @param {String} errorText - Error Text\n\t * @param {PersianDate} instance - the PersianDate instance\n\t * @returns {PersianDate} make error and return class\n\t */\n\tconst showError = (errorText, instance) => {\n\t\tdelete instance.d;\n\t\tinstance.error = errorText;\n\t\treturn errorText;\n\t};\n\n\t/**\n\t * make current date in persian calendar\n\t * @returns {PersianDate} make current date and return class\n\t */\n\tPersianDate.prototype.now = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\tlet date = new Date();\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * set persian date from Gregorian date\n\t * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.setDate = function (...date) {\n\t\tdeprecate(\n\t\t\t'\"setDate\" function is deprecated! use \"fromGregorian\" function instead.\\n' +\n\t\t\t\"https://alireza-ab.ir/persian-date/create-and-parse#from-gregorian-date\"\n\t\t);\n\t\treturn this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * convert a jalali or gregorian date to PersianDate instance\n\t * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.parse = function (...date) {\n\t\tif (this.c == \"jalali\") return this.fromJalali(...date);\n\t\telse return this.fromGregorian(...date);\n\t};\n\n\t/**\n\t * receives year and determined that is leap year or not\n\t * @param {?Number} year - the year to be determined is a leap or not\n\t * @returns {Boolean} if is leap year, returns true\n\t */\n\tPersianDate.prototype.isLeapYear = function (year) {\n\t\tif (this.error) return false;\n\t\tif (!year) year = this.year();\n\t\treturn isLeapYear(year, this.c)\n\t};\n\n\t/**\n\t * checks the persian date and time\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid, returns true\n\t */\n\tPersianDate.prototype.isValid = function (\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\treturn (\n\t\t\tthis.isValidDate(year, month, day) &&\n\t\t\tthis.isValidTime(hour, minute, second, millisecond)\n\t\t);\n\t};\n\n\t/**\n\t * checks the persian date\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @returns {Boolean} if is valid date, returns true\n\t */\n\tPersianDate.prototype.isValidDate = function (year, month, day) {\n\t\tif (this.error) return false;\n\t\tif (!year) {\n\t\t\tyear = this.d.year;\n\t\t\tmonth = this.d.month;\n\t\t\tday = this.d.date;\n\t\t}\n\t\tif ([year, month, day].some((e) => String(e).search(/null|NaN/) != -1))\n\t\t\treturn false;\n\t\tif (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n\t\t\treturn false;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 7 && month <= 11 && day == 31) return false;\n\t\t\tif (month == 12 && day == 31) return false;\n\t\t\tif (month == 12 && day == 30 && !this.isLeapYear(year)) return false;\n\t\t} else {\n\t\t\tif ([2, 4, 6, 9, 11].includes(month) && day == 31) return false;\n\t\t\tif (month == 2 && (day == 30 || (day == 29 && !this.isLeapYear(year))))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t/**\n\t * checks the time\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid time, returns true\n\t */\n\tPersianDate.prototype.isValidTime = function (\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\tif (hour == undefined) {\n\t\t\thour = this.d.hour;\n\t\t\tminute = this.d.minute;\n\t\t\tsecond = this.d.second;\n\t\t\tmillisecond = this.d.millisecond;\n\t\t}\n\n\t\tif (\n\t\t\t[hour, minute, second, millisecond].some(\n\t\t\t\t(e) => String(e).search(/null|NaN/) != -1\n\t\t\t)\n\t\t)\n\t\t\treturn false;\n\t\tif (hour < 0 || hour > 23) return false;\n\t\tif (minute < 0 || minute > 59) return false;\n\t\tif (second < 0 || second > 59) return false;\n\t\tif (millisecond < 0 || millisecond > 999) return false;\n\t\treturn true;\n\t};\n\n\t/**\n\t * returns number of days in month\n\t * @param {?Number} year - year of date that returns number of days in month\n\t * @param {?Number} month - month of date that returns number of days in month\n\t * @returns {Number} number of days in month\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.getDaysInMonth = function (\n\t\tyear = this.d.year,\n\t\tmonth = this.d.month\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") {\n\t\t\tif (month >= 1 && month <= 6) return 31;\n\t\t\tif ((month > 6 && month <= 11) || this.isLeapYear(year)) {\n\t\t\t\treturn 30;\n\t\t\t}\n\t\t\treturn 29;\n\t\t} else {\n\t\t\tif ([1, 3, 5, 7, 8, 10, 12].includes(month)) return 31;\n\t\t\tif (month == 2) {\n\t\t\t\tif (this.isLeapYear(year)) return 29;\n\t\t\t\treturn 28;\n\t\t\t}\n\t\t\treturn 30;\n\t\t}\n\t};\n\n\t/**\n\t * add to year\n\t * @param {?Number|String} [year=1] - a number for add with year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\tif (year < 0)\n\t\t\t// if the number was negative, send to subYear method\n\t\t\treturn this.subYear(Math.abs(year));\n\t\tthis.d.year += +year; //plus sign before a variable, convert variable to int\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to month\n\t * @param {?Number|String} [month=1] - a number for add with month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tif (month < 0)\n\t\t\t// if the number was negative, send to subMonth method\n\t\t\treturn this.subMonth(Math.abs(month));\n\t\tmonth = +month; // plus sign before a variable, convert variable to int\n\n\t\tlet monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n\t\tif (monthToStartNewYear > month) {\n\t\t\tthis.d.month += month;\n\t\t} else {\n\t\t\tthis.addYear(1, false);\n\t\t\tthis.d.month = 1;\n\t\t\tmonth -= monthToStartNewYear;\n\t\t\twhile (month >= 12) {\n\t\t\t\tmonth -= 12;\n\t\t\t\tthis.addYear(1, false);\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month += month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to day\n\t * @param {?Number|String} [day=1] - a number for add with day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tif (day < 0)\n\t\t\t// if the number was negative, send to subDay method\n\t\t\treturn this.subDay(Math.abs(day));\n\t\tday = +day; //plus sign before a variable, convert variable to int\n\n\t\tlet dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n\t\tif (dayToStartNextMonth > day) {\n\t\t\tthis.d.date += day;\n\t\t} else {\n\t\t\tthis.addMonth(1, false);\n\t\t\tthis.d.date = 1;\n\t\t\tday -= dayToStartNextMonth;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.addMonth(1, false);\n\t\t\t}\n\t\t\tif (day != 0) {\n\t\t\t\tthis.d.date += day;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to quarter\n\t * @param {?Number|String} [quarter=1] - a number for add with quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tif (quarter < 0)\n\t\t\t// if the number was negative, send to subQuarter method\n\t\t\treturn this.subQuarter(Math.abs(quarter));\n\t\tquarter = +quarter; //plus sign before a variable, convert variable to int\n\t\treturn this.addMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * add to week\n\t * @param {?Number|String} [week=1] - a number for add with week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tif (week < 0)\n\t\t\t// if the number was negative, send to subWeek method\n\t\t\treturn this.subWeek(Math.abs(week));\n\t\tweek = +week; //plus sign before a variable, convert variable to int\n\t\treturn this.addDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * add to hour\n\t * @param {?Number|String} [hour=1] - a number for add with hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\tif (hour < 0)\n\t\t\t// if the number was negative, send to subHour method\n\t\t\treturn this.subHour(Math.abs(hour));\n\t\thour = +hour; //plus sign before a variable, convert variable to int\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.addDay(1, false);\n\t\t}\n\t\tlet hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n\t\tif (hour >= hourToNextDay) {\n\t\t\tthis.addDay(1, false);\n\t\t\thour -= hourToNextDay;\n\t\t\tthis.d.hour = hour;\n\t\t} else this.d.hour += hour;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to minute\n\t * @param {?Number|String} [minute=1] - a number for add with minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tif (minute < 0)\n\t\t\t// if the number was negative, send to subMinute method\n\t\t\treturn this.subMinute(Math.abs(minute));\n\t\tminute = +minute; //plus sign before a variable, convert variable to int\n\t\twhile (minute >= 60) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= 60;\n\t\t}\n\t\tlet minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n\t\tif (minute >= minuteToNextHour) {\n\t\t\tthis.addHour(1, false);\n\t\t\tminute -= minuteToNextHour;\n\t\t\tthis.d.minute = minute;\n\t\t} else this.d.minute += minute;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to second\n\t * @param {?Number|String} [second=1] - a number for add with second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tif (second < 0)\n\t\t\t// if the number was negative, send to subSecond method\n\t\t\treturn this.subSecond(Math.abs(second));\n\t\tsecond = +second; //plus sign before a variable, convert variable to int\n\t\twhile (second >= 60) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= 60;\n\t\t}\n\t\tlet secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n\t\tif (second >= secondToNextMinute) {\n\t\t\tthis.addMinute(1, false);\n\t\t\tsecond -= secondToNextMinute;\n\t\t\tthis.d.second = second;\n\t\t} else this.d.second += second;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * add to millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tif (millisecond < 0)\n\t\t\t// if the number was negative, send to subMillisecond method\n\t\t\treturn this.subMillisecond(Math.abs(millisecond));\n\t\tmillisecond = +millisecond; //plus sign before a variable, convert variable to int\n\t\twhile (millisecond >= 1000) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= 1000;\n\t\t}\n\t\tlet millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n\t\tif (millisecond >= millisecondToNextSecond) {\n\t\t\tthis.addSecond(1, false);\n\t\t\tmillisecond -= millisecondToNextSecond;\n\t\t\tthis.d.millisecond = millisecond;\n\t\t} else this.d.millisecond += millisecond;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from year\n\t * @param {?Number|String} [year=1] - a number for subtract from year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\tthis.d.year -= Math.abs(year);\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from month\n\t * @param {?Number|String} [month=1] - a number for subtract from month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\tmonth = Math.abs(month); //plus sign before a variable, convert variable to int\n\t\tlet pastMonth = this.d.month; //pastMonth -> Number of month that is past\n\t\tif (pastMonth > month) {\n\t\t\tthis.d.month -= month;\n\t\t} else {\n\t\t\tthis.subYear(1, false);\n\t\t\tthis.d.month = 12;\n\t\t\tmonth -= pastMonth;\n\t\t\twhile (month >= 12) {\n\t\t\t\tthis.subYear(1, false);\n\t\t\t\tmonth -= 12;\n\t\t\t}\n\t\t\tif (month != 0) {\n\t\t\t\tthis.d.month -= month;\n\t\t\t}\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from day\n\t * @param {?Number|String} [day=1] - a number for subtract from day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\tday = Math.abs(day);\n\t\tlet pastDays = this.d.date; // pastDays -> Number of days that is past\n\t\tif (pastDays > day) {\n\t\t\tthis.d.date -= day;\n\t\t} else {\n\t\t\tthis.subMonth(1, false);\n\t\t\tthis.d.date = this.getDaysInMonth();\n\t\t\tday -= pastDays;\n\t\t\twhile (day >= this.getDaysInMonth()) {\n\t\t\t\tday -= this.getDaysInMonth();\n\t\t\t\tthis.subMonth(1, false);\n\t\t\t}\n\t\t\tthis.d.date = this.getDaysInMonth() - day;\n\t\t}\n\n\t\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from quarter\n\t * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\tquarter = Math.abs(quarter);\n\t\treturn this.subMonth(quarter * 3, checkDate);\n\t};\n\n\t/**\n\t * subtract from week\n\t * @param {?Number|String} [week=1] - a number for subtract from week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\tweek = Math.abs(week);\n\t\treturn this.subDay(week * 7, checkDate);\n\t};\n\n\t/**\n\t * subtract from hour\n\t * @param {?Number|String} [hour=1] - a number for subtract from hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\thour = Math.abs(hour);\n\t\twhile (hour >= 24) {\n\t\t\thour -= 24;\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\tlet pastHours = this.d.hour; // pastHours -> Number of hours that is past\n\t\tif (hour > pastHours) {\n\t\t\tthis.subDay(1, false);\n\t\t\thour -= pastHours;\n\t\t\tthis.d.hour = 24 - hour;\n\t\t} else this.d.hour -= hour;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from minute\n\t * @param {?Number|String} [minute=1] - a number for subtract from minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\tminute = Math.abs(minute);\n\t\twhile (minute >= 60) {\n\t\t\tminute -= 60;\n\t\t\tthis.subHour(1, false);\n\t\t}\n\t\tlet pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n\t\tif (minute > pastMinute) {\n\t\t\tthis.subHour(1, false);\n\t\t\tminute -= pastMinute;\n\t\t\tthis.d.minute = 60 - minute;\n\t\t} else this.d.minute -= minute;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from second\n\t * @param {?Number|String} [second=1] - a number for subtract from second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\tsecond = Math.abs(second);\n\t\twhile (second >= 60) {\n\t\t\tsecond -= 60;\n\t\t\tthis.subMinute(1, false);\n\t\t}\n\t\tlet pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n\t\tif (second > pastSeconds) {\n\t\t\tthis.subMinute(1, false);\n\t\t\tsecond -= pastSeconds;\n\t\t\tthis.d.second = 60 - second;\n\t\t} else this.d.second -= second;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * subtract from millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\tmillisecond = Math.abs(millisecond);\n\t\twhile (millisecond >= 1000) {\n\t\t\tmillisecond -= 1000;\n\t\t\tthis.subSecond(1, false);\n\t\t}\n\t\tlet pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n\t\tif (millisecond > pastMilliseconds) {\n\t\t\tthis.subSecond(1, false);\n\t\t\tmillisecond -= pastMilliseconds;\n\t\t\tthis.d.millisecond = 1000 - millisecond;\n\t\t} else this.d.millisecond -= millisecond;\n\n\t\twhile (checkDate && !this.isValidTime()) this.subMillisecond(1, false);\n\t\treturn this;\n\t};\n\n\t/**\n\t * returns date as string with specify format\n\t * @param {?String} [format=date] - formatting date to string\n\t * @returns {String} date string\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toString = function (format = \"date\") {\n\t\tif (this.error) return this.error;\n\t\tlet texts = [];\n\t\tformat = format.replace(REGEX[\"betweenBacktick\"], (matched, text) => {\n\t\t\ttexts.push(text);\n\t\t\treturn \"###\";\n\t\t});\n\t\tformat = format.replace(/\\?/g, this.c == \"jalali\" ? \"j\" : \"\");\n\t\tif (this.c == \"jalali\")\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"jYYYY/jMM/jDD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"jYYYY/jMM/jDD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\telse\n\t\t\tformat = format\n\t\t\t\t.replace(/datetime/gi, \"YYYY-MM-DD HH:mm\")\n\t\t\t\t.replace(/date/gi, \"YYYY-MM-DD\")\n\t\t\t\t.replace(/time/gi, \"HH:mm\");\n\t\tlet matchedFormat = format.match(REGEX[\"format\"]);\n\t\tlet dateString = \"\";\n\t\tfor (const i of matchedFormat) {\n\t\t\tdateString += format.substring(0, format.indexOf(i));\n\t\t\tif (i.search(/Y|y/) != -1) dateString += this.year(i);\n\t\t\telse if (i.search(/M/) != -1) dateString += this.month(i);\n\t\t\telse if (i.search(/Q/) != -1) dateString += this.quarter(i);\n\t\t\telse if (i.search(/D|d/) != -1) dateString += this.date(i);\n\t\t\telse if (i.search(/W|w/) != -1) dateString += this.week(i);\n\t\t\telse if (i.search(/H|h|k/) != -1) dateString += this.hour(i);\n\t\t\telse if (i.search(/m/) != -1) dateString += this.minute(i);\n\t\t\telse if (i.search(/s/) != -1) dateString += this.second(i);\n\t\t\telse if (i.search(/c|C/) != -1) dateString += this.millisecond(i);\n\t\t\telse if (i.search(/t/) != -1) dateString += this.timestamp();\n\t\t\telse if (i.search(/a|A/) != -1) dateString += TIMETYPE(this.d.hour, i);\n\n\t\t\tformat = format.substr(format.indexOf(i) + i.length);\n\t\t}\n\t\tdateString += format;\n\t\tfor (let i = 0; i < texts.length; i++)\n\t\t\tdateString = dateString.replace(\"###\", texts[i]);\n\t\treturn String(dateString);\n\t};\n\n\t/**\n\t * get or set year\n\t * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the year, returns class,\n\t * else returns a number or string from year\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.year = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tthis.d.year = +format;\n\t\t\tif (!this.isValidDate()) {\n\t\t\t\treturn this.addYear(format);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jYYYY\" : \"YYYY\";\n\t\t\tlet year = this.c == \"jalali\" ? this.d.year : gtj(this.toDate())[0];\n\t\t\tif (format == \"jYYYY\" || format == \"jy\") return year;\n\t\t\tif (format == \"jYY\") return String(year).slice(-2);\n\t\t\tlet gYear =\n\t\t\t\tthis.c == \"jalali\" ? this.toDate().getFullYear() : this.d.year;\n\t\t\tif (format == \"YYYY\" || format == \"y\") return gYear;\n\t\t\tif (format == \"YY\") return String(gYear).slice(-2);\n\t\t\treturn year;\n\t\t}\n\t};\n\n\t/**\n\t * get or set month\n\t * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the month, returns class,\n\t * else returns a number or string from month\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.month = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subMonth(format - 1);\n\t\t\t} else if (format > 12) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addMonth(format - 12);\n\t\t\t}\n\t\t\tthis.d.month = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jM\" : \"M\";\n\t\t\tlet month = this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1];\n\t\t\tif (format == \"jMM\") return addPrefix(month, 2);\n\t\t\tif (format == \"jM\") return month;\n\t\t\tif (format == \"jMMMM\" || format == \"jMMM\")\n\t\t\t\treturn CALENDAR[\"jalali\"][\"months\"][month];\n\t\t\tif (format == \"jMo\") return ordinalNumber(month);\n\t\t\tif (format == \"jMO\") return ordinalNumber(month, \"jalali\", 2);\n\t\t\tlet gMonth =\n\t\t\t\tthis.c == \"jalali\" ? this.toDate().getMonth() + 1 : this.d.month;\n\t\t\tif (format == \"M\") return gMonth;\n\t\t\tif (format == \"MM\") return addPrefix(gMonth, 2);\n\t\t\tif (format == \"MMMM\") return CALENDAR[\"gregorian\"][\"months\"][gMonth];\n\t\t\tif (format == \"Mo\" || format == \"MO\")\n\t\t\t\treturn ordinalNumber(gMonth, \"gregorian\");\n\t\t\tif (format == \"MMM\")\n\t\t\t\treturn CALENDAR[\"gregorian\"][\"months\"][gMonth].slice(0, 3);\n\t\t\treturn month;\n\t\t}\n\t};\n\n\t/**\n\t * get or set day in month\n\t * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the day, returns class,\n\t * else returns a number or string from day\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.date = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet daysInMonth = this.getDaysInMonth();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.date = 1;\n\t\t\t\treturn this.subDay(format - 1);\n\t\t\t} else if (format > daysInMonth) {\n\t\t\t\tthis.d.date = daysInMonth;\n\t\t\t\treturn this.addDay(format - daysInMonth);\n\t\t\t}\n\t\t\tthis.d.date = +format;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jD\" : \"D\";\n\t\t\tlet date = this.c == \"jalali\" ? this.d.date : gtj(this.toDate())[2];\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"jDD\") return addPrefix(date, 2);\n\t\t\tif (format == \"jD\") return date;\n\t\t\tif (format == \"jDo\") return ordinalNumber(date);\n\t\t\tif (format == \"jDO\") return ordinalNumber(date, \"jalali\", 2);\n\t\t\t//---------- Day of Week ----------//\n\t\t\tlet gDate = this.toDate();\n\t\t\tif (format == \"jdddd\" || format == \"jddd\") return getDayLabel(gDate);\n\t\t\tif (format == \"jdd\") return getDayLabel(gDate).slice(0, 1);\n\t\t\tlet dayOfWeek = getDayOfWeek(gDate);\n\t\t\tif (format == \"jdo\") return ordinalNumber(dayOfWeek);\n\t\t\tif (format == \"jdO\") return ordinalNumber(dayOfWeek, \"jalali\", 2);\n\t\t\tif (format == \"jd\") return getDayOfWeek(gDate, \"jalali\", \"array\");\n\t\t\tif (format == \"jde\") return dayOfWeek;\n\t\t\t//---------- Day of Year ----------//\n\t\t\tlet dayOfYear = getDayOfYear(\n\t\t\t\tthis.year(\"jy\"),\n\t\t\t\tthis.month(\"jM\"),\n\t\t\t\tdate,\n\t\t\t\t\"j\"\n\t\t\t);\n\t\t\tif (format == \"jDDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"jDDD\") return dayOfYear;\n\t\t\tif (format == \"jDDDo\") return ordinalNumber(dayOfYear);\n\t\t\tif (format == \"jDDDO\") return ordinalNumber(dayOfYear, \"jalali\", 2);\n\t\t\t//---------- Day of Month ----------//\n\t\t\tif (format == \"DD\") return addPrefix(gDate.getDate(), 2);\n\t\t\tif (format == \"D\") return gDate.getDate();\n\t\t\tif (format == \"Do\" || format == \"DO\")\n\t\t\t\treturn ordinalNumber(gDate.getDate(), \"gregorian\");\n\t\t\t//---------- Day of Week ----------//\n\t\t\tif (format == \"dddd\") return getDayLabel(gDate, \"gregorian\");\n\t\t\tif (format == \"ddd\") return getDayLabel(gDate, \"gregorian\").slice(0, 3);\n\t\t\tif (format == \"dd\") return getDayLabel(gDate, \"gregorian\").slice(0, 2);\n\t\t\tdayOfWeek = getDayOfWeek(gDate, \"gregorian\");\n\t\t\tif (format == \"do\" || format == \"dO\")\n\t\t\t\treturn ordinalNumber(dayOfWeek, \"gregorian\");\n\t\t\tif (format == \"d\") return getDayOfWeek(gDate, \"gregorian\", \"array\");\n\t\t\tif (format == \"de\") return dayOfWeek;\n\t\t\tdayOfYear = getDayOfYear(\n\t\t\t\tgDate.getFullYear(),\n\t\t\t\tgDate.getMonth() + 1,\n\t\t\t\tgDate.getDate(),\n\t\t\t\t\"g\"\n\t\t\t);\n\t\t\t//---------- Day of Year ----------//\n\t\t\tif (format == \"DDDD\") return addPrefix(dayOfYear, 3);\n\t\t\tif (format == \"DDD\") return dayOfYear;\n\t\t\tif (format == \"DDDo\" || format == \"DDDO\")\n\t\t\t\treturn ordinalNumber(dayOfYear, \"gregorian\");\n\t\t\treturn date;\n\t\t}\n\t};\n\n\t/**\n\t * get or set quarter\n\t * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the quarter, returns class,\n\t * else returns a number or string from quarter\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.quarter = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 1) {\n\t\t\t\tthis.d.month = 1;\n\t\t\t\treturn this.subQuarter(format - 1);\n\t\t\t} else if (format > 4) {\n\t\t\t\tthis.d.month = 12;\n\t\t\t\treturn this.addQuarter(format - 4);\n\t\t\t}\n\t\t\tthis.d.month = +format * 3 - 2;\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jQ\" : \"Q\";\n\t\t\tlet quarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1]) / 3\n\t\t\t);\n\t\t\tif (format == \"jQ\") return quarter;\n\t\t\tif (format == \"jQo\") return ordinalNumber(quarter);\n\t\t\tif (format == \"jQO\") return ordinalNumber(quarter, \"jalali\", 2);\n\t\t\tquarter = Math.ceil(\n\t\t\t\t(this.c == \"jalali\" ? this.toDate().getMonth() + 1 : this.d.month) / 3\n\t\t\t);\n\t\t\tif (format == \"Q\") return quarter;\n\t\t\tif (format == \"Qo\" || format == \"QO\")\n\t\t\t\treturn ordinalNumber(quarter, \"gregorian\");\n\t\t\treturn quarter;\n\t\t}\n\t};\n\n\t/**\n\t * get or set week\n\t * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the week, returns class,\n\t * else returns a number or string from week\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.week = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tlet weeksInYear = this.getWeeksInYear();\n\t\t\tif (format < 1) {\n\t\t\t\tthis.week(1);\n\t\t\t\treturn this.subWeek(format - 1);\n\t\t\t} else if (format > weeksInYear) {\n\t\t\t\tthis.week(weeksInYear);\n\t\t\t\treturn this.addWeek(format - weeksInYear);\n\t\t\t}\n\t\t\tlet weekOfYear = getWeekOfYear(\n\t\t\t\tthis.d.year,\n\t\t\t\tthis.d.month,\n\t\t\t\tthis.d.date,\n\t\t\t\tthis.c\n\t\t\t);\n\t\t\tthis.addWeek(+format - weekOfYear);\n\t\t\twhile (!this.isValidDate()) {\n\t\t\t\tthis.subDay(1, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (!format) format = this.c == \"jalali\" ? \"jw\" : \"w\";\n\t\t\tlet date =\n\t\t\t\tthis.c == \"jalali\"\n\t\t\t\t\t? [this.d.year, this.d.month, this.d.date]\n\t\t\t\t\t: gtj(this.toDate());\n\t\t\tlet weekOfYear = getWeekOfYear(date[0], date[1], date[2], this.c);\n\t\t\tif (format == \"jw\" || format == \"jW\") return weekOfYear;\n\t\t\tif (format == \"jww\" || format == \"jWW\") return addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"jwo\" || format == \"jWo\") return ordinalNumber(weekOfYear);\n\t\t\tif (format == \"jwO\" || format == \"jWO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"jalali\", 2);\n\t\t\tweekOfYear = getWeekOfYear(\n\t\t\t\tthis.year(\"y\"),\n\t\t\t\tthis.month(\"M\"),\n\t\t\t\tthis.date(\"D\"),\n\t\t\t\t\"gregorian\"\n\t\t\t);\n\t\t\tif (format == \"w\" || format == \"W\") return weekOfYear;\n\t\t\tif (format == \"ww\" || format == \"WW\") return addPrefix(weekOfYear, 2);\n\t\t\tif (format == \"wo\" || format == \"Wo\" || format == \"wO\" || format == \"WO\")\n\t\t\t\treturn ordinalNumber(weekOfYear, \"gregorian\");\n\t\t\treturn weekOfYear;\n\t\t}\n\t};\n\n\t/**\n\t * get or set hour\n\t * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the hour, returns class,\n\t * else returns a number or string from hour\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.hour = function (format = \"H\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0) {\n\t\t\t\tthis.d.hour = 0;\n\t\t\t\treturn this.subHour(format - 1);\n\t\t\t} else if (format > 23) {\n\t\t\t\tthis.d.hour = 23;\n\t\t\t\treturn this.addHour(format - 23);\n\t\t\t}\n\t\t\tthis.d.hour = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tlet hour = this.d.hour;\n\t\t\tif (format == \"H\") return hour;\n\t\t\tif (format == \"HH\") return addPrefix(hour, 2);\n\t\t\tif (format == \"k\") return hour || 24;\n\t\t\tif (format == \"kk\") return addPrefix(hour || 24, 2);\n\t\t\thour = hour > 12 ? hour - 12 : hour;\n\t\t\tif (format == \"h\") return hour;\n\t\t\tif (format == \"hh\") return addPrefix(hour, 2);\n\t\t\treturn hour;\n\t\t}\n\t};\n\n\t/**\n\t * get or set minute\n\t * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the minute, returns class,\n\t * else returns a number or string from minute\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.minute = function (format = \"m\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59) return this.addMinute(format);\n\t\t\tthis.d.minute = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"m\") return this.d.minute;\n\t\t\tif (format == \"mm\") return addPrefix(this.d.minute, 2);\n\t\t\treturn this.d.minute;\n\t\t}\n\t};\n\n\t/**\n\t * get or set second\n\t * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the second, returns class,\n\t * else returns a number or string from second\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.second = function (format = \"s\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 59) return this.addSecond(format);\n\t\t\tthis.d.second = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"s\") return this.d.second;\n\t\t\tif (format == \"ss\") return addPrefix(this.d.second, 2);\n\t\t\treturn this.d.second;\n\t\t}\n\t};\n\n\t/**\n\t * get or set millisecond\n\t * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n\t * else returns a number or string from millisecond\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.millisecond = function (format = \"c\") {\n\t\tif (this.error) return this.error;\n\t\tformat = String(format).trim();\n\t\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\t\tif (format < 0 || format > 999) return this.addMillisecond(format);\n\t\t\tthis.d.millisecond = +format;\n\t\t\twhile (!this.isValidTime()) this.subMillisecond(1, false);\n\t\t\treturn this;\n\t\t} else {\n\t\t\tif (format == \"CCC\" || format == \"c\") return this.d.millisecond;\n\t\t\tif (format == \"CCCC\") return addPrefix(this.d.millisecond, 3);\n\t\t\treturn this.d.millisecond;\n\t\t}\n\t};\n\n\t/**\n\t * get timestamp or set date from timestamp\n\t * @param {Null|Number|String} value - a number for set the millisecond\n\t * @returns {PersianDate|Number} if set the timestamp, returns class,\n\t * else returns timestamp (number)\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.timestamp = function (value) {\n\t\tif (this.error) return this.error;\n\t\tif (value) {\n\t\t\treturn this.fromGregorian(+String(value).trim());\n\t\t} else {\n\t\t\treturn this.toDate().getTime();\n\t\t}\n\t};\n\n\t////////////////////--- Version 1.1.0 ---////////////////////\n\n\t/**\n\t * get clone of this date\n\t * @since 1.1.0\n\t * @returns {PersianDate} returns the clone of this date\n\t */\n\tPersianDate.prototype.clone = function () {\n\t\treturn Object.assign(\n\t\t\tObject.create(Object.getPrototypeOf(this)),\n\t\t\tJSON.parse(JSON.stringify(this))\n\t\t);\n\t};\n\n\t/**\n\t * checks this date is the same to another date\n\t * @since 1.1.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSame = function (...date) {\n\t\tif (this.error) return false;\n\t\tdate = typesToArray(this.c, ...date);\n\t\tdate = this.toArray().map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(date[i]) ? date[i] : value\n\t\t);\n\n\t\tif (this.isValid(...date))\n\t\t\treturn (\n\t\t\t\tthis.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp() == this.timestamp()\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t////////////////////--- Version 1.2.0 ---////////////////////\n\n\t/**\n\t * convert String or Array or Object or PersianDate to Array\n\t * @since 1.2.0\n\t * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n\t */\n\tconst typesToArray = function (\n\t\tcalendar,\n\t\tyear,\n\t\tmonth,\n\t\tdate,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (!year)\n\t\t\t// if year not defined\n\t\t\tyear = calendar == \"jalali\" ? gtj() : new Date(); // return now\n\t\tif (typeof year == \"string\" && year.search(REGEX[\"separators\"]) != -1) {\n\t\t\t// if type of year is String\n\t\t\tyear = year.split(/[/ -.,:\\\\]/);\n\t\t}\n\t\tif (year instanceof PersianDate)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn year.calendar(calendar).toArray();\n\t\telse if (year instanceof Date)\n\t\t\t// if type of year is PersianDate\n\t\t\treturn new PersianDate(year).calendar(calendar).toArray();\n\t\telse if (Object.prototype.toString.call(year) === \"[object Array]\")\n\t\t\t// if type of year is Array\n\t\t\treturn year;\n\t\telse if (Object.prototype.toString.call(year) === \"[object Object]\")\n\t\t\t// if type of year is Object\n\t\t\treturn [\n\t\t\t\tyear.y || year.year || year.years,\n\t\t\t\tyear.M || year.month || year.months || 1,\n\t\t\t\tyear.d || year.day || year.days || year.date || 1,\n\t\t\t\tyear.h || year.hour || year.hours || 0,\n\t\t\t\tyear.m || year.minute || year.minutes || 0,\n\t\t\t\tyear.s || year.second || year.seconds || 0,\n\t\t\t\tyear.ms || year.millisecond || year.milliseconds || 0,\n\t\t\t];\n\t\treturn [year, month, date, hour, minute, second, millisecond];\n\t};\n\n\t/**\n\t * checks this date is before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \"<\", date);\n\t};\n\n\t/**\n\t * checks this date is after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \">\", date);\n\t};\n\n\t////////////////////--- Version 1.3.0 ---////////////////////\n\n\t/**\n\t * return the object of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return Object of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toObject = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn this.d;\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn {\n\t\t\tyear: this.year(formats[0]),\n\t\t\tmonth: this.month(formats[1]),\n\t\t\tdate: this.date(formats[2]),\n\t\t\thour: this.hour(formats[3]),\n\t\t\tminute: this.minute(formats[4]),\n\t\t\tsecond: this.second(formats[5]),\n\t\t\tmillisecond: this.millisecond(formats[6]),\n\t\t};\n\t};\n\n\t/**\n\t * checks date is a native js Date object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a native js Date, return true\n\t */\n\tPersianDate.prototype.isDate = isDate\n\n\t/**\n\t * checks date is a PersianDate object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a PersianDate, return true\n\t */\n\tPersianDate.prototype.isPersianDate = isPersianDate\n\n\t/**\n\t * checks this date is same or before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSameOrBefore = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \"<=\", date);\n\t};\n\n\t/**\n\t * checks this date is same or after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSameOrAfter = function (...date) {\n\t\tif (this.error) return false;\n\t\treturn compareDate(this, \">=\", date);\n\t};\n\n\t/**\n\t * checks this date is between the another dates\n\t * @since 1.3.0\n\t * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} from.y - year of date\n\t * @param {Null|String|Number} from.year - year of date\n\t * @param {Null|String|Number} from.years - year of date\n\t * @param {Null|String|Number} from.M - month of date\n\t * @param {Null|String|Number} from.month - month of date\n\t * @param {Null|String|Number} from.months - month of date\n\t * @param {Null|String|Number} from.d - day of date\n\t * @param {Null|String|Number} from.day - day of date\n\t * @param {Null|String|Number} from.days - day of date\n\t * @param {Null|String|Number} from.date - day of date\n\t * @param {Null|String|Number} from.h - hour of date\n\t * @param {Null|String|Number} from.hour - hour of date\n\t * @param {Null|String|Number} from.hours - hour of date\n\t * @param {Null|String|Number} from.m - minute of date\n\t * @param {Null|String|Number} from.minute - minute of date\n\t * @param {Null|String|Number} from.minutes - minute of date\n\t * @param {Null|String|Number} from.s - second of date\n\t * @param {Null|String|Number} from.second - second of date\n\t * @param {Null|String|Number} from.seconds - second of date\n\t * @param {Null|String|Number} from.ms - millisecond of date\n\t * @param {Null|String|Number} from.millisecond - millisecond of date\n\t * @param {Null|String|Number} from.milliseconds - millisecond of date\n\t * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} to.y - year of date\n\t * @param {Null|String|Number} to.year - year of date\n\t * @param {Null|String|Number} to.years - year of date\n\t * @param {Null|String|Number} to.M - month of date\n\t * @param {Null|String|Number} to.month - month of date\n\t * @param {Null|String|Number} to.months - month of date\n\t * @param {Null|String|Number} to.d - day of date\n\t * @param {Null|String|Number} to.day - day of date\n\t * @param {Null|String|Number} to.days - day of date\n\t * @param {Null|String|Number} to.date - day of date\n\t * @param {Null|String|Number} to.h - hour of date\n\t * @param {Null|String|Number} to.hour - hour of date\n\t * @param {Null|String|Number} to.hours - hour of date\n\t * @param {Null|String|Number} to.m - minute of date\n\t * @param {Null|String|Number} to.minute - minute of date\n\t * @param {Null|String|Number} to.minutes - minute of date\n\t * @param {Null|String|Number} to.s - second of date\n\t * @param {Null|String|Number} to.second - second of date\n\t * @param {Null|String|Number} to.seconds - second of date\n\t * @param {Null|String|Number} to.ms - millisecond of date\n\t * @param {Null|String|Number} to.millisecond - millisecond of date\n\t * @param {Null|String|Number} to.milliseconds - millisecond of date\n\t * @param {String} method - determines that consider the dates themselves\n\t * @returns {‌Boolean} if date valid, return true or false\n\t */\n\tPersianDate.prototype.isBetween = function (from, to, method = \"()\") {\n\t\tif (this.error) return false;\n\t\t// let $this = this.clone();\n\t\tfrom = typesToArray(this.c, from);\n\t\tlet date = this.toArray();\n\t\tif (!from[2]) date[2] = 1;\n\t\t// $this.date(1);\n\t\tfrom = date.map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(from[i]) ? from[i] : value\n\t\t);\n\n\t\t// from = [\n\t\t// \tfrom[0] || this.d.year,\n\t\t// \tfrom[1] || this.d.month,\n\t\t// \tfrom[2] || 1,\n\t\t// \tfrom[3] || this.d.hour,\n\t\t// \tfrom[4] || this.d.minute,\n\t\t// \tfrom[5] || this.d.second,\n\t\t// \tfrom[6] || this.d.millisecond,\n\t\t// ];\n\t\tto = typesToArray(this.c, to);\n\t\t// to = [\n\t\t// \tto[0] || this.d.year,\n\t\t// \tto[1] || this.d.month,\n\t\t// \tto[2] || 1,\n\t\t// \tto[3] || this.d.hour,\n\t\t// \tto[4] || this.d.minute,\n\t\t// \tto[5] || this.d.second,\n\t\t// \tto[6] || this.d.millisecond,\n\t\t// ];\n\t\tto = date.map((value, i) =>\n\t\t\tREGEX[\"isNumeric\"].test(to[i]) ? to[i] : value\n\t\t);\n\n\t\tif (!(this.isValid(...from) && this.isValid(...to))) return false;\n\n\t\treturn (\n\t\t\tcompareDate(this, method[0] === \"[\" ? \">=\" : \">\", from) &&\n\t\t\tcompareDate(this, method[1] === \"]\" ? \"<=\" : \"<\", to)\n\t\t);\n\t\t// return (\n\t\t// \t(method[0] === \"[\"\n\t\t// \t\t? $this.isSameOrAfter(from)\n\t\t// \t\t: $this.isAfter(from)) &&\n\t\t// \t(method[1] === \"]\"\n\t\t// \t\t? $this.isSameOrBefore(to)\n\t\t// \t\t: $this.isBefore(to))\n\t\t// );\n\t};\n\n\t////////////////////--- Version 1.4.0 ---////////////////////\n\n\t/**\n\t * returns minimum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return minimum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.min = function () {\n\t\treturn mathOperation(arguments, this, \"min\");\n\t};\n\n\t/**\n\t * returns maximum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.max = function () {\n\t\treturn mathOperation(arguments, this, \"max\");\n\t};\n\n\t/**\n\t * get the diffrence between two date\n\t * @since 1.4.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {String} unit - the unit of the measurment\n\t * @param {Boolean} addOne - add one day to result\n\t * @returns {Number} diffrence\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.diff = function (date, unit, addOne = false) {\n\t\tif (this.error) return this.error;\n\t\tdate = typesToArray(this.c, date);\n\t\tif (!this.isValid(...date)) return \"تاریخ نامعتبر\";\n\t\tlet result =\n\t\t\tthis.timestamp() -\n\t\t\tthis.clone()\n\t\t\t\t.parse(...date)\n\t\t\t\t.timestamp();\n\t\tswitch (unit) {\n\t\t\tcase \"y\":\n\t\t\tcase \"year\":\n\t\t\tcase \"years\":\n\t\t\t\tresult = this.d.year - date[0];\n\t\t\t\tbreak;\n\t\t\tcase \"M\":\n\t\t\tcase \"month\":\n\t\t\tcase \"months\":\n\t\t\t\tresult = this.d.year * 12 + this.d.month - (+date[0] * 12 + +date[1]);\n\t\t\t\tbreak;\n\t\t\tcase \"d\":\n\t\t\tcase \"date\":\n\t\t\tcase \"day\":\n\t\t\tcase \"days\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60 / 24);\n\t\t\t\tbreak;\n\t\t\tcase \"h\":\n\t\t\tcase \"hour\":\n\t\t\tcase \"hours\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"m\":\n\t\t\tcase \"minute\":\n\t\t\tcase \"minutes\":\n\t\t\t\tresult = Math.ceil(result / 1000 / 60);\n\t\t\t\tbreak;\n\t\t\tcase \"s\":\n\t\t\tcase \"second\":\n\t\t\tcase \"seconds\":\n\t\t\t\tresult = Math.ceil(result / 1000);\n\t\t\t\tbreak;\n\t\t\tcase \"ms\":\n\t\t\tcase \"millisecond\":\n\t\t\tcase \"milliseconds\":\n\t\t}\n\t\treturn addOne ? result + (result >= 0 ? 1 : -1) : result;\n\t};\n\n\t////////////////////--- Version 1.5.0 ---////////////////////\n\n\t/**\n\t * return the array of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return array of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toArray = function () {\n\t\tif (this.error) return this.error;\n\t\tif (!arguments.length) {\n\t\t\treturn Object.values(this.d);\n\t\t}\n\t\tlet formats = typesToArray(this.c, ...arguments);\n\t\treturn [\n\t\t\tthis.year(formats[0]),\n\t\t\tthis.month(formats[1]),\n\t\t\tthis.date(formats[2]),\n\t\t\tthis.hour(formats[3]),\n\t\t\tthis.minute(formats[4]),\n\t\t\tthis.second(formats[5]),\n\t\t\tthis.millisecond(formats[6]),\n\t\t];\n\t};\n\n\t////////////////////--- Version 2.0.0 ---////////////////////\n\n\t/**\n\t * get the diffrence between two date in a human-readable format\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {Boolean} suffix - add suffix or not\n\t * @returns {String} if date valid, return diff human-readable format\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.diffForHumans = function (date, suffix = true) {\n\t\tif (this.error) return this.error;\n\t\tlet result = this.diff(date, \"s\");\n\t\tif (typeof result == \"string\") return \"تاریخ نامعتبر\";\n\t\tlet prefix = result > 0 ? \"آینده\" : \"پیش\";\n\t\tresult = Math.abs(result);\n\n\t\tif (result == 0) return \"هم اکنون\";\n\t\telse if (result < 45) result = \"لحظات\";\n\t\telse if ((result /= 60) < 45)\n\t\t\t// divide by 60, for getting minute\n\t\t\tresult = Math.round(result) + \" \" + \"دقیقه\";\n\t\telse if ((result /= 60) < 23.5)\n\t\t\t// divide by 60, for getting hour\n\t\t\tresult = Math.round(result) + \" \" + \"ساعت\";\n\t\telse if ((result /= 24) < 26)\n\t\t\t// divide by 24, for getting day\n\t\t\tresult = Math.round(result) + \" \" + \"روز\";\n\t\telse if (result < 320) result = Math.round(result / 30) + \" \" + \"ماه\";\n\t\telse result = Math.round(result / 365) + \" \" + \"سال\";\n\t\treturn result + (suffix ? \" \" + prefix : \"\");\n\t};\n\n\t/**\n\t * convert a jalali date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.fromJalali = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date = gtj();\n\t\telse if (this.isPersianDate(date[0])) date = date[0].toArray();\n\t\telse date = typesToArray(this.c, ...date);\n\t\tif (this.c == \"jalali\") {\n\t\t\t//plus sign before a variable, convert variable to int\n\t\t\tthis.d.year = +date[0];\n\t\t\tthis.d.month = +date[1] || 1;\n\t\t\tthis.d.date = +date[2] || 1;\n\t\t\tthis.d.hour = +date[3] || 0;\n\t\t\tthis.d.minute = +date[4] || 0;\n\t\t\tthis.d.second = +date[5] || 0;\n\t\t\tthis.d.millisecond = +date[6] || 0;\n\t\t} else setGregorianDate(jtg(...date), this);\n\n\t\tif (!this.isValid()) return showError(\"تاریخ نامعتبر\", this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.fromGregorian = function (...date) {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\n\t\tif (!date.length) date[0] = new Date().getTime();\n\t\tif (this.isPersianDate(date[0])) {\n\t\t\tdate = date[0].toArray();\n\t\t} else if (!isTimestamp(date[0])) {\n\t\t\tdate = typesToArray(this.c, ...date);\n\t\t\tdate[6] = +date[6] || 0;\n\t\t\tdate[5] = +date[5] || 0;\n\t\t\tdate[4] = +date[4] || 0;\n\t\t\tdate[3] = +date[3] || 0;\n\t\t\tdate[2] = +date[2] || 1;\n\t\t\tdate[1] = +date[1] || 1;\n\t\t}\n\t\tdate[0] = +date[0];\n\n\t\tif (date.length > 1) {\n\t\t\tif (!this.isValid(...date)) return showError(\"تاریخ نامعتبر\", this);\n\t\t\t--date[1]; // this is month; becuse the Date get month from 0, subtract one\n\t\t}\n\n\t\tdate = new Date(...date);\n\t\tif (date == \"Invalid Date\") return showError(\"تاریخ نامعتبر\", this);\n\t\tif (this.c == \"jalali\") setJalaliDate(gtj(date), this);\n\t\telse setGregorianDate(date, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n\t * @returns {PersianDate} return class with persian date\n\t */\n\tPersianDate.prototype.calendar = function (calendar) {\n\t\tif (!calendar) return this.c;\n\t\tif (calendar[0] == \"j\" && this.c[0] == \"g\") {\n\t\t\tif (!this.error) setJalaliDate(gtj(this.toDate()), this);\n\t\t\tthis.c = \"jalali\";\n\t\t} else if (calendar[0] == \"g\" && this.c[0] == \"j\") {\n\t\t\tif (!this.error) setGregorianDate(this.toDate(), this);\n\t\t\tthis.c = \"gregorian\";\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * return number of weeks in year\n\t * @since 2.0.0\n\t * @param {Number|String} year - the year\n\t * @returns {Number} number of weeks in year\n\t */\n\tPersianDate.prototype.getWeeksInYear = function (year) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) year = this.year();\n\n\t\tlet dayOfYearFormat = this.c == \"jalali\" ? \"jd\" : \"d\";\n\t\tlet firstOfYear = this.clone().parse(year);\n\t\tlet firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\t\tlet lastOfYear = firstOfYear.clone().addYear().subDay();\n\t\tlet lastOfYearDay = lastOfYear.date(dayOfYearFormat);\n\t\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\t\telse firstOfYear.subDay(firstOfYearDay);\n\n\t\tif (lastOfYearDay > 3) lastOfYear.addDay(7 - lastOfYearDay);\n\t\telse lastOfYear.subDay(lastOfYearDay);\n\t\treturn Math.ceil(lastOfYear.diff(firstOfYear, \"date\") / 7);\n\t};\n\n\t/**\n\t * return the Date instance of PersianDate\n\t * @since 2.0.0\n\t * @returns {Date} if date valid, return Date instance of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toDate = function () {\n\t\tif (this.error) return this.error;\n\t\tif (this.c == \"jalali\") return jtg(...this.toArray());\n\t\tlet date = this.toArray();\n\t\t--date[1];\n\t\treturn new Date(...date);\n\t};\n\n\t/**\n\t * change the date to start of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.startOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 0;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 0;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 0;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 0;\n\t\tif (unit[0] == \"d\") return this;\n\t\tif (unit[0] == 'w')\n\t\t\treturn this.subDay(getDayOfWeek(this.toDate(), this.c, 'array'));\n\t\tthis.d.date = 1;\n\t\tif (unit[0] == 'q')\n\t\t\treturn this.quarter(this.quarter())\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 1;\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\t/**\n\t * change the date to end of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.endOf = function (unit = \"year\") {\n\t\tthis.d.millisecond = 999;\n\t\tif (unit[0] == \"s\") return this;\n\t\tthis.d.second = 59;\n\t\tif (unit == \"m\" || unit == \"minute\") return this;\n\t\tthis.d.minute = 59;\n\t\tif (unit[0] == \"h\") return this;\n\t\tthis.d.hour = 23;\n\t\tif (unit[0] == \"d\") return this;\n\t\tif (unit[0] == 'w')\n\t\t\treturn this.addDay(7 - getDayOfWeek(this.toDate(), this.c));\n\t\tif (unit[0] == 'q') {\n\t\t\tthis.quarter(this.quarter()).addMonth(2)\n\t\t\tthis.d.date = this.getDaysInMonth();\n\t\t\treturn this;\n\t\t}\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit == \"M\" || unit == \"month\") return this;\n\t\tthis.d.month = 12;\n\t\tthis.d.date = this.getDaysInMonth();\n\t\tif (unit[0] == \"y\") return this;\n\t};\n\n\tPersianDate.prototype.valueOf = function () {\n\t\treturn this.timestamp();\n\t};\n\n\t////////////////////--- Version 2.3.0 ---////////////////////\n\n\t/**\n\t * change the time\n\t * @since 2.3.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} time - the new time\n\t * @param {Null|String|Number} time.h - hour of date\n\t * @param {Null|String|Number} time.hour - hour of date\n\t * @param {Null|String|Number} time.hours - hour of date\n\t * @param {Null|String|Number} time.m - minute of date\n\t * @param {Null|String|Number} time.minute - minute of date\n\t * @param {Null|String|Number} time.minutes - minute of date\n\t * @param {Null|String|Number} time.s - second of date\n\t * @param {Null|String|Number} time.second - second of date\n\t * @param {Null|String|Number} time.seconds - second of date\n\t * @param {Null|String|Number} time.ms - millisecond of date\n\t * @param {Null|String|Number} time.millisecond - millisecond of date\n\t * @param {Null|String|Number} time.milliseconds - millisecond of date\n\t * @returns {PersianDate|Array} if set the time, returns class,\n\t * else returns an array of time\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.time = function (...time) {\n\t\tif (this.error) return this.error;\n\t\tif (!time.length)\n\t\t\treturn this.toArray().slice(3)\n\t\tlet times = []\n\t\tif (time[0] instanceof PersianDate)\n\t\t\ttimes = time[0].calendar(this.c).time();\n\t\telse if (time[0] instanceof Date)\n\t\t\ttimes = [\n\t\t\t\ttime[0].getHours(),\n\t\t\t\ttime[0].getMinutes(),\n\t\t\t\ttime[0].getSeconds(),\n\t\t\t\ttime[0].getMilliseconds()\n\t\t\t]\n\t\telse if (Object.prototype.toString.call(time[0]) === \"[object Object]\")\n\t\t\ttimes = [\n\t\t\t\ttime[0].h || time[0].hour || time[0].hours || 0,\n\t\t\t\ttime[0].m || time[0].minute || time[0].minutes || 0,\n\t\t\t\ttime[0].s || time[0].second || time[0].seconds || 0,\n\t\t\t\ttime[0].ms || time[0].millisecond || time[0].milliseconds || 0,\n\t\t\t];\n\t\telse\n\t\t\ttimes = typesToArray(this.c, ...time)\n\t\tif (this.isValidTime(...times)) {\n\t\t\treturn this.hour(times[0] || 0).minute(times[1] || 0).second(times[2] || 0).millisecond(times[3] || 0)\n\t\t}\n\t\telse\n\t\t\treturn showError(\"تاریخ نامعتبر\", this)\n\t};\n\n\t/**\n\t * show warning for deprecated functions\n\t * @since 2.0.0\n\t * @param {String} msg - the message for warning\n\t */\n\tconst deprecate = (msg) => {\n\t\tconsole.warn(msg);\n\t};\n\n\t/**\n\t * check the input is timestamp\n\t * @since 2.0.0\n\t * @param {Number|String} timestamp - input that must be checked\n\t * @returns {Boolean} if input was timestamp, return true\n\t */\n\tconst isTimestamp = (timestamp) => {\n\t\treturn !isNaN(timestamp) && Math.floor(timestamp / 10000) > 0;\n\t};\n\n\t/**\n\t * set the date with Date instance\n\t * @since 2.0.0\n\t * @param {Date} date - the Date instance\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setGregorianDate = (date, instance) => {\n\t\tinstance.d = {\n\t\t\tyear: date.getFullYear(),\n\t\t\tmonth: date.getMonth() + 1,\n\t\t\tdate: date.getDate(),\n\t\t\thour: date.getHours(),\n\t\t\tminute: date.getMinutes(),\n\t\t\tsecond: date.getSeconds(),\n\t\t\tmillisecond: date.getMilliseconds(),\n\t\t};\n\t};\n\n\t/**\n\t * set the date with array of persian date\n\t * @since 2.0.0\n\t * @param {Array} date - the array of persian date\n\t * @param {PersianDate} instance - the PersianDate instance\n\t */\n\tconst setJalaliDate = (date, instance) => {\n\t\t[\n\t\t\tinstance.d.year,\n\t\t\tinstance.d.month,\n\t\t\tinstance.d.date,\n\t\t\tinstance.d.hour,\n\t\t\tinstance.d.minute,\n\t\t\tinstance.d.second,\n\t\t\tinstance.d.millisecond,\n\t\t] = date;\n\t};\n\n\t/**\n\t * compare the dates\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - the date\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'>'|'>='|'<'|'<='} operator - the operator for compare\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tconst compareDate = (instance, operator, date) => {\n\t\tdate = typesToArray(instance.c, ...date);\n\n\t\tif (instance.isValid(...date))\n\t\t\treturn eval(\n\t\t\t\t\"instance.timestamp()\" +\n\t\t\t\toperator +\n\t\t\t\t\"instance.clone().parse(...date).timestamp()\"\n\t\t\t);\n\t\treturn false;\n\t};\n\n\t/**\n\t * do the math operation on dates\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} values - the dates\n\t * @param {PersianDate} instance - the instance of PersianDate\n\t * @param {'min'|'max'} operation - the operation\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tconst mathOperation = (values, instance, operation) => {\n\t\tif (!values.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet args = Object.values(values).concat();\n\t\tlet argsNumber = args.map((date) => {\n\t\t\tdate = typesToArray(instance.c, date);\n\t\t\tif (instance.isValid(...date))\n\t\t\t\treturn instance\n\t\t\t\t\t.clone()\n\t\t\t\t\t.parse(...date)\n\t\t\t\t\t.timestamp();\n\t\t\treturn false;\n\t\t});\n\t\tif (argsNumber.indexOf(false) != -1) return false;\n\t\treturn eval(\n\t\t\t\"args[argsNumber.indexOf(Math.\" + operation + \"(...argsNumber))]\"\n\t\t);\n\t};\n\n\tif (calendarVal) this.calendar(calendarVal);\n\tif (dateVal) {\n\t\tif (calendarVal && calendarVal[0] == \"j\") this.fromJalali(dateVal);\n\t\telse this.fromGregorian(dateVal);\n\t} else this.now();\n};\n\n/**\n\t * receives year and determined that is leap year or not\n\t * @static\n\t * @param {Number} year - the year to be determined is a leap or not\n\t * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n\t * @returns {Boolean} if is leap year, returns true\n\t */\nPersianDate.__proto__.isLeapYear = isLeapYear;\n\n/**\n\t * checks date is a native js Date object\n\t * @static\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a native js Date, return true\n\t */\nPersianDate.__proto__.isDate = isDate\n\n/**\n * checks date is a PersianDate object\n * @static\n * @since 1.3.0\n * @param {*} date date that must be checked\n * @returns {Boolean} if date is a PersianDate, return true\n */\nPersianDate.__proto__.isPersianDate = isPersianDate\n\n//for next version\n//FIXME: static methods and non static methods --> do better\n//TODO: combine the add functions with sub functions\n//TODO: add time fuction just for change time\n//TODO: add the special character for get in all calendars\n//TODO: convert to class\n//TODO: refactor\n\nexport default PersianDate;\n\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n"],"sourceRoot":""}