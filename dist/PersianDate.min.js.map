{"version":3,"sources":["webpack://PersianDate/webpack/universalModuleDefinition","webpack://PersianDate/./src/create/now.js","webpack://PersianDate/./src/create/parse.js","webpack://PersianDate/./src/create/clone.js","webpack://PersianDate/./src/create/fromJalali.js","webpack://PersianDate/./src/create/fromGregorian.js","webpack://PersianDate/./src/create/calendar.js","webpack://PersianDate/./src/add-sub/addYear.js","webpack://PersianDate/./src/add-sub/addMonth.js","webpack://PersianDate/./src/add-sub/addDay.js","webpack://PersianDate/./src/add-sub/addQuarter.js","webpack://PersianDate/./src/add-sub/addWeek.js","webpack://PersianDate/./src/add-sub/addHour.js","webpack://PersianDate/./src/add-sub/addMinute.js","webpack://PersianDate/./src/add-sub/addSecond.js","webpack://PersianDate/./src/add-sub/addMillisecond.js","webpack://PersianDate/./src/add-sub/subYear.js","webpack://PersianDate/./src/add-sub/subMonth.js","webpack://PersianDate/./src/add-sub/subDay.js","webpack://PersianDate/./src/add-sub/subQuarter.js","webpack://PersianDate/./src/add-sub/subWeek.js","webpack://PersianDate/./src/add-sub/subHour.js","webpack://PersianDate/./src/add-sub/subMinute.js","webpack://PersianDate/./src/add-sub/subSecond.js","webpack://PersianDate/./src/add-sub/subMillisecond.js","webpack://PersianDate/./src/conversion/toString.js","webpack://PersianDate/./src/conversion/toArray.js","webpack://PersianDate/./src/conversion/toObject.js","webpack://PersianDate/./src/conversion/toDate.js","webpack://PersianDate/./src/diff/diff.js","webpack://PersianDate/./src/diff/diffForHumans.js","webpack://PersianDate/./src/PersianDate.js","webpack://PersianDate/./src/base/compare.js","webpack://PersianDate/./src/base/gtj.js","webpack://PersianDate/./src/base/jtg.js","webpack://PersianDate/./src/base/warn.js","webpack://PersianDate/./src/base/invalid.js","webpack://PersianDate/./src/base/typesToArray.js","webpack://PersianDate/./src/base/ordinalNumber.js","webpack://PersianDate/./src/base/addPrefix.js","webpack://PersianDate/./src/base/setJalaliDate.js","webpack://PersianDate/./src/base/setGregorianDate.js","webpack://PersianDate/./src/base/error.js","webpack://PersianDate/./src/base/getDayLabel.js","webpack://PersianDate/./src/base/getDayOfWeek.js","webpack://PersianDate/./src/base/getDayOfYear.js","webpack://PersianDate/./src/base/getWeekOfYear.js","webpack://PersianDate/./src/base/mathOperation.js","webpack://PersianDate/./src/base/isTimestamp.js","webpack://PersianDate/./src/comparison/isPersianDate.js","webpack://PersianDate/./src/comparison/isValid.js","webpack://PersianDate/./src/comparison/isValidDate.js","webpack://PersianDate/./src/comparison/isValidTime.js","webpack://PersianDate/./src/comparison/isSame.js","webpack://PersianDate/./src/comparison/isBetween.js","webpack://PersianDate/./src/comparison/isDate.js","webpack://PersianDate/./src/comparison/isLeapYear.js","webpack://PersianDate/./src/set-get/year.js","webpack://PersianDate/./src/set-get/quarter.js","webpack://PersianDate/./src/set-get/month.js","webpack://PersianDate/./src/set-get/week.js","webpack://PersianDate/./src/set-get/date.js","webpack://PersianDate/./src/set-get/hour.js","webpack://PersianDate/./src/set-get/minute.js","webpack://PersianDate/./src/set-get/second.js","webpack://PersianDate/./src/set-get/millisecond.js","webpack://PersianDate/./src/set-get/timestamp.js","webpack://PersianDate/./src/set-get/getDaysInMonth.js","webpack://PersianDate/./src/set-get/getWeeksInYear.js","webpack://PersianDate/./src/set-get/startOf.js","webpack://PersianDate/./src/set-get/endOf.js","webpack://PersianDate/./src/set-get/time.js","webpack://PersianDate/./src/utils.js","webpack://PersianDate/webpack/bootstrap","webpack://PersianDate/webpack/runtime/define property getters","webpack://PersianDate/webpack/runtime/hasOwnProperty shorthand","webpack://PersianDate/webpack/startup"],"names":["root","factory","exports","module","define","amd","global","now","date","Date","this","c","parse","fromJalali","fromGregorian","clone","Object","assign","create","getPrototypeOf","JSON","stringify","length","d","year","month","hour","minute","second","millisecond","isValid","isPersianDate","calendar","toArray","getTime","error","toDate","addYear","checkDate","subYear","Math","abs","isValidDate","subDay","addMonth","subMonth","monthToStartNewYear","addDay","day","dayToStartNextMonth","getDaysInMonth","daysInMonth","addQuarter","quarter","subQuarter","addWeek","week","subWeek","addHour","subHour","hourToNextDay","addMinute","subMinute","minuteToNextHour","addSecond","subSecond","secondToNextMinute","addMillisecond","subMillisecond","millisecondToNextSecond","pastMonth","pastDays","pastHours","pastMinute","pastSeconds","pastMilliseconds","format","rawTexts","replace","_matched","text","push","jalali","gregorian","matchedFormats","match","dateString","i","substring","indexOf","search","timestamp","substr","String","arguments","values","formats","toObject","diff","unit","addOne","result","ceil","diffForHumans","suffix","prefix","round","PersianDate","dateVal","calendarVal","prototype","call","setDate","value","valueOf","getWeeksInYear","startOf","endOf","time","toString","min","max","isLeapYear","isValidTime","isSame","isBefore","isAfter","isSameOrBefore","isSameOrAfter","isBetween","from","to","method","isDate","compare","operator","eval","gtj","jYear","jMonth","jDay","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","newYear","days","parseInt","jtg","gYear","gMonth","gDay","daysOfMonths","v","warn","msg","console","invalid","errorText","typesToArray","split","Array","isArray","y","years","M","months","h","hours","m","minutes","s","seconds","ms","milliseconds","ordinalNumber","number","mode","ordinalNumbers","addPrefix","repeat","setJalaliDate","setGregorianDate","getDayLabel","getDay","getDayOfWeek","getDayOfYear","getWeekOfYear","firstOfYear","firstOfYearDay","dayOfYearFormat","weekNumber","weeksInYear","mathOperation","operation","args","argsNumber","map","includes","isTimestamp","isNaN","floor","some","e","trim","getDefaultFormat","slice","jQuarter","gQuarter","weekOfYear","jWeekOfYear","gWeekOfYear","jDate","gDate","dayOfWeek","dayOfYear","getDayOfYearFormat","lastOfYear","lastOfYearDay","t","times","CALENDAR","1","2","3","4","5","6","7","8","9","10","11","12","label","0","numbers","13","14","15","16","17","18","19","20","30","40","50","60","70","80","90","100","200","300","remainder","REGEX","isNumeric","separators","betweenBacktick","TIMETYPE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","key","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","__webpack_exports__"],"mappings":"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","file":"PersianDate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PersianDate\"] = factory();\n\telse\n\t\troot[\"PersianDate\"] = factory();\n})(global, function() {\nreturn ","import { setJalaliDate, setGregorianDate } from \"../base\";\n\nexport function now() {\n\tconst date = new Date();\n\n\tif (this.c == \"jalali\") {\n\t\tsetJalaliDate.call(this, date);\n\t} else {\n\t\tsetGregorianDate.call(this, date);\n\t}\n\n\treturn this;\n}\n","export function parse(...date) {\n\tif (this.c == \"jalali\") {\n\t\treturn this.fromJalali(...date);\n\t} else {\n\t\treturn this.fromGregorian(...date);\n\t}\n}\n","export function clone() {\n\treturn Object.assign(\n\t\tObject.create(Object.getPrototypeOf(this)),\n\t\tJSON.parse(JSON.stringify(this))\n\t);\n}\n","import { typesToArray, gtj, jtg, setGregorianDate, invalid } from \"../base\";\n\nexport function fromJalali(...date) {\n\tif (!date.length) date = gtj();\n\telse date = typesToArray(\"jalali\", ...date);\n\n\tif (this.c == \"jalali\") {\n\t\tthis.d.year = +date[0];\n\t\tthis.d.month = +date[1] || 1;\n\t\tthis.d.date = +date[2] || 1;\n\t\tthis.d.hour = +date[3] || 0;\n\t\tthis.d.minute = +date[4] || 0;\n\t\tthis.d.second = +date[5] || 0;\n\t\tthis.d.millisecond = +date[6] || 0;\n\t} else {\n\t\tsetGregorianDate.call(this, jtg(...date));\n\t}\n\n\tif (!this.isValid()) return invalid.call(this, \"تاریخ نامعتبر\");\n\treturn this;\n}\n","import {\n\ttypesToArray,\n\tsetGregorianDate,\n\tsetJalaliDate,\n\tinvalid,\n\tisTimestamp,\n} from \"../base\";\nimport { isValid } from \"../comparison\";\n\nexport function fromGregorian(...date) {\n\tif (!date.length) date[0] = new Date().getTime();\n\telse if (this.isPersianDate(date[0])) {\n\t\tdate = date[0].clone().calendar(\"g\").toArray();\n\t} else if (!isTimestamp(date[0])) {\n\t\tdate = typesToArray(\"gregorian\", ...date);\n\t\tdate[6] = +date[6] || 0;\n\t\tdate[5] = +date[5] || 0;\n\t\tdate[4] = +date[4] || 0;\n\t\tdate[3] = +date[3] || 0;\n\t\tdate[2] = +date[2] || 1;\n\t\tdate[1] = +date[1] || 1;\n\t\tdate[0] = +date[0];\n\t}\n\n\tif (date.length > 1) {\n\t\tif (!isValid(\"gregorian\", ...date))\n\t\t\treturn invalid.call(this, \"تاریخ نامعتبر\");\n\t\t--date[1]; // this is month; becuse the Date get month from 0, subtract one\n\t}\n\n\tdate = new Date(...date);\n\tif (date == \"Invalid Date\") return invalid.call(this, \"تاریخ نامعتبر\");\n\tif (this.c == \"jalali\") {\n\t\tsetJalaliDate.call(this, date);\n\t} else {\n\t\tsetGregorianDate.call(this, date);\n\t}\n\treturn this;\n}\n","import { setJalaliDate, setGregorianDate } from \"../base\";\n\nexport function calendar(c) {\n\tif (!c) return this.c;\n\n\tif (c[0] == \"j\" && this.c[0] != \"j\") {\n\t\tif (!this.error) setJalaliDate.call(this, this.toDate());\n\t\tthis.c = \"jalali\";\n\t} else if (c[0] == \"g\" && this.c[0] != \"g\") {\n\t\tif (!this.error) setGregorianDate.call(this, this.toDate());\n\t\tthis.c = \"gregorian\";\n\t}\n\n\treturn this;\n}\n","export function addYear(year, checkDate) {\n\t// if the number was negative, send to subYear method\n\tif (year < 0) return this.subYear(Math.abs(year));\n\tthis.d.year += +year; //plus sign before a variable, convert variable to int\n\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\treturn this;\n}\n","export function addMonth(month, checkDate) {\n\tif (month < 0)\n\t\t// if the number was negative, send to subMonth method\n\t\treturn this.subMonth(Math.abs(month));\n\tmonth = +month; // plus sign before a variable, convert variable to int\n\n\tconst monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n\tif (monthToStartNewYear > month) {\n\t\tthis.d.month += month;\n\t} else {\n\t\tthis.addYear(1, false);\n\t\tthis.d.month = 1;\n\t\tmonth -= monthToStartNewYear;\n\t\twhile (month >= 12) {\n\t\t\tmonth -= 12;\n\t\t\tthis.addYear(1, false);\n\t\t}\n\t\tif (month != 0) {\n\t\t\tthis.d.month += month;\n\t\t}\n\t}\n\n\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\treturn this;\n}\n","export function addDay(day) {\n\tif (day < 0)\n\t\t// if the number was negative, send to subDay method\n\t\treturn this.subDay(Math.abs(day));\n\tday = +day; //plus sign before a variable, convert variable to int\n\n\tconst dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n\tif (dayToStartNextMonth > day) {\n\t\tthis.d.date += day;\n\t} else {\n\t\tthis.addMonth(1, false);\n\t\tthis.d.date = 1;\n\t\tday -= dayToStartNextMonth;\n\t\tlet daysInMonth = this.getDaysInMonth();\n\t\twhile (day >= daysInMonth) {\n\t\t\tday -= daysInMonth;\n\t\t\tthis.addMonth(1, false);\n\t\t\tdaysInMonth = this.getDaysInMonth();\n\t\t}\n\t\tif (day != 0) {\n\t\t\tthis.d.date += day;\n\t\t}\n\t}\n\n\treturn this;\n}\n","export function addQuarter(quarter, checkDate) {\n\t// if the number was negative, send to subQuarter method\n\tif (quarter < 0) return this.subQuarter(Math.abs(quarter));\n\treturn this.addMonth(+quarter * 3, checkDate);\n}\n","export function addWeek(week, checkDate) {\n\t// if the number was negative, send to subWeek method\n\tif (week < 0) return this.subWeek(Math.abs(week));\n\treturn this.addDay(+week * 7, checkDate);\n}\n","export function addHour(hour) {\n\tif (hour < 0)\n\t\t// if the number was negative, send to subHour method\n\t\treturn this.subHour(Math.abs(hour));\n\thour = +hour; //plus sign before a variable, convert variable to int\n\twhile (hour >= 24) {\n\t\thour -= 24;\n\t\tthis.addDay(1, false);\n\t}\n\tconst hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n\tif (hour >= hourToNextDay) {\n\t\tthis.addDay(1, false);\n\t\thour -= hourToNextDay;\n\t\tthis.d.hour = hour;\n\t} else this.d.hour += hour;\n\n\treturn this;\n}\n","export function addMinute(minute) {\n\tif (minute < 0)\n\t\t// if the number was negative, send to subMinute method\n\t\treturn this.subMinute(Math.abs(minute));\n\tminute = +minute; //plus sign before a variable, convert variable to int\n\twhile (minute >= 60) {\n\t\tthis.addHour(1, false);\n\t\tminute -= 60;\n\t}\n\tconst minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n\tif (minute >= minuteToNextHour) {\n\t\tthis.addHour(1, false);\n\t\tminute -= minuteToNextHour;\n\t\tthis.d.minute = minute;\n\t} else this.d.minute += minute;\n\n\treturn this;\n}\n","export function addSecond(second) {\n\tif (second < 0)\n\t\t// if the number was negative, send to subSecond method\n\t\treturn this.subSecond(Math.abs(second));\n\tsecond = +second; //plus sign before a variable, convert variable to int\n\twhile (second >= 60) {\n\t\tthis.addMinute(1, false);\n\t\tsecond -= 60;\n\t}\n\tconst secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n\tif (second >= secondToNextMinute) {\n\t\tthis.addMinute(1, false);\n\t\tsecond -= secondToNextMinute;\n\t\tthis.d.second = second;\n\t} else this.d.second += second;\n\n\treturn this;\n}\n","export function addMillisecond(millisecond) {\n\tif (millisecond < 0)\n\t\t// if the number was negative, send to subMillisecond method\n\t\treturn this.subMillisecond(Math.abs(millisecond));\n\tmillisecond = +millisecond; //plus sign before a variable, convert variable to int\n\twhile (millisecond >= 1000) {\n\t\tthis.addSecond(1, false);\n\t\tmillisecond -= 1000;\n\t}\n\tconst millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n\tif (millisecond >= millisecondToNextSecond) {\n\t\tthis.addSecond(1, false);\n\t\tmillisecond -= millisecondToNextSecond;\n\t\tthis.d.millisecond = millisecond;\n\t} else this.d.millisecond += millisecond;\n\n\treturn this;\n}\n","export function subYear(year, checkDate) {\n\tthis.d.year -= Math.abs(year);\n\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\treturn this;\n}\n","export function subMonth(month, checkDate) {\n\tmonth = Math.abs(month); //plus sign before a variable, convert variable to int\n\tconst pastMonth = this.d.month; //pastMonth -> Number of month that is past\n\tif (pastMonth > month) {\n\t\tthis.d.month -= month;\n\t} else {\n\t\tthis.subYear(1, false);\n\t\tthis.d.month = 12;\n\t\tmonth -= pastMonth;\n\t\twhile (month >= 12) {\n\t\t\tthis.subYear(1, false);\n\t\t\tmonth -= 12;\n\t\t}\n\t\tif (month != 0) {\n\t\t\tthis.d.month -= month;\n\t\t}\n\t}\n\n\twhile (checkDate && !this.isValidDate()) this.subDay(1, false);\n\treturn this;\n}\n","export function subDay(day) {\n\tday = Math.abs(day);\n\tlet pastDays = this.d.date; // pastDays -> Number of days that is past\n\tif (pastDays > day) {\n\t\tthis.d.date -= day;\n\t} else {\n\t\tthis.subMonth(1, false);\n\t\tlet daysInMonth = this.getDaysInMonth();\n\t\tthis.d.date = daysInMonth;\n\t\tday -= pastDays;\n\t\twhile (day >= daysInMonth) {\n\t\t\tday -= daysInMonth;\n\t\t\tthis.subMonth(1, false);\n\t\t\tdaysInMonth = this.getDaysInMonth();\n\t\t}\n\t\tthis.d.date = daysInMonth - day;\n\t}\n\n\treturn this;\n}\n","export function subQuarter(quarter, checkDate) {\n\tquarter = Math.abs(quarter);\n\treturn this.subMonth(quarter * 3, checkDate);\n}\n","export function subWeek(week, checkDate) {\n\tweek = Math.abs(week);\n\treturn this.subDay(week * 7, checkDate);\n}\n","export function subHour(hour) {\n\thour = Math.abs(hour);\n\twhile (hour >= 24) {\n\t\thour -= 24;\n\t\tthis.subDay(1, false);\n\t}\n\tconst pastHours = this.d.hour; // pastHours -> Number of hours that is past\n\tif (hour > pastHours) {\n\t\tthis.subDay(1, false);\n\t\thour -= pastHours;\n\t\tthis.d.hour = 24 - hour;\n\t} else this.d.hour -= hour;\n\n\treturn this;\n}\n","export function subMinute(minute) {\n\tminute = Math.abs(minute);\n\twhile (minute >= 60) {\n\t\tminute -= 60;\n\t\tthis.subHour(1, false);\n\t}\n\tconst pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n\tif (minute > pastMinute) {\n\t\tthis.subHour(1, false);\n\t\tminute -= pastMinute;\n\t\tthis.d.minute = 60 - minute;\n\t} else this.d.minute -= minute;\n\n\treturn this;\n}\n","export function subSecond(second) {\n\tsecond = Math.abs(second);\n\twhile (second >= 60) {\n\t\tsecond -= 60;\n\t\tthis.subMinute(1, false);\n\t}\n\tconst pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n\tif (second > pastSeconds) {\n\t\tthis.subMinute(1, false);\n\t\tsecond -= pastSeconds;\n\t\tthis.d.second = 60 - second;\n\t} else this.d.second -= second;\n\n\treturn this;\n}\n","export function subMillisecond(millisecond) {\n\tmillisecond = Math.abs(millisecond);\n\twhile (millisecond >= 1000) {\n\t\tmillisecond -= 1000;\n\t\tthis.subSecond(1, false);\n\t}\n\tconst pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n\tif (millisecond > pastMilliseconds) {\n\t\tthis.subSecond(1, false);\n\t\tmillisecond -= pastMilliseconds;\n\t\tthis.d.millisecond = 1000 - millisecond;\n\t} else this.d.millisecond -= millisecond;\n\n\treturn this;\n}\n","import { REGEX, TIMETYPE } from \"../utils\";\n\nconst jalali = (format) => {\n\treturn format\n\t\t.replace(/\\?/g, \"j\")\n\t\t.replace(/datetime/gi, \"jYYYY/jMM/jDD HH:mm\")\n\t\t.replace(/date/gi, \"jYYYY/jMM/jDD\")\n\t\t.replace(/time/gi, \"HH:mm\");\n};\n\nconst gregorian = (format) => {\n\treturn format\n\t\t.replace(/\\?/g, \"\")\n\t\t.replace(/datetime/gi, \"YYYY-MM-DD HH:mm\")\n\t\t.replace(/date/gi, \"YYYY-MM-DD\")\n\t\t.replace(/time/gi, \"HH:mm\");\n};\n\nexport function toString(format) {\n\tconst rawTexts = [];\n\tformat = format.replace(REGEX[\"betweenBacktick\"], (_matched, text) => {\n\t\trawTexts.push(text);\n\t\treturn \"###\";\n\t});\n\tswitch (this.c[0]) {\n\t\tcase \"j\":\n\t\t\tformat = jalali(format);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tformat = gregorian(format);\n\t}\n\tconst matchedFormats = format.match(REGEX[\"format\"]);\n\tlet dateString = \"\";\n\tfor (const i of matchedFormats) {\n\t\tdateString += format.substring(0, format.indexOf(i));\n\n\t\tif (i.search(/Y|y/) != -1) dateString += this.year(i);\n\t\telse if (i.search(/M/) != -1) dateString += this.month(i);\n\t\telse if (i.search(/Q/) != -1) dateString += this.quarter(i);\n\t\telse if (i.search(/D|d/) != -1) dateString += this.date(i);\n\t\telse if (i.search(/W|w/) != -1) dateString += this.week(i);\n\t\telse if (i.search(/H|h|k/) != -1) dateString += this.hour(i);\n\t\telse if (i.search(/m/) != -1) dateString += this.minute(i);\n\t\telse if (i.search(/s/) != -1) dateString += this.second(i);\n\t\telse if (i.search(/c|C/) != -1) dateString += this.millisecond(i);\n\t\telse if (i.search(/t/) != -1) dateString += this.timestamp();\n\t\telse if (i.search(/a|A/) != -1) dateString += TIMETYPE(this.d.hour, i);\n\n\t\tformat = format.substr(format.indexOf(i) + i.length);\n\t}\n\tdateString += format;\n\tfor (let i = 0; i < rawTexts.length; i++)\n\t\tdateString = dateString.replace(\"###\", rawTexts[i]);\n\treturn String(dateString);\n}\n","import { typesToArray } from \"../base\";\n\nexport function toArray() {\n\tif (!arguments.length) {\n\t\treturn Object.values(this.d);\n\t}\n\tconst formats = typesToArray(this.c, ...arguments);\n\treturn [\n\t\tthis.year(formats[0]),\n\t\tthis.month(formats[1]),\n\t\tthis.date(formats[2]),\n\t\tthis.hour(formats[3]),\n\t\tthis.minute(formats[4]),\n\t\tthis.second(formats[5]),\n\t\tthis.millisecond(formats[6]),\n\t];\n}\n","import { typesToArray } from \"../base\";\n\nexport function toObject() {\n\tif (!arguments.length) {\n\t\treturn this.d;\n\t}\n\tconst formats = typesToArray(this.c, ...arguments);\n\treturn {\n\t\tyear: this.year(formats[0]),\n\t\tmonth: this.month(formats[1]),\n\t\tdate: this.date(formats[2]),\n\t\thour: this.hour(formats[3]),\n\t\tminute: this.minute(formats[4]),\n\t\tsecond: this.second(formats[5]),\n\t\tmillisecond: this.millisecond(formats[6]),\n\t};\n}\n","import { jtg } from \"../base\";\n\nconst jalali = (date) => {\n\treturn jtg(...date);\n};\n\nconst gregorian = (date) => {\n\t--date[1];\n\treturn new Date(...date);\n};\n\nexport function toDate() {\n\tswitch (this.c[0]) {\n\t\tcase \"j\":\n\t\t\treturn jalali(this.toArray());\n\t\tdefault:\n\t\t\treturn gregorian(this.toArray());\n\t}\n}\n","import { typesToArray } from \"../base\";\n\nexport function diff(date, unit, addOne) {\n\tdate = typesToArray(this.c, date);\n\tif (!this.isValid(...date)) return \"تاریخ نامعتبر\";\n\tlet result =\n\t\tthis.timestamp() -\n\t\tthis.clone()\n\t\t\t.parse(...date)\n\t\t\t.timestamp();\n\tswitch (unit) {\n\t\tcase \"y\":\n\t\tcase \"year\":\n\t\tcase \"years\":\n\t\t\tresult = this.d.year - date[0];\n\t\t\tbreak;\n\t\tcase \"M\":\n\t\tcase \"month\":\n\t\tcase \"months\":\n\t\t\tresult = this.d.year * 12 + this.d.month - (+date[0] * 12 + +date[1]);\n\t\t\tbreak;\n\t\tcase \"d\":\n\t\tcase \"date\":\n\t\tcase \"day\":\n\t\tcase \"days\":\n\t\t\tresult = Math.ceil(result / 1000 / 60 / 60 / 24);\n\t\t\tbreak;\n\t\tcase \"h\":\n\t\tcase \"hour\":\n\t\tcase \"hours\":\n\t\t\tresult = Math.ceil(result / 1000 / 60 / 60);\n\t\t\tbreak;\n\t\tcase \"m\":\n\t\tcase \"minute\":\n\t\tcase \"minutes\":\n\t\t\tresult = Math.ceil(result / 1000 / 60);\n\t\t\tbreak;\n\t\tcase \"s\":\n\t\tcase \"second\":\n\t\tcase \"seconds\":\n\t\t\tresult = Math.ceil(result / 1000);\n\t\t\tbreak;\n\t\tcase \"ms\":\n\t\tcase \"millisecond\":\n\t\tcase \"milliseconds\":\n\t}\n\treturn addOne ? result + (result >= 0 ? 1 : -1) : result;\n}\n","export function diffForHumans(date, suffix) {\n\tlet result = this.diff(date, \"s\");\n\tif (typeof result == \"string\") return \"تاریخ نامعتبر\";\n\n\tconst prefix = suffix && (result > 0 ? \"آینده\" : \"پیش\");\n\tresult = Math.abs(result);\n\n\tif (result == 0) return \"هم اکنون\";\n\telse if (result < 45) result = \"لحظات\";\n\telse if ((result /= 60) < 45)\n\t\t// divide by 60, for getting minute\n\t\tresult = Math.round(result) + \" \" + \"دقیقه\";\n\telse if ((result /= 60) < 23.5)\n\t\t// divide by 60, for getting hour\n\t\tresult = Math.round(result) + \" \" + \"ساعت\";\n\telse if ((result /= 24) < 26)\n\t\t// divide by 24, for getting day\n\t\tresult = Math.round(result) + \" \" + \"روز\";\n\telse if (result < 320) result = Math.round(result / 30) + \" \" + \"ماه\";\n\telse result = Math.round(result / 365) + \" \" + \"سال\";\n\treturn result + (suffix ? \" \" + prefix : \"\");\n}\n","////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\nimport { warn, compare, mathOperation } from \"./base\";\n\nimport {\n\tnow,\n\tparse,\n\tclone,\n\tfromJalali,\n\tfromGregorian,\n\tcalendar as calendarMethod,\n} from \"./create\";\n\nimport {\n\tyear as yearMethod,\n\tquarter as quarterMethod,\n\tmonth as monthMethod,\n\tweek as weekMethod,\n\tdate as dateMethod,\n\thour as hourMethod,\n\tminute as minuteMethod,\n\tsecond as secondMethod,\n\tmillisecond as millisecondMethod,\n\ttimestamp,\n\tgetDaysInMonth,\n\tgetWeeksInYear,\n\tstartOf,\n\tendOf,\n\ttime,\n} from \"./set-get\";\n\nimport {\n\taddYear,\n\taddQuarter,\n\taddMonth,\n\taddWeek,\n\taddDay,\n\taddHour,\n\taddMinute,\n\taddSecond,\n\taddMillisecond,\n\tsubYear,\n\tsubQuarter,\n\tsubMonth,\n\tsubWeek,\n\tsubDay,\n\tsubHour,\n\tsubMinute,\n\tsubSecond,\n\tsubMillisecond,\n} from \"./add-sub\";\n\nimport { toString, toArray, toObject, toDate } from \"./conversion\";\n\nimport {\n\tisLeapYear,\n\tisDate,\n\tisPersianDate,\n\tisValidDate,\n\tisValidTime,\n\tisValid,\n\tisSame,\n\tisBetween,\n} from \"./comparison\";\n\nimport { diff, diffForHumans } from \"./diff\";\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {Date|Array|Null|Object|String} date - the date that convert to persian date\n * @param {String} [calendar='jalali'] - the calendar\n */\nconst PersianDate = function (dateVal, calendarVal) {\n\t\"use strict\";\n\n\t/**\n\t * keeps the date and time\n\t * @type {Object}\n\t * @property {Number} year - the year of date\n\t * @property {Number} month - the month of date\n\t * @property {Number} date - the day of month of date\n\t * @property {Number} hour - the hour of time\n\t * @property {Number} minute - the minute of time\n\t * @property {Number} second - the second of time\n\t * @property {Number} millisecond - the millisecond of time\n\t * @property {Number} gregorian - the gregorian date\n\t */\n\tthis.d = {};\n\n\t/**\n\t * the calendar type\n\t * @type {String}\n\t * @default \"jalali\"\n\t * @example jalali | gregorian\n\t */\n\tthis.c = \"jalali\";\n\n\t////////////////////--------- create & parse ---------/////////////////////\n\n\t/**\n\t * make current date in persian calendar\n\t * @returns {PersianDate} make current date and return class\n\t */\n\tPersianDate.prototype.now = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\treturn now.call(this);\n\t};\n\n\t/**\n\t * set persian date from Gregorian date\n\t * @deprecated\n\t * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate|String} if date invalid return class with error property with error property\n\t */\n\tPersianDate.prototype.setDate = function () {\n\t\twarn(\n\t\t\t'\"setDate\" function is deprecated! use \"fromGregorian\" function instead.\\n' +\n\t\t\t\t\"https://alireza-ab.ir/persian-date/create-and-parse#from-gregorian-date\"\n\t\t);\n\t\treturn this.fromGregorian(...arguments);\n\t};\n\n\t/**\n\t * convert a jalali or gregorian date to PersianDate instance\n\t * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.parse = function () {\n\t\treturn parse.call(this, ...arguments);\n\t};\n\n\t/**\n\t * get clone of this date\n\t * @since 1.1.0\n\t * @returns {PersianDate} returns the clone of this date\n\t */\n\tPersianDate.prototype.clone = function () {\n\t\treturn clone.call(this);\n\t};\n\n\t/**\n\t * convert a jalali date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate} if date invalid return class with error\n\t */\n\tPersianDate.prototype.fromJalali = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\treturn fromJalali.call(this, ...arguments);\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {PersianDate} return class with persian date\n\t * @throws {PersianDate} if date invalid return class with error\n\t */\n\tPersianDate.prototype.fromGregorian = function () {\n\t\tif (this.error) {\n\t\t\tdelete this.error;\n\t\t\tthis.d = {};\n\t\t}\n\t\treturn fromGregorian.call(this, ...arguments);\n\t};\n\n\t/**\n\t * convert a gregorian date to PersianDate instance\n\t * @since 2.0.0\n\t * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n\t * @returns {PersianDate} return class with persian date\n\t */\n\tPersianDate.prototype.calendar = function (calendar) {\n\t\treturn calendarMethod.call(this, calendar);\n\t};\n\n\t////////////////////--------- set & get ---------/////////////////////\n\n\t/**\n\t * get or set year\n\t * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the year, returns class,\n\t * else returns a number or string from year\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.year = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\treturn yearMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set month\n\t * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the month, returns class,\n\t * else returns a number or string from month\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.month = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\treturn monthMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set day in month\n\t * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the day, returns class,\n\t * else returns a number or string from day\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.date = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\treturn dateMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set quarter\n\t * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the quarter, returns class,\n\t * else returns a number or string from quarter\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.quarter = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\treturn quarterMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set week\n\t * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the week, returns class,\n\t * else returns a number or string from week\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.week = function (format = \"\") {\n\t\tif (this.error) return this.error;\n\t\treturn weekMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set hour\n\t * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the hour, returns class,\n\t * else returns a number or string from hour\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.hour = function (format = \"H\") {\n\t\tif (this.error) return this.error;\n\t\treturn hourMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set minute\n\t * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the minute, returns class,\n\t * else returns a number or string from minute\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.minute = function (format = \"m\") {\n\t\tif (this.error) return this.error;\n\t\treturn minuteMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set second\n\t * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the second, returns class,\n\t * else returns a number or string from second\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.second = function (format = \"s\") {\n\t\tif (this.error) return this.error;\n\t\treturn secondMethod.call(this, format);\n\t};\n\n\t/**\n\t * get or set millisecond\n\t * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n\t * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n\t * else returns a number or string from millisecond\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.millisecond = function (format = \"c\") {\n\t\tif (this.error) return this.error;\n\t\treturn millisecondMethod.call(this, format);\n\t};\n\n\t/**\n\t * get timestamp or set date from timestamp\n\t * @param {Null|Number|String} value - a number for set the millisecond\n\t * @returns {PersianDate|Number} if set the timestamp, returns class,\n\t * else returns timestamp (number)\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.timestamp = function (value) {\n\t\tif (this.error) return this.error;\n\t\treturn timestamp.call(this, value);\n\t};\n\n\tPersianDate.prototype.valueOf = function () {\n\t\treturn this.timestamp();\n\t};\n\n\t/**\n\t * returns number of days in month\n\t * @param {?Number} year - year of date that returns number of days in month\n\t * @param {?Number} month - month of date that returns number of days in month\n\t * @returns {Number} number of days in month\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.getDaysInMonth = function (\n\t\tyear = this.d.year,\n\t\tmonth = this.d.month\n\t) {\n\t\tif (this.error) return this.error;\n\t\treturn getDaysInMonth(this.c, year, month);\n\t};\n\n\t/**\n\t * return number of weeks in year\n\t * @since 2.0.0\n\t * @param {Number|String} year - the year\n\t * @returns {Number} number of weeks in year\n\t */\n\tPersianDate.prototype.getWeeksInYear = function (year = this.d.year) {\n\t\tif (this.error) return this.error;\n\t\treturn getWeeksInYear.call(this, year);\n\t};\n\n\t/**\n\t * change the date to start of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.startOf = function (unit = \"year\") {\n\t\treturn startOf.call(this, unit);\n\t};\n\n\t/**\n\t * change the date to end of the year or month or ...\n\t * @since 2.0.0\n\t * @param {String} unit - the unit of time\n\t * @returns {PersianDate} return the class with new date or time\n\t */\n\tPersianDate.prototype.endOf = function (unit = \"year\") {\n\t\treturn endOf.call(this, unit);\n\t};\n\n\t/**\n\t * change the time\n\t * @since 2.3.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} time - the new time\n\t * @param {Null|String|Number} time.h - hour of date\n\t * @param {Null|String|Number} time.hour - hour of date\n\t * @param {Null|String|Number} time.hours - hour of date\n\t * @param {Null|String|Number} time.m - minute of date\n\t * @param {Null|String|Number} time.minute - minute of date\n\t * @param {Null|String|Number} time.minutes - minute of date\n\t * @param {Null|String|Number} time.s - second of date\n\t * @param {Null|String|Number} time.second - second of date\n\t * @param {Null|String|Number} time.seconds - second of date\n\t * @param {Null|String|Number} time.ms - millisecond of date\n\t * @param {Null|String|Number} time.millisecond - millisecond of date\n\t * @param {Null|String|Number} time.milliseconds - millisecond of date\n\t * @returns {PersianDate|Array} if set the time, returns class,\n\t * else returns an array of time\n\t * @throws {String} if time invalid return error text\n\t */\n\tPersianDate.prototype.time = function () {\n\t\tif (this.error) return this.error;\n\t\treturn time.call(this, ...arguments);\n\t};\n\n\t////////////////////--------- add & sub ---------/////////////////////\n\n\t/**\n\t * add to year\n\t * @param {?Number|String} [year=1] - a number for add with year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\treturn addYear.call(this, year, checkDate);\n\t};\n\n\t/**\n\t * add to month\n\t * @param {?Number|String} [month=1] - a number for add with month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\treturn addMonth.call(this, month, checkDate);\n\t};\n\n\t/**\n\t * add to day\n\t * @param {?Number|String} [day=1] - a number for add with day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\treturn addDay.call(this, day, checkDate);\n\t};\n\n\t/**\n\t * add to quarter\n\t * @param {?Number|String} [quarter=1] - a number for add with quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\treturn addQuarter.call(this, quarter, checkDate);\n\t};\n\n\t/**\n\t * add to week\n\t * @param {?Number|String} [week=1] - a number for add with week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\treturn addWeek.call(this, week, checkDate);\n\t};\n\n\t/**\n\t * add to hour\n\t * @param {?Number|String} [hour=1] - a number for add with hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\treturn addHour.call(this, hour, checkDate);\n\t};\n\n\t/**\n\t * add to minute\n\t * @param {?Number|String} [minute=1] - a number for add with minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\treturn addMinute.call(this, minute, checkDate);\n\t};\n\n\t/**\n\t * add to second\n\t * @param {?Number|String} [second=1] - a number for add with second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\treturn addSecond.call(this, second, checkDate);\n\t};\n\n\t/**\n\t * add to millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.addMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\treturn addMillisecond.call(this, millisecond, checkDate);\n\t};\n\n\t/**\n\t * subtract from year\n\t * @param {?Number|String} [year=1] - a number for subtract from year\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!year) return this;\n\t\treturn subYear.call(this, year, checkDate);\n\t};\n\n\t/**\n\t * subtract from month\n\t * @param {?Number|String} [month=1] - a number for subtract from month\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMonth = function (month = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!month) return this;\n\t\treturn subMonth.call(this, month, checkDate);\n\t};\n\n\t/**\n\t * subtract from day\n\t * @param {?Number|String} [day=1] - a number for subtract from day\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!day) return this;\n\t\treturn subDay.call(this, day, checkDate);\n\t};\n\n\t/**\n\t * subtract from quarter\n\t * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subQuarter = function (quarter = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!quarter) return this;\n\t\treturn subQuarter.call(this, quarter, checkDate);\n\t};\n\n\t/**\n\t * subtract from week\n\t * @param {?Number|String} [week=1] - a number for subtract from week\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!week) return this;\n\t\treturn subWeek.call(this, week, checkDate);\n\t};\n\n\t/**\n\t * subtract from hour\n\t * @param {?Number|String} [hour=1] - a number for subtract from hour\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!hour) return this;\n\t\treturn subHour.call(this, hour, checkDate);\n\t};\n\n\t/**\n\t * subtract from minute\n\t * @param {?Number|String} [minute=1] - a number for subtract from minute\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMinute = function (minute = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!minute) return this;\n\t\treturn subMinute.call(this, minute, checkDate);\n\t};\n\n\t/**\n\t * subtract from second\n\t * @param {?Number|String} [second=1] - a number for subtract from second\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subSecond = function (second = 1, checkDate = true) {\n\t\tif (this.error) return this.error;\n\t\tif (!second) return this;\n\t\treturn subSecond.call(this, second, checkDate);\n\t};\n\n\t/**\n\t * subtract from millisecond\n\t * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n\t * @param {?Boolean} checkDate checks the result that the date is valid,\n\t * If not valid, it will be deducted from the day to be valid\n\t * @returns {PersianDate} return class with new date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.subMillisecond = function (\n\t\tmillisecond = 1,\n\t\tcheckDate = true\n\t) {\n\t\tif (this.error) return this.error;\n\t\tif (!millisecond) return this;\n\t\treturn subMillisecond.call(this, millisecond, checkDate);\n\t};\n\n\t////////////////////--------- conversion ---------/////////////////////\n\n\t/**\n\t * returns date as string with specify format\n\t * @param {?String} [format=date] - formatting date to string\n\t * @returns {String} date string\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toString = function (format = \"date\") {\n\t\tif (this.error) return this.error;\n\t\treturn toString.call(this, format);\n\t};\n\n\t/**\n\t * return the array of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return array of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toArray = function () {\n\t\tif (this.error) return this.error;\n\t\treturn toArray.call(this, ...arguments);\n\t};\n\n\t/**\n\t * return the object of PersianDate\n\t * @since 1.3.0\n\t * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n\t * @param {String|Number} yearForamt.y - year format\n\t * @param {Null|String|Number} yearForamt.year - year format\n\t * @param {Null|String|Number} yearForamt.years - year format\n\t * @param {Null|String|Number} yearForamt.M - month format\n\t * @param {Null|String|Number} yearForamt.month - month format\n\t * @param {Null|String|Number} yearForamt.months - month format\n\t * @param {Null|String|Number} yearForamt.d - day format\n\t * @param {Null|String|Number} yearForamt.day - day format\n\t * @param {Null|String|Number} yearForamt.days - day format\n\t * @param {Null|String|Number} yearForamt.date - day format\n\t * @param {Null|String|Number} yearForamt.h - hour format\n\t * @param {Null|String|Number} yearForamt.hour - hour format\n\t * @param {Null|String|Number} yearForamt.hours - hour format\n\t * @param {Null|String|Number} yearForamt.m - minute format\n\t * @param {Null|String|Number} yearForamt.minute - minute format\n\t * @param {Null|String|Number} yearForamt.minutes - minute format\n\t * @param {Null|String|Number} yearForamt.s - second format\n\t * @param {Null|String|Number} yearForamt.second - second format\n\t * @param {Null|String|Number} yearForamt.seconds - second format\n\t * @param {Null|String|Number} yearForamt.ms - millisecond format\n\t * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n\t * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n\t * @param {Null|Number|String} monthFormat month format\n\t * @param {Null|Number|String} dayFormat day format\n\t * @param {Null|Number|String} hourFormat hour format\n\t * @param {Null|Number|String} minuteFormat minute format\n\t * @param {Null|Number|String} secondFormat second format\n\t * @param {Null|Number|String} millisecondFormat millisecond format\n\t * @returns {Object} if date valid, return Object of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toObject = function () {\n\t\tif (this.error) return this.error;\n\t\treturn toObject.call(this, ...arguments);\n\t};\n\n\t/**\n\t * return the Date instance of PersianDate\n\t * @since 2.0.0\n\t * @returns {Date} if date valid, return Date instance of date\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.toDate = function () {\n\t\tif (this.error) return this.error;\n\t\treturn toDate.call(this);\n\t};\n\n\t////////////////////--------- diff ---------/////////////////////\n\n\t/**\n\t * get the diffrence between two date\n\t * @since 1.4.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {String} unit - the unit of the measurment\n\t * @param {Boolean} addOne - add one day to result\n\t * @returns {Number} diffrence\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.diff = function (date, unit, addOne = false) {\n\t\tif (this.error) return this.error;\n\t\treturn diff.call(this, date, unit, addOne);\n\t};\n\n\t/**\n\t * get the diffrence between two date in a human-readable format\n\t * @since 2.0.0\n\t * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} date.y - year of date\n\t * @param {Null|String|Number} date.year - year of date\n\t * @param {Null|String|Number} date.years - year of date\n\t * @param {Null|String|Number} date.M - month of date\n\t * @param {Null|String|Number} date.month - month of date\n\t * @param {Null|String|Number} date.months - month of date\n\t * @param {Null|String|Number} date.d - day of date\n\t * @param {Null|String|Number} date.day - day of date\n\t * @param {Null|String|Number} date.days - day of date\n\t * @param {Null|String|Number} date.date - day of date\n\t * @param {Null|String|Number} date.h - hour of date\n\t * @param {Null|String|Number} date.hour - hour of date\n\t * @param {Null|String|Number} date.hours - hour of date\n\t * @param {Null|String|Number} date.m - minute of date\n\t * @param {Null|String|Number} date.minute - minute of date\n\t * @param {Null|String|Number} date.minutes - minute of date\n\t * @param {Null|String|Number} date.s - second of date\n\t * @param {Null|String|Number} date.second - second of date\n\t * @param {Null|String|Number} date.seconds - second of date\n\t * @param {Null|String|Number} date.ms - millisecond of date\n\t * @param {Null|String|Number} date.millisecond - millisecond of date\n\t * @param {Null|String|Number} date.milliseconds - millisecond of date\n\t * @param {Boolean} suffix - add suffix or not\n\t * @returns {String} if date valid, return diff human-readable format\n\t * @throws {String} if date invalid return error message\n\t */\n\tPersianDate.prototype.diffForHumans = function (date, suffix = true) {\n\t\tif (this.error) return this.error;\n\t\treturn diffForHumans.call(this, date, suffix);\n\t};\n\n\t////////////////////--------- comparison ---------/////////////////////\n\n\t/**\n\t * returns minimum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return minimum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.min = function () {\n\t\treturn mathOperation.call(this, arguments, \"min\");\n\t};\n\n\t/**\n\t * returns maximum date in arguments that passed\n\t * @since 1.4.0\n\t * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n\t * @param {String} date.y - year of date\n\t * @param {Null|String} date.year - year of date\n\t * @param {Null|String} date.years - year of date\n\t * @param {Null|String} date.M - month of date\n\t * @param {Null|String} date.month - month of date\n\t * @param {Null|String} date.months - month of date\n\t * @param {Null|String} date.d - day of date\n\t * @param {Null|String} date.day - day of date\n\t * @param {Null|String} date.days - day of date\n\t * @param {Null|String} date.date - day of date\n\t * @param {Null|String} date.h - hour of date\n\t * @param {Null|String} date.hour - hour of date\n\t * @param {Null|String} date.hours - hour of date\n\t * @param {Null|String} date.m - minute of date\n\t * @param {Null|String} date.minute - minute of date\n\t * @param {Null|String} date.minutes - minute of date\n\t * @param {Null|String} date.s - second of date\n\t * @param {Null|String} date.second - second of date\n\t * @param {Null|String} date.seconds - second of date\n\t * @param {Null|String} date.ms - millisecond of date\n\t * @param {Null|String} date.millisecond - millisecond of date\n\t * @param {Null|String} date.milliseconds - millisecond of date\n\t * @returns {*} return maximum date\n\t * @throws {false} if parameters not send or parameters is invalid, return false\n\t */\n\tPersianDate.prototype.max = function () {\n\t\treturn mathOperation.call(this, arguments, \"max\");\n\t};\n\n\t/**\n\t * receives year and determined that is leap year or not\n\t * @param {?Number} year - the year to be determined is a leap or not\n\t * @returns {Boolean} if is leap year, returns true\n\t */\n\tPersianDate.prototype.isLeapYear = function (year = this.d.year) {\n\t\tif (this.error) return false;\n\t\treturn isLeapYear(this.c, year);\n\t};\n\n\t/**\n\t * checks the persian date and time\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid, returns true\n\t */\n\tPersianDate.prototype.isValid = function (\n\t\tyear,\n\t\tmonth,\n\t\tday,\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tmillisecond\n\t) {\n\t\tif (this.error) return false;\n\t\treturn (\n\t\t\tthis.isValidDate(year, month, day) &&\n\t\t\tthis.isValidTime(hour, minute, second, millisecond)\n\t\t);\n\t};\n\n\t/**\n\t * checks the persian date\n\t * @param {?Number} year - year of date that will be checked\n\t * @param {?Number} month - month of date that will be checked\n\t * @param {?Number} day - day of date that will be checked\n\t * @returns {Boolean} if is valid date, returns true\n\t */\n\tPersianDate.prototype.isValidDate = function (\n\t\tyear = this.d.year,\n\t\tmonth = this.d.month,\n\t\tday = this.d.date\n\t) {\n\t\tif (this.error) return false;\n\t\treturn isValidDate(this.c, year, month, day);\n\t};\n\n\t/**\n\t * checks the time\n\t * @param {?Number} hour - hour of date that will be checked\n\t * @param {?Number} minute - minute of date that will be checked\n\t * @param {?Number} second - second of date that will be checked\n\t * @param {?Number} millisecond - millisecond of date that will be checked\n\t * @returns {Boolean} if is valid time, returns true\n\t */\n\tPersianDate.prototype.isValidTime = function (\n\t\thour = this.d.hour,\n\t\tminute = this.d.minute,\n\t\tsecond = this.d.second,\n\t\tmillisecond = this.d.millisecond\n\t) {\n\t\tif (this.error) return false;\n\t\treturn isValidTime(hour, minute, second, millisecond);\n\t};\n\n\t/**\n\t * checks this date is the same to another date\n\t * @since 1.1.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSame = function () {\n\t\tif (this.error) return false;\n\t\treturn isSame.call(this, ...arguments);\n\t};\n\n\t/**\n\t * checks this date is before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isBefore = function () {\n\t\tif (this.error) return false;\n\t\treturn compare.call(this, arguments, \"<\");\n\t};\n\n\t/**\n\t * checks this date is after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isAfter = function () {\n\t\tif (this.error) return false;\n\t\treturn compare.call(this, arguments, \">\");\n\t};\n\n\t/**\n\t * checks this date is same or before the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSameOrBefore = function () {\n\t\tif (this.error) return false;\n\t\treturn compare.call(this, arguments, \"<=\");\n\t};\n\n\t/**\n\t * checks this date is same or after the another date\n\t * @since 1.2.0\n\t * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n\t * @param {String|Number} year.y - year of date\n\t * @param {Null|String|Number} year.year - year of date\n\t * @param {Null|String|Number} year.years - year of date\n\t * @param {Null|String|Number} year.M - month of date\n\t * @param {Null|String|Number} year.month - month of date\n\t * @param {Null|String|Number} year.months - month of date\n\t * @param {Null|String|Number} year.d - day of date\n\t * @param {Null|String|Number} year.day - day of date\n\t * @param {Null|String|Number} year.days - day of date\n\t * @param {Null|String|Number} year.date - day of date\n\t * @param {Null|String|Number} year.h - hour of date\n\t * @param {Null|String|Number} year.hour - hour of date\n\t * @param {Null|String|Number} year.hours - hour of date\n\t * @param {Null|String|Number} year.m - minute of date\n\t * @param {Null|String|Number} year.minute - minute of date\n\t * @param {Null|String|Number} year.minutes - minute of date\n\t * @param {Null|String|Number} year.s - second of date\n\t * @param {Null|String|Number} year.second - second of date\n\t * @param {Null|String|Number} year.seconds - second of date\n\t * @param {Null|String|Number} year.ms - millisecond of date\n\t * @param {Null|String|Number} year.millisecond - millisecond of date\n\t * @param {Null|String|Number} year.milliseconds - millisecond of date\n\t * @param {Null|Number|String} month month of date\n\t * @param {Null|Number|String} day day of date\n\t * @param {Null|Number|String} hour hour of date\n\t * @param {Null|Number|String} minute minute of date\n\t * @param {Null|Number|String} second second of date\n\t * @param {Null|Number|String} millisecond millisecond of date\n\t * @returns {‌Boolean} if date valid, return true of false\n\t */\n\tPersianDate.prototype.isSameOrAfter = function () {\n\t\tif (this.error) return false;\n\t\treturn compare.call(this, arguments, \">=\");\n\t};\n\n\t/**\n\t * checks this date is between the another dates\n\t * @since 1.3.0\n\t * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} from.y - year of date\n\t * @param {Null|String|Number} from.year - year of date\n\t * @param {Null|String|Number} from.years - year of date\n\t * @param {Null|String|Number} from.M - month of date\n\t * @param {Null|String|Number} from.month - month of date\n\t * @param {Null|String|Number} from.months - month of date\n\t * @param {Null|String|Number} from.d - day of date\n\t * @param {Null|String|Number} from.day - day of date\n\t * @param {Null|String|Number} from.days - day of date\n\t * @param {Null|String|Number} from.date - day of date\n\t * @param {Null|String|Number} from.h - hour of date\n\t * @param {Null|String|Number} from.hour - hour of date\n\t * @param {Null|String|Number} from.hours - hour of date\n\t * @param {Null|String|Number} from.m - minute of date\n\t * @param {Null|String|Number} from.minute - minute of date\n\t * @param {Null|String|Number} from.minutes - minute of date\n\t * @param {Null|String|Number} from.s - second of date\n\t * @param {Null|String|Number} from.second - second of date\n\t * @param {Null|String|Number} from.seconds - second of date\n\t * @param {Null|String|Number} from.ms - millisecond of date\n\t * @param {Null|String|Number} from.millisecond - millisecond of date\n\t * @param {Null|String|Number} from.milliseconds - millisecond of date\n\t * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n\t * @param {String|Number} to.y - year of date\n\t * @param {Null|String|Number} to.year - year of date\n\t * @param {Null|String|Number} to.years - year of date\n\t * @param {Null|String|Number} to.M - month of date\n\t * @param {Null|String|Number} to.month - month of date\n\t * @param {Null|String|Number} to.months - month of date\n\t * @param {Null|String|Number} to.d - day of date\n\t * @param {Null|String|Number} to.day - day of date\n\t * @param {Null|String|Number} to.days - day of date\n\t * @param {Null|String|Number} to.date - day of date\n\t * @param {Null|String|Number} to.h - hour of date\n\t * @param {Null|String|Number} to.hour - hour of date\n\t * @param {Null|String|Number} to.hours - hour of date\n\t * @param {Null|String|Number} to.m - minute of date\n\t * @param {Null|String|Number} to.minute - minute of date\n\t * @param {Null|String|Number} to.minutes - minute of date\n\t * @param {Null|String|Number} to.s - second of date\n\t * @param {Null|String|Number} to.second - second of date\n\t * @param {Null|String|Number} to.seconds - second of date\n\t * @param {Null|String|Number} to.ms - millisecond of date\n\t * @param {Null|String|Number} to.millisecond - millisecond of date\n\t * @param {Null|String|Number} to.milliseconds - millisecond of date\n\t * @param {String} method - determines that consider the dates themselves\n\t * @returns {‌Boolean} if date valid, return true or false\n\t */\n\tPersianDate.prototype.isBetween = function (from, to, method = \"()\") {\n\t\tif (this.error) return false;\n\t\treturn isBetween.call(this, from, to, method);\n\t};\n\n\t/**\n\t * checks date is a native js Date object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a native js Date, return true\n\t */\n\tPersianDate.prototype.isDate = isDate;\n\n\t/**\n\t * checks date is a PersianDate object\n\t * @since 1.3.0\n\t * @param {*} date date that must be checked\n\t * @returns {Boolean} if date is a PersianDate, return true\n\t */\n\tPersianDate.prototype.isPersianDate = isPersianDate;\n\n\tif (calendarVal) this.calendar(calendarVal);\n\tif (dateVal) {\n\t\tif (calendarVal && calendarVal[0] == \"j\") this.fromJalali(dateVal);\n\t\telse this.fromGregorian(dateVal);\n\t} else this.now();\n};\n\n////////////////////--------- statics  ---------/////////////////////\n\n/**\n * receives year and determined that is leap year or not\n * @static\n * @since 2.3.0\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @param {Number} year - the year to be determined is a leap or not\n * @returns {Boolean} if is leap year, returns true\n */\nPersianDate.isLeapYear = isLeapYear;\n\n/**\n * checks date is a native js Date object\n * @static\n * @since 2.3.0\n * @param {*} date date that must be checked\n * @returns {Boolean} if date is a native js Date, return true\n */\nPersianDate.isDate = isDate;\n\n/**\n * checks date is a PersianDate object\n * @static\n * @since 2.3.0\n * @param {*} date date that must be checked\n * @returns {Boolean} if date is a PersianDate, return true\n */\nPersianDate.isPersianDate = isPersianDate;\n\n/**\n * checks the date and time\n * @static\n * @since 2.4.0\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @param {?Number} year - year of date that will be checked\n * @param {?Number} month - month of date that will be checked\n * @param {?Number} day - day of date that will be checked\n * @param {?Number} hour - hour of date that will be checked\n * @param {?Number} minute - minute of date that will be checked\n * @param {?Number} second - second of date that will be checked\n * @param {?Number} millisecond - millisecond of date that will be checked\n * @returns {Boolean} if is valid, returns true\n */\nPersianDate.isValid = isValid;\n\n/**\n * checks the date\n * @static\n * @since 2.4.0\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @param {?Number} year - year of date that will be checked\n * @param {?Number} month - month of date that will be checked\n * @param {?Number} day - day of date that will be checked\n * @returns {Boolean} if is valid date, returns true\n */\nPersianDate.isValidDate = isValidDate;\n\n/**\n * checks the time\n * @static\n * @since 2.4.0\n * @param {?Number} hour - hour of date that will be checked\n * @param {?Number} minute - minute of date that will be checked\n * @param {?Number} second - second of date that will be checked\n * @param {?Number} millisecond - millisecond of date that will be checked\n * @returns {Boolean} if is valid time, returns true\n */\nPersianDate.isValidTime = isValidTime;\n\n/**\n * returns number of days in month\n * @param {\"jalali\"|\"gregorian\"} calendar - the calendar\n * @param {?Number} year - year of date that returns number of days in month\n * @param {?Number} month - month of date that returns number of days in month\n * @returns {Number} number of days in month\n * @throws {String} if date invalid return error message\n */\nPersianDate.getDaysInMonth = getDaysInMonth;\n\n//TODO: add localization\n\nexport default PersianDate;\n\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day ---------/////////////////////\n","import { typesToArray } from \"../base\";\n\n/**\n * compare the dates\n * @since 2.0.0\n * @param {PersianDate|Date|String|Array|Object} date - the date\n * @param {'>'|'>='|'<'|'<='|'=='} operator - the operator for compare\n * @returns {‌Boolean} if date valid, return true of false\n */\nexport const compare = function (date, operator) {\n\tdate = typesToArray(this.c, ...date);\n\n\tif (this.isValid(...date))\n\t\treturn eval(\n\t\t\t\"this.timestamp()\" + operator + \"this.clone().parse(...date).timestamp()\"\n\t\t);\n\treturn false;\n};\n","import { REGEX } from \"../utils\";\nimport { isDate } from \"../comparison\";\n\n/**\n * Gregorian to Jalali\n * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n * @param {Null|Number|String} [month=1] - Gregorian month\n * @param {Null|Number|String} [day=1] - Gregorian day\n * @param {Null|Number|String} [hour=0] - Gregorian hour\n * @param {Null|Number|String} [minute=0] - Gregorian minute\n * @param {Null|Number|String} [second=0] - Gregorian second\n * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n * @returns {Array} Jalali date\n */\nexport const gtj = (year, month, day, hour, minute, second, millisecond) => {\n\tlet date;\n\tif (!year) date = new Date();\n\telse if (isDate(year))\n\t\t// if the year was an instance of Date\n\t\tdate = year;\n\telse\n\t\tdate = new Date(\n\t\t\tREGEX[\"isNumeric\"].test(year) ? year : 0,\n\t\t\tREGEX[\"isNumeric\"].test(month) ? month : 0,\n\t\t\tREGEX[\"isNumeric\"].test(day) ? day : 1,\n\t\t\tREGEX[\"isNumeric\"].test(hour) ? hour : 0,\n\t\t\tREGEX[\"isNumeric\"].test(minute) ? minute : 0,\n\t\t\tREGEX[\"isNumeric\"].test(second) ? second : 0,\n\t\t\tREGEX[\"isNumeric\"].test(millisecond) ? millisecond : 0\n\t\t);\n\tday = date.getDate();\n\tmonth = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n\tyear = date.getFullYear();\n\thour = date.getHours();\n\tminute = date.getMinutes();\n\tsecond = date.getSeconds();\n\tmillisecond = date.getMilliseconds();\n\tlet jYear, jMonth, jDay;\n\tconst pastDaysInMonth = [\n\t\t0,\n\t\t31,\n\t\t59,\n\t\t90,\n\t\t120,\n\t\t151,\n\t\t181,\n\t\t212,\n\t\t243,\n\t\t273,\n\t\t304,\n\t\t334,\n\t]; // Past days from the start of the year in each month\n\tif (year > 1600) {\n\t\tjYear = 979;\n\t\tyear -= 1600;\n\t} else {\n\t\tjYear = 0;\n\t\tyear -= 621;\n\t}\n\tconst newYear = month > 2 ? year + 1 : year;\n\tlet days =\n\t\t365 * year +\n\t\tparseInt((newYear + 3) / 4) -\n\t\tparseInt((newYear + 99) / 100) +\n\t\tparseInt((newYear + 399) / 400) -\n\t\t80 +\n\t\tday +\n\t\tpastDaysInMonth[month - 1];\n\tjYear += 33 * parseInt(days / 12053);\n\tdays %= 12053;\n\tjYear += 4 * parseInt(days / 1461);\n\tdays %= 1461;\n\tif (days > 365) {\n\t\tjYear += parseInt((days - 1) / 365);\n\t\tdays = (days - 1) % 365;\n\t}\n\tjMonth =\n\t\tdays < 186 ? 1 + parseInt(days / 31) : 7 + parseInt((days - 186) / 30);\n\tjDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n\treturn [jYear, jMonth, jDay, hour, minute, second, millisecond];\n};\n","import { REGEX } from \"../utils\";\nimport { isLeapYear } from \"../comparison\";\n\n/**\n * Jalali to Gregorian\n * @param {Null|Number|String} year - Jalali year\n * @param {Null|Number|String} [month=1] -  Jalali month\n * @param {Null|Number|String} [day=1] -  Jalali day\n * @param {Null|Number|String} [hour=0] -  Jalali hour\n * @param {Null|Number|String} [minute=0] -  Jalali minute\n * @param {Null|Number|String} [second=0] -  Jalali second\n * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n * @returns {Date} Gregorian date\n */\nexport const jtg = (year, month, day, hour, minute, second, millisecond) => {\n\t//plus sign before a variable, convert variable to int\n\tyear = REGEX[\"isNumeric\"].test(year) ? +year : 1;\n\tmonth = REGEX[\"isNumeric\"].test(month) ? +month : 1;\n\tday = REGEX[\"isNumeric\"].test(day) ? +day : 1;\n\thour = REGEX[\"isNumeric\"].test(hour) ? +hour : 0;\n\tminute = REGEX[\"isNumeric\"].test(minute) ? +minute : 0;\n\tsecond = REGEX[\"isNumeric\"].test(second) ? +second : 0;\n\tmillisecond = REGEX[\"isNumeric\"].test(millisecond) ? +millisecond : 0;\n\tlet gYear, gMonth, gDay;\n\tif (year > 979) {\n\t\tgYear = 1600;\n\t\tyear -= 979;\n\t} else {\n\t\tgYear = 621;\n\t}\n\tlet days =\n\t\t365 * year +\n\t\tparseInt(year / 33) * 8 +\n\t\tparseInt(((year % 33) + 3) / 4) +\n\t\t78 +\n\t\tday +\n\t\t(month < 7 ? (month - 1) * 31 : (month - 7) * 30 + 186);\n\tgYear += 400 * parseInt(days / 146097);\n\tdays %= 146097;\n\tif (days > 36524) {\n\t\tgYear += 100 * parseInt(--days / 36524);\n\t\tdays %= 36524;\n\t\tif (days >= 365) days++;\n\t}\n\tgYear += 4 * parseInt(days / 1461);\n\tdays %= 1461;\n\tif (days > 365) {\n\t\tgYear += parseInt((days - 1) / 365);\n\t\tdays = (days - 1) % 365;\n\t}\n\tgDay = days + 1;\n\tconst daysOfMonths = [\n\t\t0,\n\t\t31,\n\t\tisLeapYear(\"gregorian\", gYear) ? 29 : 28,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31,\n\t];\n\tfor (gMonth = 0; gMonth < 13; gMonth++) {\n\t\tconst v = daysOfMonths[gMonth];\n\t\tif (gDay <= v) break;\n\t\tgDay -= v;\n\t}\n\n\treturn new Date(gYear, gMonth - 1, gDay, hour, minute, second, millisecond);\n};\n","/**\n * show warning\n * @since 2.0.0\n * @param {String} msg - the message for warning\n */\nexport const warn = (msg) => {\n\tconsole.warn(msg);\n};\n","/**\n * make error and delete this.d\n * @param {String} errorText - Error Text\n * @returns {PersianDate} make error and return class\n */\nexport const invalid = function (errorText) {\n\tdelete this.d;\n\tthis.error = errorText;\n\treturn this;\n};\n","import PersianDate from \"../PersianDate\";\nimport { REGEX } from \"../utils\";\nimport { gtj } from \".\";\n\n/**\n * convert String or Array or Object or PersianDate to Array\n * @since 1.2.0\n * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n * @param {String|Number} year.y - year of date\n * @param {Null|String|Number} year.year - year of date\n * @param {Null|String|Number} year.years - year of date\n * @param {Null|String|Number} year.M - month of date\n * @param {Null|String|Number} year.month - month of date\n * @param {Null|String|Number} year.months - month of date\n * @param {Null|String|Number} year.d - day of date\n * @param {Null|String|Number} year.day - day of date\n * @param {Null|String|Number} year.days - day of date\n * @param {Null|String|Number} year.date - day of date\n * @param {Null|String|Number} year.h - hour of date\n * @param {Null|String|Number} year.hour - hour of date\n * @param {Null|String|Number} year.hours - hour of date\n * @param {Null|String|Number} year.m - minute of date\n * @param {Null|String|Number} year.minute - minute of date\n * @param {Null|String|Number} year.minutes - minute of date\n * @param {Null|String|Number} year.s - second of date\n * @param {Null|String|Number} year.second - second of date\n * @param {Null|String|Number} year.seconds - second of date\n * @param {Null|String|Number} year.ms - millisecond of date\n * @param {Null|String|Number} year.millisecond - millisecond of date\n * @param {Null|String|Number} year.milliseconds - millisecond of date\n * @param {Null|Number|String} month month of date\n * @param {Null|Number|String} day day of date\n * @param {Null|Number|String} hour hour of date\n * @param {Null|Number|String} minute minute of date\n * @param {Null|Number|String} second second of date\n * @param {Null|Number|String} millisecond millisecond of date\n * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n */\nexport const typesToArray = (\n\tcalendar,\n\tyear,\n\tmonth,\n\tdate,\n\thour,\n\tminute,\n\tsecond,\n\tmillisecond\n) => {\n\tif (!year)\n\t\t// if year not defined\n\t\tyear = new Date(); // return now\n\tif (typeof year == \"string\" && year.search(REGEX[\"separators\"]) != -1) {\n\t\treturn year.split(/[/ -.,:\\\\]/);\n\t} else if (Array.isArray(year)) {\n\t\treturn year;\n\t} else if (PersianDate.isPersianDate(year)) {\n\t\treturn year.clone().calendar(calendar).toArray();\n\t} else if (PersianDate.isDate(year)) {\n\t\treturn new PersianDate(year).calendar(calendar).toArray();\n\t} else if (Object.prototype.toString.call(year) === \"[object Object]\") {\n\t\treturn [\n\t\t\tyear.y || year.year || year.years,\n\t\t\tyear.M || year.month || year.months || 1,\n\t\t\tyear.d || year.day || year.days || year.date || 1,\n\t\t\tyear.h || year.hour || year.hours || 0,\n\t\t\tyear.m || year.minute || year.minutes || 0,\n\t\t\tyear.s || year.second || year.seconds || 0,\n\t\t\tyear.ms || year.millisecond || year.milliseconds || 0,\n\t\t];\n\t}\n\treturn [year, month, date, hour, minute, second, millisecond];\n};\n","import { CALENDAR } from \"../utils\";\n/**\n * returns the ordinal number of that number sent to it\n * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n * @param {'jalali','gregorian'} calendar - the calendar\n * @param {?Number} mode  - 'jalali' calendar have two mode of ordinal number\n * @returns {String} ordinal number\n * @example 1st | اول | اولین\n */\nexport const ordinalNumber = (number, calendar = \"jalali\", mode = 1) => {\n\treturn CALENDAR[calendar].ordinalNumbers(number, mode);\n};\n","/**\n * add a prefix to the text in the number of characters that the text has less\n * @param {String|Number} text a text need prefix\n * @param {Number} length length of text\n * @param {String} [prefix=0] - string for add before of text\n * @returns {String} text with or wihtout prefix\n */\nexport const addPrefix = (text, length, prefix = \"0\") => {\n\treturn prefix.repeat(length - String(text).length) + text;\n};\n","import { gtj } from \".\";\n/**\n * set the date with Date instance\n * @since 2.0.0\n * @param {Date} date - the Date\n */\nexport const setJalaliDate = function (date) {\n\t[\n\t\tthis.d.year,\n\t\tthis.d.month,\n\t\tthis.d.date,\n\t\tthis.d.hour,\n\t\tthis.d.minute,\n\t\tthis.d.second,\n\t\tthis.d.millisecond,\n\t] = gtj(date);\n};\n","/**\n * set the date with Date instance\n * @since 2.0.0\n * @param {Date} date - the Date instance\n */\nexport const setGregorianDate = function (date) {\n\tthis.d = {\n\t\tyear: date.getFullYear(),\n\t\tmonth: date.getMonth() + 1,\n\t\tdate: date.getDate(),\n\t\thour: date.getHours(),\n\t\tminute: date.getMinutes(),\n\t\tsecond: date.getSeconds(),\n\t\tmillisecond: date.getMilliseconds(),\n\t};\n};\n","/**\n * show error\n * @since 3.0.0\n * @param {String} msg - the message for error\n */\nexport const error = (msg) => {\n\tconsole.error(msg);\n};\n","import { CALENDAR } from \"../utils\";\nimport { error } from \"./error\";\nimport { isDate } from \"../comparison/isDate\";\n\n/**\n * get label of day\n * @param {Date} date - the date that received day\n * @param {'jalali'|'gregorian'} calendar - the calendar\n * @returns {String} returns day label\n * @example Saturday | شنبه\n */\nexport const getDayLabel = function (date = new Date(), calendar = \"jalali\") {\n\tif (isDate(date)) return CALENDAR[calendar][\"days\"][\"label\"][date.getDay()];\n\treturn error(\"the first param must be instance of Date.\");\n};\n","import { CALENDAR } from \"../utils\";\nimport { error } from \"./error\";\nimport { isDate } from \"../comparison/isDate\";\n\n/**\n * get the day of the week\n * @param {Date} date - the date that received day of week\n * @param {'jalali', 'gregorian'} calendar - the calendar\n * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n * @returns {Number|String} the number of the day of week\n */\nexport const getDayOfWeek = (\n\tdate = new Date(),\n\tcalendar = \"jalali\",\n\tmode = \"standard\"\n) => {\n\tif (isDate(date)) {\n\t\t// if the year was an instance of Date\n\t\treturn (\n\t\t\tCALENDAR[calendar][\"days\"][\"weekNumber\"][date.getDay()] +\n\t\t\t(mode != \"standard\" ? 0 : 1)\n\t\t);\n\t}\n\treturn error(\"the first param must be instance of Date.\");\n};\n","import { getDaysInMonth } from \"../set-get\";\n\n/**\n * get the day of the year\n * @param {Null|String|Number} year - the year of date\n * @param {Null|Number|String} month - the month of date that gives the day of the year\n * @param {Null|Number|String} day - the day of date that gives the day of the year\n * @param {Null|Number|String} calendar - the calendar\n * @returns {Number} the day of the year\n */\nexport const getDayOfYear = (year, month, day, calendar) => {\n\t//plus sign before a variable, convert variable to int\n\tmonth = +month;\n\tday = +day;\n\twhile (--month != 0) {\n\t\tday += getDaysInMonth(calendar, year, month);\n\t}\n\treturn day;\n};\n","const dayOfYearFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jd\";\n\t\tdefault:\n\t\t\treturn \"d\";\n\t}\n};\n\n/**\n * get the week of the year\n * @param {Null|Number|String} year - the year of date that gives the week of the year\n * @param {Null|Number|String} month - the month of date that gives the week of the year\n * @param {Null|Number|String} day - the day of date that gives the week of the year\n * @param {String} calendar - the calendar\n * @returns {Number} the week of the year\n */\nexport const getWeekOfYear = function (year, month, day, calendar) {\n\tconst firstOfYear = this.clone().calendar(calendar).parse(year);\n\tconst firstOfYearDay = firstOfYear.date(dayOfYearFormat(calendar));\n\tconst date = firstOfYear.clone().parse(year, month, day);\n\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\n\tconst weekNumber = Math.ceil(date.diff(firstOfYear, \"date\", true) / 7);\n\n\tconst weeksInYear = date.clone().getWeeksInYear();\n\treturn weekNumber > weeksInYear ? weeksInYear : weekNumber;\n};\n","import { typesToArray } from \"../base\";\n\n/**\n * do the math operation on dates\n * @since 1.4.0\n * @param {...String|PersianDate|Date|Array|Object} values - the dates\n * @param {'min'|'max'} operation - the operation\n * @returns {*} return maximum date\n * @throws {false} if parameters not send or parameters is invalid, return false\n */\nexport const mathOperation = function (values, operation) {\n\tif (!values.length) {\n\t\treturn false;\n\t}\n\tconst args = [...values];\n\tconst argsNumber = args.map((date) => {\n\t\tdate = typesToArray(this.c, date);\n\t\tif (this.isValid(...date))\n\t\t\treturn this.clone()\n\t\t\t\t.parse(...date)\n\t\t\t\t.timestamp();\n\t\treturn false;\n\t});\n\tif (argsNumber.includes(false)) return false;\n\treturn args[argsNumber.indexOf(Math[operation](...argsNumber))];\n};\n","/**\n * check the input is timestamp\n * @since 2.0.0\n * @param {Number|String} timestamp - input that must be checked\n * @returns {Boolean} if input was timestamp, return true\n */\nexport const isTimestamp = (timestamp) => {\n\treturn !isNaN(timestamp) && Math.floor(timestamp / 10000) > 0;\n};\n","import PersianDate from \"../PersianDate\";\nexport const isPersianDate = function (date) {\n\treturn date instanceof PersianDate;\n};\n","import { isValidDate, isValidTime } from \".\";\n\nexport const isValid = function (\n\tcalendar,\n\tyear,\n\tmonth,\n\tday,\n\thour,\n\tminute,\n\tsecond,\n\tmillisecond\n) {\n\treturn (\n\t\tisValidDate(calendar, year, month, day) &&\n\t\tisValidTime(hour, minute, second, millisecond)\n\t);\n};\n","import { isLeapYear } from \"./isLeapYear\";\n\nconst jalali = (year, month, day) => {\n\tif (month >= 7 && month <= 11 && day == 31) return false;\n\tif (month == 12 && day == 31) return false;\n\tif (month == 12 && day == 30 && !isLeapYear(\"j\", year)) return false;\n\treturn true;\n};\n\nconst gregorian = (year, month, day) => {\n\tif ([2, 4, 6, 9, 11].includes(month) && day == 31) return false;\n\tif (month == 2 && (day == 30 || (day == 29 && !isLeapYear(\"g\", year))))\n\t\treturn false;\n\treturn true;\n};\n\nexport const isValidDate = function (calendar, year, month, day) {\n\tif ([year, month, day].some((e) => String(e).search(/null|NaN/) != -1))\n\t\treturn false;\n\tif (year < 0 || month > 12 || month < 1 || day > 31 || day < 1) return false;\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn jalali(year, month, day);\n\t\tdefault:\n\t\t\treturn gregorian(year, month, day);\n\t}\n};\n","export const isValidTime = function (hour, minute, second, millisecond) {\n\tif (\n\t\t[hour, minute, second, millisecond].some(\n\t\t\t(e) => String(e).search(/null|NaN/) != -1\n\t\t)\n\t)\n\t\treturn false;\n\tif (hour < 0 || hour > 23) return false;\n\tif (minute < 0 || minute > 59) return false;\n\tif (second < 0 || second > 59) return false;\n\tif (millisecond < 0 || millisecond > 999) return false;\n\treturn true;\n};\n","import { REGEX } from \"../utils\";\nimport { typesToArray, compare } from \"../base\";\n\nexport function isSame() {\n\tlet date = typesToArray(this.c, ...arguments);\n\tdate = this.toArray().map((value, i) =>\n\t\tREGEX[\"isNumeric\"].test(date[i]) ? date[i] : value\n\t);\n\n\treturn compare.call(this, date, \"==\");\n}\n","import { REGEX } from \"../utils\";\nimport { typesToArray, compare } from \"../base\";\n\nexport function isBetween(from, to, method) {\n\tconst date = this.toArray();\n\n\tfrom = typesToArray(this.c, from);\n\tif (!from[2]) date[2] = 1;\n\tfrom = date.map((value, i) =>\n\t\tREGEX[\"isNumeric\"].test(from[i]) ? from[i] : value\n\t);\n\n\tto = typesToArray(this.c, to);\n\tto = date.map((value, i) => (REGEX[\"isNumeric\"].test(to[i]) ? to[i] : value));\n\n\tif (!(this.isValid(...from) && this.isValid(...to))) return false;\n\n\treturn (\n\t\tcompare.call(this, from, method[0] === \"[\" ? \">=\" : \">\") &&\n\t\tcompare.call(this, to, method[1] === \"]\" ? \"<=\" : \"<\")\n\t);\n}\n","export const isDate = function (date) {\n\treturn date instanceof Date;\n};\n","const jalali = (year) => {\n\tconst array =\n\t\tyear > 1342 ? [1, 5, 9, 13, 17, 22, 26, 30] : [1, 5, 9, 13, 17, 21, 26, 30];\n\tconst remainder = year % 33;\n\treturn array.includes(remainder);\n};\n\nconst gregorian = (year) => {\n\treturn (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n};\n\nexport const isLeapYear = function (calendar, year) {\n\t// calendar[0] ==> first letter of calendar ('j' | 'g' | ...)\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn jalali(year);\n\t\tdefault:\n\t\t\treturn gregorian(year);\n\t}\n};\n","import { REGEX } from \"../utils\";\nimport { gtj } from \"../base\";\n\nconst getDefaultFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jy\";\n\t\tdefault:\n\t\t\treturn \"y\";\n\t}\n};\n\nexport function year(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tthis.d.year = +format;\n\t\tif (!this.isValidDate()) {\n\t\t\treturn this.subDay(1, false);\n\t\t}\n\n\t\treturn this;\n\t} else {\n\t\tif (!format) format = getDefaultFormat(this.c);\n\t\tconst jYear = this.c == \"jalali\" ? this.d.year : gtj(this.toDate())[0];\n\t\tif (format == \"jy\" || format == \"jYYYY\") return jYear;\n\t\tif (format == \"jYY\") return String(jYear).slice(-2);\n\t\tconst gYear =\n\t\t\tthis.c == \"gregorian\" ? this.d.year : this.toDate().getFullYear();\n\t\tif (format == \"y\" || format == \"YYYY\") return gYear;\n\t\tif (format == \"YY\") return String(gYear).slice(-2);\n\t\treturn jYear;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport { gtj, ordinalNumber } from \"../base\";\n\nconst getDefaultFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jQ\";\n\t\tdefault:\n\t\t\treturn \"Q\";\n\t}\n};\n\nexport function quarter(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tif (format < 1) {\n\t\t\tthis.d.month = 1;\n\t\t\tthis.subQuarter(format - 1, false);\n\t\t} else if (format > 4) {\n\t\t\tthis.d.month = 12;\n\t\t\tthis.addQuarter(format - 4, false);\n\t\t} else {\n\t\t\tthis.d.month = +format * 3 - 2;\n\t\t}\n\t\twhile (!this.isValidDate()) {\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\treturn this;\n\t} else {\n\t\tif (!format) format = getDefaultFormat(this.c);\n\n\t\tlet jQuarter = Math.ceil(\n\t\t\t(this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1]) / 3\n\t\t);\n\t\tif (format == \"jQ\") return jQuarter;\n\t\tif (format == \"jQo\") return ordinalNumber(jQuarter);\n\t\tif (format == \"jQO\") return ordinalNumber(jQuarter, \"jalali\", 2);\n\n\t\tconst gQuarter = Math.ceil(\n\t\t\t(this.c == \"gregorian\" ? this.d.month : this.toDate().getMonth() + 1) / 3\n\t\t);\n\t\tif (format == \"Q\") return gQuarter;\n\t\tif (format == \"Qo\" || format == \"QO\")\n\t\t\treturn ordinalNumber(gQuarter, \"gregorian\");\n\n\t\treturn jQuarter;\n\t}\n}\n","import { REGEX, CALENDAR } from \"../utils\";\nimport { addPrefix, gtj, ordinalNumber } from \"../base\";\n\nconst getDefaultFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jM\";\n\t\tdefault:\n\t\t\treturn \"M\";\n\t}\n};\n\nexport function month(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tif (format < 1) {\n\t\t\tthis.d.month = 1;\n\t\t\tthis.subMonth(format - 1, false);\n\t\t} else if (format > 12) {\n\t\t\tthis.d.month = 12;\n\t\t\tthis.addMonth(format - 12, false);\n\t\t} else {\n\t\t\tthis.d.month = +format;\n\t\t}\n\n\t\twhile (!this.isValidDate()) {\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\treturn this;\n\t} else {\n\t\tif (!format) format = getDefaultFormat(this.c);\n\n\t\tconst jMonth = this.c == \"jalali\" ? this.d.month : gtj(this.toDate())[1];\n\t\tif (format == \"jMM\") return addPrefix(jMonth, 2);\n\t\tif (format == \"jM\") return jMonth;\n\t\tif (format == \"jMMMM\" || format == \"jMMM\")\n\t\t\treturn CALENDAR[\"jalali\"][\"months\"][jMonth];\n\t\tif (format == \"jMo\") return ordinalNumber(jMonth);\n\t\tif (format == \"jMO\") return ordinalNumber(jMonth, \"jalali\", 2);\n\n\t\tconst gMonth =\n\t\t\tthis.c == \"gregorian\" ? this.d.month : this.toDate().getMonth() + 1;\n\t\tif (format == \"M\") return gMonth;\n\t\tif (format == \"MM\") return addPrefix(gMonth, 2);\n\t\tif (format == \"MMMM\") return CALENDAR[\"gregorian\"][\"months\"][gMonth];\n\t\tif (format == \"Mo\" || format == \"MO\")\n\t\t\treturn ordinalNumber(gMonth, \"gregorian\");\n\t\tif (format == \"MMM\")\n\t\t\treturn CALENDAR[\"gregorian\"][\"months\"][gMonth].slice(0, 3);\n\n\t\treturn jMonth;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport { addPrefix, getWeekOfYear, gtj, ordinalNumber } from \"../base\";\n\nconst getDefaultFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jw\";\n\t\tdefault:\n\t\t\treturn \"w\";\n\t}\n};\n\nexport function week(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tconst weeksInYear = this.getWeeksInYear();\n\t\tif (format < 1) {\n\t\t\tthis.week(1);\n\t\t\tthis.subWeek(format - 1, false);\n\t\t} else if (format > weeksInYear) {\n\t\t\tthis.week(weeksInYear);\n\t\t\tthis.addWeek(format - weeksInYear, false);\n\t\t} else {\n\t\t\tconst weekOfYear = getWeekOfYear.call(\n\t\t\t\tthis,\n\t\t\t\tthis.d.year,\n\t\t\t\tthis.d.month,\n\t\t\t\tthis.d.date,\n\t\t\t\tthis.c\n\t\t\t);\n\t\t\tthis.addWeek(+format - weekOfYear);\n\t\t}\n\n\t\twhile (!this.isValidDate()) {\n\t\t\tthis.subDay(1, false);\n\t\t}\n\t\treturn this;\n\t} else {\n\t\tif (!format) format = getDefaultFormat(this.c);\n\n\t\tconst jWeekOfYear = getWeekOfYear.call(\n\t\t\tthis,\n\t\t\tthis.year(\"jy\"),\n\t\t\tthis.month(\"jM\"),\n\t\t\tthis.date(\"jD\"),\n\t\t\tthis.c\n\t\t);\n\t\tif (format == \"jw\" || format == \"jW\") return jWeekOfYear;\n\t\tif (format == \"jww\" || format == \"jWW\") return addPrefix(jWeekOfYear, 2);\n\t\tif (format == \"jwo\" || format == \"jWo\") return ordinalNumber(jWeekOfYear);\n\t\tif (format == \"jwO\" || format == \"jWO\")\n\t\t\treturn ordinalNumber(jWeekOfYear, \"jalali\", 2);\n\n\t\tconst gWeekOfYear = getWeekOfYear.call(\n\t\t\tthis,\n\t\t\tthis.year(\"y\"),\n\t\t\tthis.month(\"M\"),\n\t\t\tthis.date(\"D\"),\n\t\t\t\"gregorian\"\n\t\t);\n\t\tif (format == \"w\" || format == \"W\") return gWeekOfYear;\n\t\tif (format == \"ww\" || format == \"WW\") return addPrefix(gWeekOfYear, 2);\n\t\tif (format == \"wo\" || format == \"Wo\" || format == \"wO\" || format == \"WO\")\n\t\t\treturn ordinalNumber(gWeekOfYear, \"gregorian\");\n\t\treturn jWeekOfYear;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport {\n\taddPrefix,\n\tordinalNumber,\n\tgetDayOfWeek,\n\tgtj,\n\tgetDayLabel,\n\tgetDayOfYear,\n} from \"../base\";\n\nconst getDefaultFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jD\";\n\t\tdefault:\n\t\t\treturn \"D\";\n\t}\n};\n\nexport function date(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tconst daysInMonth = this.getDaysInMonth();\n\n\t\tif (format < 1) {\n\t\t\tthis.d.date = 1;\n\t\t\tthis.subDay(format - 1);\n\t\t} else if (format > daysInMonth) {\n\t\t\tthis.d.date = daysInMonth;\n\t\t\tthis.addDay(format - daysInMonth);\n\t\t} else {\n\t\t\tthis.d.date = +format;\n\t\t}\n\n\t\treturn this;\n\t} else {\n\t\tif (!format) format = getDefaultFormat(this.c);\n\n\t\tconst jDate = this.c == \"jalali\" ? this.d.date : gtj(this.toDate())[2];\n\t\t//---------- Day of Month ----------//\n\t\tif (format == \"jDD\") return addPrefix(jDate, 2);\n\t\tif (format == \"jD\") return jDate;\n\t\tif (format == \"jDo\") return ordinalNumber(jDate);\n\t\tif (format == \"jDO\") return ordinalNumber(jDate, \"jalali\", 2);\n\t\t//---------- Day of Week ----------//\n\t\tconst gDate = this.toDate();\n\t\tif (format == \"jdddd\" || format == \"jddd\") return getDayLabel(gDate);\n\t\tif (format == \"jdd\") return getDayLabel(gDate).slice(0, 1);\n\t\tlet dayOfWeek = getDayOfWeek(gDate);\n\t\tif (format == \"jdo\") return ordinalNumber(dayOfWeek);\n\t\tif (format == \"jdO\") return ordinalNumber(dayOfWeek, \"jalali\", 2);\n\t\tif (format == \"jd\") return getDayOfWeek(gDate, \"jalali\", \"array\");\n\t\tif (format == \"jde\") return dayOfWeek;\n\t\t//---------- Day of Year ----------//\n\t\tlet dayOfYear = getDayOfYear(this.year(\"jy\"), this.month(\"jM\"), jDate, \"j\");\n\t\tif (format == \"jDDDD\") return addPrefix(dayOfYear, 3);\n\t\tif (format == \"jDDD\") return dayOfYear;\n\t\tif (format == \"jDDDo\") return ordinalNumber(dayOfYear);\n\t\tif (format == \"jDDDO\") return ordinalNumber(dayOfYear, \"jalali\", 2);\n\t\t//---------- Day of Month ----------//\n\t\tif (format == \"DD\") return addPrefix(gDate.getDate(), 2);\n\t\tif (format == \"D\") return gDate.getDate();\n\t\tif (format == \"Do\" || format == \"DO\")\n\t\t\treturn ordinalNumber(gDate.getDate(), \"gregorian\");\n\t\t//---------- Day of Week ----------//\n\t\tif (format == \"dddd\") return getDayLabel(gDate, \"gregorian\");\n\t\tif (format == \"ddd\") return getDayLabel(gDate, \"gregorian\").slice(0, 3);\n\t\tif (format == \"dd\") return getDayLabel(gDate, \"gregorian\").slice(0, 2);\n\t\tdayOfWeek = getDayOfWeek(gDate, \"gregorian\");\n\t\tif (format == \"do\" || format == \"dO\")\n\t\t\treturn ordinalNumber(dayOfWeek, \"gregorian\");\n\t\tif (format == \"d\") return dayOfWeek - 1;\n\t\tif (format == \"de\") return dayOfWeek;\n\t\t//---------- Day of Year ----------//\n\t\tdayOfYear = getDayOfYear(\n\t\t\tgDate.getFullYear(),\n\t\t\tgDate.getMonth() + 1,\n\t\t\tgDate.getDate(),\n\t\t\t\"g\"\n\t\t);\n\t\tif (format == \"DDDD\") return addPrefix(dayOfYear, 3);\n\t\tif (format == \"DDD\") return dayOfYear;\n\t\tif (format == \"DDDo\" || format == \"DDDO\")\n\t\t\treturn ordinalNumber(dayOfYear, \"gregorian\");\n\t\treturn jDate;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport { addPrefix } from \"../base\";\n\nexport function hour(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tif (format < 0) {\n\t\t\tthis.d.hour = 0;\n\t\t\tthis.subHour(format);\n\t\t} else if (format > 23) {\n\t\t\tthis.d.hour = 23;\n\t\t\tthis.addHour(format - 23);\n\t\t} else {\n\t\t\tthis.d.hour = +format;\n\t\t}\n\n\t\treturn this;\n\t} else {\n\t\tlet h = this.d.hour;\n\t\tif (format == \"H\") return h;\n\t\tif (format == \"HH\") return addPrefix(h, 2);\n\t\tif (format == \"k\") return h || 24;\n\t\tif (format == \"kk\") return addPrefix(h || 24, 2);\n\t\th = h > 12 ? h - 12 : h;\n\t\tif (format == \"h\") return h;\n\t\tif (format == \"hh\") return addPrefix(h, 2);\n\t\treturn h;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport { addPrefix } from \"../base\";\n\nexport function minute(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tif (format < 0) {\n\t\t\tthis.d.minute = 0;\n\t\t\tthis.subMinute(format);\n\t\t} else if (format > 23) {\n\t\t\tthis.d.minute = 23;\n\t\t\tthis.addMinute(format - 23);\n\t\t} else {\n\t\t\tthis.d.minute = +format;\n\t\t}\n\n\t\treturn this;\n\t} else {\n\t\tif (format == \"m\") return this.d.minute;\n\t\tif (format == \"mm\") return addPrefix(this.d.minute, 2);\n\t\treturn this.d.minute;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport { addPrefix } from \"../base\";\n\nexport function second(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tif (format < 0) {\n\t\t\tthis.d.second = 0;\n\t\t\tthis.subSecond(format);\n\t\t} else if (format > 23) {\n\t\t\tthis.d.second = 23;\n\t\t\tthis.addSecond(format - 23);\n\t\t} else {\n\t\t\tthis.d.second = +format;\n\t\t}\n\n\t\treturn this;\n\t} else {\n\t\tif (format == \"s\") return this.d.second;\n\t\tif (format == \"ss\") return addPrefix(this.d.second, 2);\n\t\treturn this.d.second;\n\t}\n}\n","import { REGEX } from \"../utils\";\nimport { addPrefix } from \"../base\";\n\nexport function millisecond(format) {\n\tformat = String(format).trim();\n\n\tif (REGEX[\"isNumeric\"].test(format)) {\n\t\tif (format < 0) {\n\t\t\tthis.d.millisecond = 0;\n\t\t\tthis.subMillisecond(format);\n\t\t} else if (format > 23) {\n\t\t\tthis.d.millisecond = 23;\n\t\t\tthis.addMillisecond(format - 23);\n\t\t} else {\n\t\t\tthis.d.millisecond = +format;\n\t\t}\n\n\t\treturn this;\n\t} else {\n\t\tif (format == \"CCC\" || format == \"c\") return this.d.millisecond;\n\t\tif (format == \"CCCC\") return addPrefix(this.d.millisecond, 3);\n\t\treturn this.d.millisecond;\n\t}\n}\n","export function timestamp(value) {\n\tif (value) {\n\t\treturn this.fromGregorian(+String(value).trim());\n\t} else {\n\t\treturn this.toDate().getTime();\n\t}\n}\n","import { isLeapYear } from \"../comparison/isLeapYear\";\n\nconst jalali = (calendar, year, month) => {\n\tif (month >= 1 && month <= 6) return 31;\n\telse if ((month > 6 && month <= 11) || isLeapYear(calendar, year)) {\n\t\treturn 30;\n\t}\n\treturn 29;\n};\n\nconst gregorian = (calendar, year, month) => {\n\tif ([1, 3, 5, 7, 8, 10, 12].includes(month)) return 31;\n\telse if (month != 2) return 30;\n\telse if (isLeapYear(calendar, year)) return 29;\n\treturn 28;\n};\n\nexport const getDaysInMonth = function (calendar, year, month) {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn jalali(calendar, year, month);\n\t\tdefault:\n\t\t\treturn gregorian(calendar, year, month);\n\t}\n};\n","const getDayOfYearFormat = (calendar) => {\n\tswitch (calendar[0]) {\n\t\tcase \"j\":\n\t\t\treturn \"jd\";\n\t\tdefault:\n\t\t\treturn \"d\";\n\t}\n};\n\nexport function getWeeksInYear(year) {\n\tconst dayOfYearFormat = getDayOfYearFormat(this.c);\n\n\tconst firstOfYear = this.clone().parse(year);\n\tconst firstOfYearDay = firstOfYear.date(dayOfYearFormat);\n\tconst lastOfYear = firstOfYear.clone().endOf(\"year\").startOf(\"day\");\n\tconst lastOfYearDay = lastOfYear.date(dayOfYearFormat);\n\n\tif (firstOfYearDay > 3) firstOfYear.addDay(7 - firstOfYearDay);\n\telse firstOfYear.subDay(firstOfYearDay);\n\n\tif (lastOfYearDay > 3) lastOfYear.addDay(7 - lastOfYearDay);\n\telse lastOfYear.subDay(lastOfYearDay);\n\n\treturn Math.ceil(lastOfYear.diff(firstOfYear, \"date\") / 7);\n}\n","import { getDayOfWeek } from \"../base\";\n\nexport function startOf(unit) {\n\tthis.d.millisecond = 0;\n\tif (unit[0] == \"s\") return this;\n\tthis.d.second = 0;\n\tif (unit == \"m\" || unit == \"minute\") return this;\n\tthis.d.minute = 0;\n\tif (unit[0] == \"h\") return this;\n\tthis.d.hour = 0;\n\tif (unit[0] == \"d\") return this;\n\tif (unit[0] == \"w\")\n\t\treturn this.subDay(getDayOfWeek(this.toDate(), this.c, \"array\"));\n\tthis.d.date = 1;\n\tif (unit[0] == \"q\") return this.quarter(this.quarter());\n\tif (unit == \"M\" || unit == \"month\") return this;\n\tthis.d.month = 1;\n\tif (unit[0] == \"y\") return this;\n}\n","import { getDayOfWeek } from \"../base\";\n\nexport function endOf(unit) {\n\tthis.d.millisecond = 999;\n\tif (unit[0] == \"s\") return this;\n\tthis.d.second = 59;\n\tif (unit == \"m\" || unit == \"minute\") return this;\n\tthis.d.minute = 59;\n\tif (unit[0] == \"h\") return this;\n\tthis.d.hour = 23;\n\tif (unit[0] == \"d\") return this;\n\tif (unit[0] == \"w\")\n\t\treturn this.addDay(7 - getDayOfWeek(this.toDate(), this.c));\n\tif (unit[0] == \"q\") {\n\t\tthis.quarter(this.quarter()).addMonth(2);\n\t\tthis.d.date = this.getDaysInMonth();\n\t\treturn this;\n\t}\n\tthis.d.date = this.getDaysInMonth();\n\tif (unit == \"M\" || unit == \"month\") return this;\n\tthis.d.month = 12;\n\tthis.d.date = this.getDaysInMonth();\n\tif (unit[0] == \"y\") return this;\n}\n","import { typesToArray } from \"../base\";\nimport { isDate, isPersianDate } from \"../comparison\";\n\nexport function time(...t) {\n\tif (!t.length) return this.toArray().slice(3);\n\tlet times = [];\n\tif (isPersianDate(t[0])) times = t[0].time();\n\telse if (isDate(t[0]))\n\t\ttimes = [\n\t\t\tt[0].getHours(),\n\t\t\tt[0].getMinutes(),\n\t\t\tt[0].getSeconds(),\n\t\t\tt[0].getMilliseconds(),\n\t\t];\n\telse if (Object.prototype.toString.call(t[0]) === \"[object Object]\")\n\t\ttimes = [\n\t\t\tt[0].h || t[0].hour || t[0].hours || 0,\n\t\t\tt[0].m || t[0].minute || t[0].minutes || 0,\n\t\t\tt[0].s || t[0].second || t[0].seconds || 0,\n\t\t\tt[0].ms || t[0].millisecond || t[0].milliseconds || 0,\n\t\t];\n\telse times = typesToArray(this.c, ...t);\n\tif (this.isValidTime(...times)) {\n\t\treturn this.hour(times[0] || 0)\n\t\t\t.minute(times[1] || 0)\n\t\t\t.second(times[2] || 0)\n\t\t\t.millisecond(times[3] || 0);\n\t} else return \"زمان نامعتبر\";\n}\n","const CALENDAR = {\n\tjalali: {\n\t\tmonths: {\n\t\t\t1: \"فروردین\",\n\t\t\t2: \"اردیبهشت\",\n\t\t\t3: \"خرداد\",\n\t\t\t4: \"تیر\",\n\t\t\t5: \"مرداد\",\n\t\t\t6: \"شهریور\",\n\t\t\t7: \"مهر\",\n\t\t\t8: \"آبان\",\n\t\t\t9: \"آذر\",\n\t\t\t10: \"دی\",\n\t\t\t11: \"بهمن\",\n\t\t\t12: \"اسفند\",\n\t\t},\n\t\tdays: {\n\t\t\tlabel: {\n\t\t\t\t6: \"شنبه\",\n\t\t\t\t0: \"یکشنبه\",\n\t\t\t\t1: \"دوشنبه\",\n\t\t\t\t2: \"سه‌شنبه\",\n\t\t\t\t3: \"چهارشنبه\",\n\t\t\t\t4: \"پنجشنبه\",\n\t\t\t\t5: \"جمعه\",\n\t\t\t},\n\t\t\tweekNumber: {\n\t\t\t\t// days in jalali calendar start from saturday or 6\n\t\t\t\t6: 0, //شنبه\n\t\t\t\t0: 1, //یکشنبه\n\t\t\t\t1: 2, //دوشنبه\n\t\t\t\t2: 3, //سه‌شنبه\n\t\t\t\t3: 4, //چهارشنبه\n\t\t\t\t4: 5, //پنجشنبه\n\t\t\t\t5: 6, //جمعه\n\t\t\t},\n\t\t},\n\t\tordinalNumbers: function (number, mode) {\n\t\t\tconst numbers = {\n\t\t\t\t1: \"یک\",\n\t\t\t\t2: \"دو\",\n\t\t\t\t3: \"سو\",\n\t\t\t\t4: \"چهار\",\n\t\t\t\t5: \"پنج\",\n\t\t\t\t6: \"شش\",\n\t\t\t\t7: \"هفت\",\n\t\t\t\t8: \"هشت\",\n\t\t\t\t9: \"نه\",\n\t\t\t\t10: \"ده\",\n\t\t\t\t11: \"یازده\",\n\t\t\t\t12: \"دوازده\",\n\t\t\t\t13: \"سیزده\",\n\t\t\t\t14: \"چهارده\",\n\t\t\t\t15: \"پانزده\",\n\t\t\t\t16: \"شانزده\",\n\t\t\t\t17: \"هفده\",\n\t\t\t\t18: \"هجده\",\n\t\t\t\t19: \"نوزده\",\n\t\t\t\t20: \"بیست\",\n\t\t\t\t30: \"سی‌\",\n\t\t\t\t40: \"چهل\",\n\t\t\t\t50: \"پنجاه\",\n\t\t\t\t60: \"شصت\",\n\t\t\t\t70: \"هفتاد\",\n\t\t\t\t80: \"هشتاد\",\n\t\t\t\t90: \"نود\",\n\t\t\t\t100: \"صد\",\n\t\t\t\t200: \"دویست\",\n\t\t\t\t300: \"سیصد\",\n\t\t\t};\n\t\t\tlet ordinalNumber = \"\";\n\t\t\tif (number == 1) ordinalNumber = \"اول\";\n\t\t\telse if (numbers[number])\n\t\t\t\tordinalNumber = numbers[number] + (number == 30 ? \"ام\" : \"م\");\n\t\t\telse {\n\t\t\t\tlet remainder = number % 100;\n\t\t\t\tif (numbers[remainder]) ordinalNumber = numbers[remainder] + \"م\";\n\t\t\t\telse {\n\t\t\t\t\tremainder = number % 10;\n\t\t\t\t\tif (remainder) ordinalNumber = numbers[remainder] + \"م\";\n\t\t\t\t}\n\t\t\t\tremainder = (number - remainder) % 100;\n\t\t\t\tif (remainder)\n\t\t\t\t\tordinalNumber =\n\t\t\t\t\t\tnumbers[remainder] +\n\t\t\t\t\t\t(ordinalNumber\n\t\t\t\t\t\t\t? \" و \" + ordinalNumber\n\t\t\t\t\t\t\t: remainder == 30\n\t\t\t\t\t\t\t? \"ام \"\n\t\t\t\t\t\t\t: \"م\");\n\t\t\t\tremainder = Math.floor(number / 100) * 100;\n\t\t\t\tif (remainder)\n\t\t\t\t\tordinalNumber =\n\t\t\t\t\t\tnumbers[remainder] + (ordinalNumber ? \" و \" + ordinalNumber : \"م\");\n\t\t\t}\n\t\t\tif (mode == 2) ordinalNumber += \"ین\";\n\t\t\treturn ordinalNumber;\n\t\t},\n\t},\n\tgregorian: {\n\t\tmonths: {\n\t\t\t1: \"January\",\n\t\t\t2: \"February\",\n\t\t\t3: \"March\",\n\t\t\t4: \"April\",\n\t\t\t5: \"May\",\n\t\t\t6: \"June\",\n\t\t\t7: \"July\",\n\t\t\t8: \"August\",\n\t\t\t9: \"September\",\n\t\t\t10: \"October\",\n\t\t\t11: \"November\",\n\t\t\t12: \"December\",\n\t\t},\n\t\tdays: {\n\t\t\tlabel: {\n\t\t\t\t0: \"Sunday\",\n\t\t\t\t1: \"Monday\",\n\t\t\t\t2: \"Tuesday\",\n\t\t\t\t3: \"Wednesday\",\n\t\t\t\t4: \"Thursday\",\n\t\t\t\t5: \"Friday\",\n\t\t\t\t6: \"Saturday\",\n\t\t\t},\n\t\t\tweekNumber: {\n\t\t\t\t// days in gregorian calendar start from sunday or 0\n\t\t\t\t0: 0, // Sunday\n\t\t\t\t1: 1, // Monday\n\t\t\t\t2: 2, // Tuesday\n\t\t\t\t3: 3, // Wednesday\n\t\t\t\t4: 4, // Thursday\n\t\t\t\t5: 5, // Friday\n\t\t\t\t6: 6, // Saturday\n\t\t\t},\n\t\t},\n\t\tordinalNumbers: function (number) {\n\t\t\tif (number == 1 || (number % 10 == 1 && number != 11))\n\t\t\t\treturn number + \"st\";\n\t\t\telse if (number == 2 || (number % 10 == 2 && number != 12))\n\t\t\t\treturn number + \"nd\";\n\t\t\telse if (number == 3 || (number % 10 == 3 && number != 13))\n\t\t\t\treturn number + \"rd\";\n\t\t\telse return number + \"th\";\n\t\t},\n\t},\n};\n\nconst REGEX = {\n\tformat: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n\tisNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n\tseparators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n\tbetweenBacktick: /`(.*?)`/g, // find the texts between the backticks ==> `Alireza`\n};\n\nconst TIMETYPE = function (hour, format) {\n\tif (hour >= 0 && hour < 12) {\n\t\tif (format == \"a\") return \"am\";\n\t\telse if (format == \"aa\") return \"A.M.\";\n\t\telse if (format == \"A\") return \"AM\";\n\t\telse if (format == \"ja\") return \"ق ظ\";\n\t\telse if (format == \"jaa\") return \"ق.ظ\";\n\t\telse if (format == \"jA\") return \"قبل از ظهر\";\n\t\treturn \"ق.ظ\";\n\t} else if (hour >= 12 && hour < 24) {\n\t\tif (format == \"a\") return \"pm\";\n\t\telse if (format == \"aa\") return \"P.M.\";\n\t\telse if (format == \"A\") return \"PM\";\n\t\telse if (format == \"ja\") return \"ب ظ\";\n\t\telse if (format == \"jaa\") return \"ب.ظ\";\n\t\telse if (format == \"jA\") return \"بعد از ظهر\";\n\t\treturn \"ب.ظ\";\n\t}\n};\n\nexport { CALENDAR, TIMETYPE, REGEX };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(739);\n"],"sourceRoot":""}