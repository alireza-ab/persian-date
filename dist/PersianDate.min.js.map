{"version":3,"sources":["webpack://PersianDate/webpack/universalModuleDefinition","webpack://PersianDate/webpack/bootstrap","webpack://PersianDate/./src/utils.js","webpack://PersianDate/./src/PersianDate.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MONTHS","fa","1","2","3","4","5","6","7","8","9","10","11","12","en","ORDINALNUMBERS","fa1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","fa2","ordinalNumber","DAYS","jalali","0","gregorian","label","REGEX","format","isNumeric","separators","betweenBacktick","TIMETYPE","hour","PersianDate","this","gtj","year","month","day","minute","second","millisecond","date","jYear","jMonth","jDay","toString","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","newYear","days","parseInt","jtg","gYear","gMonth","gDay","daysOfMonths","v","getDayLabel","locale","getDay","showError","getDayOfWeek","calendar","getDayOfJYear","clone","getDaysInMonth","getDayOfGYear","startOfYear","diff","getTimezoneOffset","Math","floor","getWeekOfYear","dayOfYearFormat","firstOfYear","parse","firstOfYearDay","addDay","weekNumber","ceil","weeksInYear","getWeeksInYear","number","addPrefix","text","length","prefix","repeat","String","errorText","instance","error","now","setJalaliDate","setGregorianDate","setDate","deprecate","fromGregorian","fromJalali","isLeapYear","includes","isValid","isValidDate","isValidTime","some","e","search","addYear","checkDate","subYear","abs","subDay","addMonth","subMonth","monthToStartNewYear","dayToStartNextMonth","addQuarter","quarter","subQuarter","addWeek","week","subWeek","addHour","subHour","hourToNextDay","subMillisecond","addMinute","subMinute","minuteToNextHour","addSecond","subSecond","secondToNextMinute","addMillisecond","millisecondToNextSecond","pastMonth","pastDays","pastHours","pastMinute","pastSeconds","pastMilliseconds","texts","replace","matched","push","matchedFormat","match","dateString","substring","indexOf","timestamp","substr","trim","test","toDate","slice","daysInMonth","gDate","dayOfWeek","dayOfYear","weekOfYear","getTime","isSame","typesToArray","toArray","split","y","years","M","months","h","hours","minutes","seconds","ms","milliseconds","isBefore","isAfter","toObject","arguments","formats","isDate","isPersianDate","isSameOrBefore","isSameOrAfter","isBetween","from","to","method","min","args","values","concat","argsNumber","map","max","flat","unit","addOne","result","diffForHumans","suffix","round","isTimestamp","lastOfYear","lastOfYearDay","msg","console","warn","NaN","Number"],"mappings":"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","file":"PersianDate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PersianDate\"] = factory();\n\telse\n\t\troot[\"PersianDate\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const MONTHS = {\n    fa: {\n        1: \"فروردین\",\n        2: \"اردیبهشت\",\n        3: \"خرداد\",\n        4: \"تیر\",\n        5: \"مرداد\",\n        6: \"شهریور\",\n        7: \"مهر\",\n        8: \"آبان\",\n        9: \"آذر\",\n        10: \"دی\",\n        11: \"بهمن\",\n        12: \"اسفند\",\n    },\n    en: {\n        1: \"January\",\n        2: \"February\",\n        3: \"March\",\n        4: \"April\",\n        5: \"May\",\n        6: \"June\",\n        7: \"July\",\n        8: \"August\",\n        9: \"September\",\n        10: \"October\",\n        11: \"November\",\n        12: \"December\",\n    }\n};\n\nconst ORDINALNUMBERS = {\n    fa1: {\n        1: \"اول\",\n        2: \"دوم\",\n        3: \"سوم\",\n        4: \"چهارم\",\n        5: \"پنجم\",\n        6: \"ششم\",\n        7: \"هفتم\",\n        8: \"هشتم\",\n        9: \"نهم\",\n        10: \"دهم\",\n        11: \"یازدهم\",\n        12: \"دوازدهم\",\n        13: \"سیزدهم\",\n        14: \"چهاردهم\",\n        15: \"پانزدهم\",\n        16: \"شانزدهم\",\n        17: \"هفدهم\",\n        18: \"هجدهم\",\n        19: \"نوزدهم\",\n        20: \"بیستم\",\n        21: \"بیست و یکم\",\n        22: \"بیست و دوم\",\n        23: \"بیست و سوم\",\n        24: \"بیست و چهارم\",\n        25: \"بیست و پنجم\",\n        26: \"بیست و ششم\",\n        27: \"بیست و هفتم\",\n        28: \"بیست و هشتم\",\n        29: \"بیست و نهم\",\n        30: \"سی‌ام\",\n        31: \"سی‌ و یکم\",\n        32: \"سی‌‌ و دوم\",\n        33: \"سی‌‌ و سوم\",\n        34: \"سی‌‌ و چهارم\",\n        35: \"سی‌‌ و پنجم\",\n        36: \"سی‌‌ و ششم\",\n        37: \"سی‌‌ و هفتم\",\n        38: \"سی‌‌ و هشتم\",\n        39: \"سی‌‌ و نهم\",\n        40: \"چهلم\",\n        41: \"چهل و یکم\",\n        42: \"چهل و دوم\",\n        43: \"چهل و سوم\",\n        44: \"چهل و چهارم\",\n        45: \"چهل و پنجم\",\n        46: \"چهل و ششم\",\n        47: \"چهل و هفتم\",\n        48: \"چهل و هشتم\",\n        49: \"چهل و نهم\",\n        50: \"پنجاهم\",\n        51: \"پنجاه و یکم\",\n        52: \"پنجاه و دوم\",\n        53: \"پنجاه و سوم\",\n        54: \"پنجاه و چهارم\",\n        55: \"پنجاه و پنجم\",\n        56: \"پنجاه و ششم\",\n        57: \"پنجاه و هفتم\",\n        58: \"پنجاه و هشتم\",\n        59: \"پنجاه و نهم\",\n        60: \"شصتم\",\n        61: \"شصت و یکم\",\n        62: \"شصت و دوم\",\n        63: \"شصت و سوم\",\n        64: \"شصت و چهارم\",\n        65: \"شصت و پنجم\",\n        66: \"شصت و ششم\",\n        67: \"شصت و هفتم\",\n        68: \"شصت و هشتم\",\n        69: \"شصت و نهم\",\n        70: \"هفتادم\",\n        71: \"هفتاد و یکم\",\n        72: \"هفتاد و دوم\",\n        73: \"هفتاد و سوم\",\n        74: \"هفتاد و چهارم\",\n        75: \"هفتاد و پنجم\",\n        76: \"هفتاد و ششم\",\n        77: \"هفتاد و هفتم\",\n        78: \"هفتاد و هشتم\",\n        79: \"هفتاد و نهم\",\n        80: \"هشتادم\",\n        81: \"هشتاد و یکم\",\n        82: \"هشتاد و دوم\",\n        83: \"هشتاد و سوم\",\n        84: \"هشتاد و چهارم\",\n        85: \"هشتاد و پنجم\",\n        86: \"هشتاد و ششم\",\n        87: \"هشتاد و هفتم\",\n        88: \"هشتاد و هشتم\",\n        89: \"هشتاد و نهم\",\n        90: \"نودم\",\n        91: \"نود و یکم\",\n        92: \"نود و دوم\",\n        93: \"نود و سوم\",\n        94: \"نود و چهارم\",\n        95: \"نود و پنجم\",\n        96: \"نود و ششم\",\n        97: \"نود و هفتم\",\n        98: \"نود و هشتم\",\n        99: \"نود و نهم\",\n        100: \"صدم\",\n        101: \"صد و یکم\",\n        102: \"صد و دوم\",\n        103: \"صد و سوم\",\n        104: \"صد و چهارم\",\n        105: \"صد و پنجم\",\n        106: \"صد و ششم\",\n        107: \"صد و هفتم\",\n        108: \"صد و هشتم\",\n        109: \"صد و نهم\",\n        110: \"صد و دهم\",\n        111: \"صد و یازدهم\",\n        112: \"صد و دوازدهم\",\n        113: \"صد و سیزدهم\",\n        114: \"صد و چهاردهم\",\n        115: \"صد و پانزدهم\",\n        116: \"صد و شانزدهم\",\n        117: \"صد و هفدهم\",\n        118: \"صد و هجدهم\",\n        119: \"صد و نوزدهم\",\n        120: \"صد و بیستم\",\n        121: \"صد و بیست و یکم\",\n        122: \"صد و بیست و دوم\",\n        123: \"صد و بیست و سوم\",\n        124: \"صد و بیست و چهارم\",\n        125: \"صد و بیست و پنجم\",\n        126: \"صد و بیست و ششم\",\n        127: \"صد و بیست و هفتم\",\n        128: \"صد و بیست و هشتم\",\n        129: \"صد و بیست و نهم\",\n        130: \"صد و سی‌ام\",\n        131: \"صد و سی‌ و یکم\",\n        132: \"صد و سی‌‌ و دوم\",\n        133: \"صد و سی‌‌ و سوم\",\n        134: \"صد و سی‌‌ و چهارم\",\n        135: \"صد و سی‌‌ و پنجم\",\n        136: \"صد و سی‌‌ و ششم\",\n        137: \"صد و سی‌‌ و هفتم\",\n        138: \"صد و سی‌‌ و هشتم\",\n        139: \"صد و سی‌‌ و نهم\",\n        140: \"صد و چهلم\",\n        141: \"صد و چهل و یکم\",\n        142: \"صد و چهل و دوم\",\n        143: \"صد و چهل و سوم\",\n        144: \"صد و چهل و چهارم\",\n        145: \"صد و چهل و پنجم\",\n        146: \"صد و چهل و ششم\",\n        147: \"صد و چهل و هفتم\",\n        148: \"صد و چهل و هشتم\",\n        149: \"صد و چهل و نهم\",\n        150: \"صد و پنجاهم\",\n        151: \"صد و پنجاه و یکم\",\n        152: \"صد و پنجاه و دوم\",\n        153: \"صد و پنجاه و سوم\",\n        154: \"صد و پنجاه و چهارم\",\n        155: \"صد و پنجاه و پنجم\",\n        156: \"صد و پنجاه و ششم\",\n        157: \"صد و پنجاه و هفتم\",\n        158: \"صد و پنجاه و هشتم\",\n        159: \"صد و پنجاه و نهم\",\n        160: \"صد و شصتم\",\n        161: \"صد و شصت و یکم\",\n        162: \"صد و شصت و دوم\",\n        163: \"صد و شصت و سوم\",\n        164: \"صد و شصت و چهارم\",\n        165: \"صد و شصت و پنجم\",\n        166: \"صد و شصت و ششم\",\n        167: \"صد و شصت و هفتم\",\n        168: \"صد و شصت و هشتم\",\n        169: \"صد و شصت و نهم\",\n        170: \"صد و هفتادم\",\n        171: \"صد و هفتاد و یکم\",\n        172: \"صد و هفتاد و دوم\",\n        173: \"صد و هفتاد و سوم\",\n        174: \"صد و هفتاد و چهارم\",\n        175: \"صد و هفتاد و پنجم\",\n        176: \"صد و هفتاد و ششم\",\n        177: \"صد و هفتاد و هفتم\",\n        178: \"صد و هفتاد و هشتم\",\n        179: \"صد و هفتاد و نهم\",\n        180: \"صد و هشتادم\",\n        181: \"صد و هشتاد و یکم\",\n        182: \"صد و هشتاد و دوم\",\n        183: \"صد و هشتاد و سوم\",\n        184: \"صد و هشتاد و چهارم\",\n        185: \"صد و هشتاد و پنجم\",\n        186: \"صد و هشتاد و ششم\",\n        187: \"صد و هشتاد و هفتم\",\n        188: \"صد و هشتاد و هشتم\",\n        189: \"صد و هشتاد و نهم\",\n        190: \"صد و نودم\",\n        191: \"صد و نود و یکم\",\n        192: \"صد و نود و دوم\",\n        193: \"صد و نود و سوم\",\n        194: \"صد و نود و چهارم\",\n        195: \"صد و نود و پنجم\",\n        196: \"صد و نود و ششم\",\n        197: \"صد و نود و هفتم\",\n        198: \"صد و نود و هشتم\",\n        199: \"صد و نود و نهم\",\n        200: \"دویستم\",\n        201: \"دویست و یکم\",\n        202: \"دویست و دوم\",\n        203: \"دویست و سوم\",\n        204: \"دویست و چهارم\",\n        205: \"دویست و پنجم\",\n        206: \"دویست و ششم\",\n        207: \"دویست و هفتم\",\n        208: \"دویست و هشتم\",\n        209: \"دویست و نهم\",\n        210: \"دویست و دهم\",\n        211: \"دویست و یازدهم\",\n        212: \"دویست و دوازدهم\",\n        213: \"دویست و سیزدهم\",\n        214: \"دویست و چهاردهم\",\n        215: \"دویست و پانزدهم\",\n        216: \"دویست و شانزدهم\",\n        217: \"دویست و هفدهم\",\n        218: \"دویست و هجدهم\",\n        219: \"دویست و نوزدهم\",\n        220: \"دویست و بیستم\",\n        221: \"دویست و بیست و یکم\",\n        222: \"دویست و بیست و دوم\",\n        223: \"دویست و بیست و سوم\",\n        224: \"دویست و بیست و چهارم\",\n        225: \"دویست و بیست و پنجم\",\n        226: \"دویست و بیست و ششم\",\n        227: \"دویست و بیست و هفتم\",\n        228: \"دویست و بیست و هشتم\",\n        229: \"دویست و بیست و نهم\",\n        230: \"دویست و سی‌ام\",\n        231: \"دویست و سی‌ و یکم\",\n        232: \"دویست و سی‌‌ و دوم\",\n        233: \"دویست و سی‌‌ و سوم\",\n        234: \"دویست و سی‌‌ و چهارم\",\n        235: \"دویست و سی‌‌ و پنجم\",\n        236: \"دویست و سی‌‌ و ششم\",\n        237: \"دویست و سی‌‌ و هفتم\",\n        238: \"دویست و سی‌‌ و هشتم\",\n        239: \"دویست و سی‌‌ و نهم\",\n        240: \"دویست و چهلم\",\n        241: \"دویست و چهل و یکم\",\n        242: \"دویست و چهل و دوم\",\n        243: \"دویست و چهل و سوم\",\n        244: \"دویست و چهل و چهارم\",\n        245: \"دویست و چهل و پنجم\",\n        246: \"دویست و چهل و ششم\",\n        247: \"دویست و چهل و هفتم\",\n        248: \"دویست و چهل و هشتم\",\n        249: \"دویست و چهل و نهم\",\n        250: \"دویست و پنجاهم\",\n        251: \"دویست و پنجاه و یکم\",\n        252: \"دویست و پنجاه و دوم\",\n        253: \"دویست و پنجاه و سوم\",\n        254: \"دویست و پنجاه و چهارم\",\n        255: \"دویست و پنجاه و پنجم\",\n        256: \"دویست و پنجاه و ششم\",\n        257: \"دویست و پنجاه و هفتم\",\n        258: \"دویست و پنجاه و هشتم\",\n        259: \"دویست و پنجاه و نهم\",\n        260: \"دویست و شصتم\",\n        261: \"دویست و شصت و یکم\",\n        262: \"دویست و شصت و دوم\",\n        263: \"دویست و شصت و سوم\",\n        264: \"دویست و شصت و چهارم\",\n        265: \"دویست و شصت و پنجم\",\n        266: \"دویست و شصت و ششم\",\n        267: \"دویست و شصت و هفتم\",\n        268: \"دویست و شصت و هشتم\",\n        269: \"دویست و شصت و نهم\",\n        270: \"دویست و هفتادم\",\n        271: \"دویست و هفتاد و یکم\",\n        272: \"دویست و هفتاد و دوم\",\n        273: \"دویست و هفتاد و سوم\",\n        274: \"دویست و هفتاد و چهارم\",\n        275: \"دویست و هفتاد و پنجم\",\n        276: \"دویست و هفتاد و ششم\",\n        277: \"دویست و هفتاد و هفتم\",\n        278: \"دویست و هفتاد و هشتم\",\n        279: \"دویست و هفتاد و نهم\",\n        280: \"دویست و هشتادم\",\n        281: \"دویست و هشتاد و یکم\",\n        282: \"دویست و هشتاد و دوم\",\n        283: \"دویست و هشتاد و سوم\",\n        284: \"دویست و هشتاد و چهارم\",\n        285: \"دویست و هشتاد و پنجم\",\n        286: \"دویست و هشتاد و ششم\",\n        287: \"دویست و هشتاد و هفتم\",\n        288: \"دویست و هشتاد و هشتم\",\n        289: \"دویست و هشتاد و نهم\",\n        290: \"دویست و نودم\",\n        291: \"دویست و نود و یکم\",\n        292: \"دویست و نود و دوم\",\n        293: \"دویست و نود و سوم\",\n        294: \"دویست و نود و چهارم\",\n        295: \"دویست و نود و پنجم\",\n        296: \"دویست و نود و ششم\",\n        297: \"دویست و نود و هفتم\",\n        298: \"دویست و نود و هشتم\",\n        299: \"دویست و نود و نهم\",\n        300: \"سیصدم\",\n        301: \"سیصد و یکم\",\n        302: \"سیصد و دوم\",\n        303: \"سیصد و سوم\",\n        304: \"سیصد و چهارم\",\n        305: \"سیصد و پنجم\",\n        306: \"سیصد و ششم\",\n        307: \"سیصد و هفتم\",\n        308: \"سیصد و هشتم\",\n        309: \"سیصد و نهم\",\n        310: \"سیصد و دهم\",\n        311: \"سیصد و یازدهم\",\n        312: \"سیصد و دوازدهم\",\n        313: \"سیصد و سیزدهم\",\n        314: \"سیصد و چهاردهم\",\n        315: \"سیصد و پانزدهم\",\n        316: \"سیصد و شانزدهم\",\n        317: \"سیصد و هفدهم\",\n        318: \"سیصد و هجدهم\",\n        319: \"سیصد و نوزدهم\",\n        320: \"سیصد و بیستم\",\n        321: \"سیصد و بیست و یکم\",\n        322: \"سیصد و بیست و دوم\",\n        323: \"سیصد و بیست و سوم\",\n        324: \"سیصد و بیست و چهارم\",\n        325: \"سیصد و بیست و پنجم\",\n        326: \"سیصد و بیست و ششم\",\n        327: \"سیصد و بیست و هفتم\",\n        328: \"سیصد و بیست و هشتم\",\n        329: \"سیصد و بیست و نهم\",\n        330: \"سیصد و سی‌ام\",\n        331: \"سیصد و سی‌ و یکم\",\n        332: \"سیصد و سی‌‌ و دوم\",\n        333: \"سیصد و سی‌‌ و سوم\",\n        334: \"سیصد و سی‌‌ و چهارم\",\n        335: \"سیصد و سی‌‌ و پنجم\",\n        336: \"سیصد و سی‌‌ و ششم\",\n        337: \"سیصد و سی‌‌ و هفتم\",\n        338: \"سیصد و سی‌‌ و هشتم\",\n        339: \"سیصد و سی‌‌ و نهم\",\n        340: \"سیصد و چهلم\",\n        341: \"سیصد و چهل و یکم\",\n        342: \"سیصد و چهل و دوم\",\n        343: \"سیصد و چهل و سوم\",\n        344: \"سیصد و چهل و چهارم\",\n        345: \"سیصد و چهل و پنجم\",\n        346: \"سیصد و چهل و ششم\",\n        347: \"سیصد و چهل و هفتم\",\n        348: \"سیصد و چهل و هشتم\",\n        349: \"سیصد و چهل و نهم\",\n        350: \"سیصد و پنجاهم\",\n        351: \"سیصد و پنجاه و یکم\",\n        352: \"سیصد و پنجاه و دوم\",\n        353: \"سیصد و پنجاه و سوم\",\n        354: \"سیصد و پنجاه و چهارم\",\n        355: \"سیصد و پنجاه و پنجم\",\n        356: \"سیصد و پنجاه و ششم\",\n        357: \"سیصد و پنجاه و هفتم\",\n        358: \"سیصد و پنجاه و هشتم\",\n        359: \"سیصد و پنجاه و نهم\",\n        360: \"سیصد و شصتم\",\n        361: \"سیصد و شصت و یکم\",\n        362: \"سیصد و شصت و دوم\",\n        363: \"سیصد و شصت و سوم\",\n        364: \"سیصد و شصت و چهارم\",\n        365: \"سیصد و شصت و پنجم\",\n        366: \"سیصد و شصت و ششم\",\n    },\n    fa2: {\n        1: \"اولین\",\n        2: \"دومین\",\n        3: \"سومین\",\n        4: \"چهارمین\",\n        5: \"پنجمین\",\n        6: \"ششمین\",\n        7: \"هفتمین\",\n        8: \"هشتمین\",\n        9: \"نهمین\",\n        10: \"دهمین\",\n        11: \"یازدهمین\",\n        12: \"دوازدهمین\",\n        13: \"سیزدهمین\",\n        14: \"چهاردهمین\",\n        15: \"پانزدهمین\",\n        16: \"شانزدهمین\",\n        17: \"هفدهمین\",\n        18: \"هجدهمین\",\n        19: \"نوزدهمین\",\n        20: \"بیستمین\",\n        21: \"بیست و یکمین\",\n        22: \"بیست و دومین\",\n        23: \"بیست و سومین\",\n        24: \"بیست و چهارمین\",\n        25: \"بیست و پنجمین\",\n        26: \"بیست و ششمین\",\n        27: \"بیست و هفتمین\",\n        28: \"بیست و هشتمین\",\n        29: \"بیست و نهمین\",\n        30: \"سی‌امین\",\n        31: \"سی‌ و یکمین\",\n        32: \"سی‌ و دومین\",\n        33: \"سی‌ و سومین\",\n        34: \"سی‌ و چهارمین\",\n        35: \"سی‌ و پنجمین\",\n        36: \"سی‌ و ششمین\",\n        37: \"سی‌ و هفتمین\",\n        38: \"سی‌ و هشتمین\",\n        39: \"سی‌ و نهمین\",\n        40: \"چهلمین\",\n        41: \"چهل و یکمین\",\n        42: \"چهل و دومین\",\n        43: \"چهل و سومین\",\n        44: \"چهل و چهارمین\",\n        45: \"چهل و پنجمین\",\n        46: \"چهل و ششمین\",\n        47: \"چهل و هفتمین\",\n        48: \"چهل و هشتمین\",\n        49: \"چهل و نهمین\",\n        50: \"پنجاهمین\",\n        51: \"پنجاه و یکمین\",\n        52: \"پنجاه و دومین\",\n        53: \"پنجاه و سومین\",\n        54: \"پنجاه و چهارمین\",\n        55: \"پنجاه و پنجمین\",\n        56: \"پنجاه و ششمین\",\n        57: \"پنجاه و هفتمین\",\n        58: \"پنجاه و هشتمین\",\n        59: \"پنجاه و نهمین\",\n        60: \"شصتمین\",\n        61: \"شصت و یکمین\",\n        62: \"شصت و دومین\",\n        63: \"شصت و سومین\",\n        64: \"شصت و چهارمین\",\n        65: \"شصت و پنجمین\",\n        66: \"شصت و ششمین\",\n        67: \"شصت و هفتمین\",\n        68: \"شصت و هشتمین\",\n        69: \"شصت و نهمین\",\n        70: \"هفتادمین\",\n        71: \"هفتاد و یکمین\",\n        72: \"هفتاد و دومین\",\n        73: \"هفتاد و سومین\",\n        74: \"هفتاد و چهارمین\",\n        75: \"هفتاد و پنجمین\",\n        76: \"هفتاد و ششمین\",\n        77: \"هفتاد و هفتمین\",\n        78: \"هفتاد و هشتمین\",\n        79: \"هفتاد و نهمین\",\n        80: \"هشتادمین\",\n        81: \"هشتاد و یکمین\",\n        82: \"هشتاد و دومین\",\n        83: \"هشتاد و سومین\",\n        84: \"هشتاد و چهارمین\",\n        85: \"هشتاد و پنجمین\",\n        86: \"هشتاد و ششمین\",\n        87: \"هشتاد و هفتمین\",\n        88: \"هشتاد و هشتمین\",\n        89: \"هشتاد و نهمین\",\n        90: \"نودمین\",\n        91: \"نود و یکمین\",\n        92: \"نود و دومین\",\n        93: \"نود و سومین\",\n        94: \"نود و چهارمین\",\n        95: \"نود و پنجمین\",\n        96: \"نود و ششمین\",\n        97: \"نود و هفتمین\",\n        98: \"نود و هشتمین\",\n        99: \"نود و نهمین\",\n        100: \"صدمین\",\n        101: \"صد و یکمین\",\n        102: \"صد و دومین\",\n        103: \"صد و سومین\",\n        104: \"صد و چهارمین\",\n        105: \"صد و پنجمین\",\n        106: \"صد و ششمین\",\n        107: \"صد و هفتمین\",\n        108: \"صد و هشتمین\",\n        109: \"صد و نهمین\",\n        110: \"صد و دهمین\",\n        111: \"صد و یازدهمین\",\n        112: \"صد و دوازدهمین\",\n        113: \"صد و سیزدهمین\",\n        114: \"صد و چهاردهمین\",\n        115: \"صد و پانزدهمین\",\n        116: \"صد و شانزدهمین\",\n        117: \"صد و هفدهمین\",\n        118: \"صد و هجدهمین\",\n        119: \"صد و نوزدهمین\",\n        120: \"صد و بیستمین\",\n        121: \"صد و بیست و یکمین\",\n        122: \"صد و بیست و دومین\",\n        123: \"صد و بیست و سومین\",\n        124: \"صد و بیست و چهارمین\",\n        125: \"صد و بیست و پنجمین\",\n        126: \"صد و بیست و ششمین\",\n        127: \"صد و بیست و هفتمین\",\n        128: \"صد و بیست و هشتمین\",\n        129: \"صد و بیست و نهمین\",\n        130: \"صد و سی‌امین\",\n        131: \"صد و سی‌ و یکمین\",\n        132: \"صد و سی‌ و دومین\",\n        133: \"صد و سی‌ و سومین\",\n        134: \"صد و سی‌ و چهارمین\",\n        135: \"صد و سی‌ و پنجمین\",\n        136: \"صد و سی‌ و ششمین\",\n        137: \"صد و سی‌ و هفتمین\",\n        138: \"صد و سی‌ و هشتمین\",\n        139: \"صد و سی‌ و نهمین\",\n        140: \"صد و چهلمین\",\n        141: \"صد و چهل و یکمین\",\n        142: \"صد و چهل و دومین\",\n        143: \"صد و چهل و سومین\",\n        144: \"صد و چهل و چهارمین\",\n        145: \"صد و چهل و پنجمین\",\n        146: \"صد و چهل و ششمین\",\n        147: \"صد و چهل و هفتمین\",\n        148: \"صد و چهل و هشتمین\",\n        149: \"صد و چهل و نهمین\",\n        150: \"صد و پنجاهمین\",\n        151: \"صد و پنجاه و یکمین\",\n        152: \"صد و پنجاه و دومین\",\n        153: \"صد و پنجاه و سومین\",\n        154: \"صد و پنجاه و چهارمین\",\n        155: \"صد و پنجاه و پنجمین\",\n        156: \"صد و پنجاه و ششمین\",\n        157: \"صد و پنجاه و هفتمین\",\n        158: \"صد و پنجاه و هشتمین\",\n        159: \"صد و پنجاه و نهمین\",\n        160: \"صد و شصتمین\",\n        161: \"صد و شصت و یکمین\",\n        162: \"صد و شصت و دومین\",\n        163: \"صد و شصت و سومین\",\n        164: \"صد و شصت و چهارمین\",\n        165: \"صد و شصت و پنجمین\",\n        166: \"صد و شصت و ششمین\",\n        167: \"صد و شصت و هفتمین\",\n        168: \"صد و شصت و هشتمین\",\n        169: \"صد و شصت و نهمین\",\n        170: \"صد و هفتادمین\",\n        171: \"صد و هفتاد و یکمین\",\n        172: \"صد و هفتاد و دومین\",\n        173: \"صد و هفتاد و سومین\",\n        174: \"صد و هفتاد و چهارمین\",\n        175: \"صد و هفتاد و پنجمین\",\n        176: \"صد و هفتاد و ششمین\",\n        177: \"صد و هفتاد و هفتمین\",\n        178: \"صد و هفتاد و هشتمین\",\n        179: \"صد و هفتاد و نهمین\",\n        180: \"صد و هشتادمین\",\n        181: \"صد و هشتاد و یکمین\",\n        182: \"صد و هشتاد و دومین\",\n        183: \"صد و هشتاد و سومین\",\n        184: \"صد و هشتاد و چهارمین\",\n        185: \"صد و هشتاد و پنجمین\",\n        186: \"صد و هشتاد و ششمین\",\n        187: \"صد و هشتاد و هفتمین\",\n        188: \"صد و هشتاد و هشتمین\",\n        189: \"صد و هشتاد و نهمین\",\n        190: \"صد و نودمین\",\n        191: \"صد و نود و یکمین\",\n        192: \"صد و نود و دومین\",\n        193: \"صد و نود و سومین\",\n        194: \"صد و نود و چهارمین\",\n        195: \"صد و نود و پنجمین\",\n        196: \"صد و نود و ششمین\",\n        197: \"صد و نود و هفتمین\",\n        198: \"صد و نود و هشتمین\",\n        199: \"صد و نود و نهمین\",\n        200: \"دویستمین\",\n        201: \"دویست و یکمین\",\n        202: \"دویست و دومین\",\n        203: \"دویست و سومین\",\n        204: \"دویست و چهارمین\",\n        205: \"دویست و پنجمین\",\n        206: \"دویست و ششمین\",\n        207: \"دویست و هفتمین\",\n        208: \"دویست و هشتمین\",\n        209: \"دویست و نهمین\",\n        210: \"دویست و دهمین\",\n        211: \"دویست و یازدهمین\",\n        212: \"دویست و دوازدهمین\",\n        213: \"دویست و سیزدهمین\",\n        214: \"دویست و چهاردهمین\",\n        215: \"دویست و پانزدهمین\",\n        216: \"دویست و شانزدهمین\",\n        217: \"دویست و هفدهمین\",\n        218: \"دویست و هجدهمین\",\n        219: \"دویست و نوزدهمین\",\n        220: \"دویست و بیستمین\",\n        221: \"دویست و بیست و یکمین\",\n        222: \"دویست و بیست و دومین\",\n        223: \"دویست و بیست و سومین\",\n        224: \"دویست و بیست و چهارمین\",\n        225: \"دویست و بیست و پنجمین\",\n        226: \"دویست و بیست و ششمین\",\n        227: \"دویست و بیست و هفتمین\",\n        228: \"دویست و بیست و هشتمین\",\n        229: \"دویست و بیست و نهمین\",\n        230: \"دویست و سی‌امین\",\n        231: \"دویست و سی‌ و یکمین\",\n        232: \"دویست و سی‌ و دومین\",\n        233: \"دویست و سی‌ و سومین\",\n        234: \"دویست و سی‌ و چهارمین\",\n        235: \"دویست و سی‌ و پنجمین\",\n        236: \"دویست و سی‌ و ششمین\",\n        237: \"دویست و سی‌ و هفتمین\",\n        238: \"دویست و سی‌ و هشتمین\",\n        239: \"دویست و سی‌ و نهمین\",\n        240: \"دویست و چهلمین\",\n        241: \"دویست و چهل و یکمین\",\n        242: \"دویست و چهل و دومین\",\n        243: \"دویست و چهل و سومین\",\n        244: \"دویست و چهل و چهارمین\",\n        245: \"دویست و چهل و پنجمین\",\n        246: \"دویست و چهل و ششمین\",\n        247: \"دویست و چهل و هفتمین\",\n        248: \"دویست و چهل و هشتمین\",\n        249: \"دویست و چهل و نهمین\",\n        250: \"دویست و پنجاهمین\",\n        251: \"دویست و پنجاه و یکمین\",\n        252: \"دویست و پنجاه و دومین\",\n        253: \"دویست و پنجاه و سومین\",\n        254: \"دویست و پنجاه و چهارمین\",\n        255: \"دویست و پنجاه و پنجمین\",\n        256: \"دویست و پنجاه و ششمین\",\n        257: \"دویست و پنجاه و هفتمین\",\n        258: \"دویست و پنجاه و هشتمین\",\n        259: \"دویست و پنجاه و نهمین\",\n        260: \"دویست و شصتمین\",\n        261: \"دویست و شصت و یکمین\",\n        262: \"دویست و شصت و دومین\",\n        263: \"دویست و شصت و سومین\",\n        264: \"دویست و شصت و چهارمین\",\n        265: \"دویست و شصت و پنجمین\",\n        266: \"دویست و شصت و ششمین\",\n        267: \"دویست و شصت و هفتمین\",\n        268: \"دویست و شصت و هشتمین\",\n        269: \"دویست و شصت و نهمین\",\n        270: \"دویست و هفتادمین\",\n        271: \"دویست و هفتاد و یکمین\",\n        272: \"دویست و هفتاد و دومین\",\n        273: \"دویست و هفتاد و سومین\",\n        274: \"دویست و هفتاد و چهارمین\",\n        275: \"دویست و هفتاد و پنجمین\",\n        276: \"دویست و هفتاد و ششمین\",\n        277: \"دویست و هفتاد و هفتمین\",\n        278: \"دویست و هفتاد و هشتمین\",\n        279: \"دویست و هفتاد و نهمین\",\n        280: \"دویست و هشتادمین\",\n        281: \"دویست و هشتاد و یکمین\",\n        282: \"دویست و هشتاد و دومین\",\n        283: \"دویست و هشتاد و سومین\",\n        284: \"دویست و هشتاد و چهارمین\",\n        285: \"دویست و هشتاد و پنجمین\",\n        286: \"دویست و هشتاد و ششمین\",\n        287: \"دویست و هشتاد و هفتمین\",\n        288: \"دویست و هشتاد و هشتمین\",\n        289: \"دویست و هشتاد و نهمین\",\n        290: \"دویست و نودمین\",\n        291: \"دویست و نود و یکمین\",\n        292: \"دویست و نود و دومین\",\n        293: \"دویست و نود و سومین\",\n        294: \"دویست و نود و چهارمین\",\n        295: \"دویست و نود و پنجمین\",\n        296: \"دویست و نود و ششمین\",\n        297: \"دویست و نود و هفتمین\",\n        298: \"دویست و نود و هشتمین\",\n        299: \"دویست و نود و نهمین\",\n        300: \"سیصدمین\",\n        301: \"سیصد و یکمین\",\n        302: \"سیصد و دومین\",\n        303: \"سیصد و سومین\",\n        304: \"سیصد و چهارمین\",\n        305: \"سیصد و پنجمین\",\n        306: \"سیصد و ششمین\",\n        307: \"سیصد و هفتمین\",\n        308: \"سیصد و هشتمین\",\n        309: \"سیصد و نهمین\",\n        310: \"سیصد و دهمین\",\n        311: \"سیصد و یازدهمین\",\n        312: \"سیصد و دوازدهمین\",\n        313: \"سیصد و سیزدهمین\",\n        314: \"سیصد و چهاردهمین\",\n        315: \"سیصد و پانزدهمین\",\n        316: \"سیصد و شانزدهمین\",\n        317: \"سیصد و هفدهمین\",\n        318: \"سیصد و هجدهمین\",\n        319: \"سیصد و نوزدهمین\",\n        320: \"سیصد و بیستمین\",\n        321: \"سیصد و بیست و یکمین\",\n        322: \"سیصد و بیست و دومین\",\n        323: \"سیصد و بیست و سومین\",\n        324: \"سیصد و بیست و چهارمین\",\n        325: \"سیصد و بیست و پنجمین\",\n        326: \"سیصد و بیست و ششمین\",\n        327: \"سیصد و بیست و هفتمین\",\n        328: \"سیصد و بیست و هشتمین\",\n        329: \"سیصد و بیست و نهمین\",\n        330: \"سیصد و سی‌امین\",\n        331: \"سیصد و سی‌ و یکمین\",\n        332: \"سیصد و سی‌ و دومین\",\n        333: \"سیصد و سی‌ و سومین\",\n        334: \"سیصد و سی‌ و چهارمین\",\n        335: \"سیصد و سی‌ و پنجمین\",\n        336: \"سیصد و سی‌ و ششمین\",\n        337: \"سیصد و سی‌ و هفتمین\",\n        338: \"سیصد و سی‌ و هشتمین\",\n        339: \"سیصد و سی‌ و نهمین\",\n        340: \"سیصد و چهلمین\",\n        341: \"سیصد و چهل و یکمین\",\n        342: \"سیصد و چهل و دومین\",\n        343: \"سیصد و چهل و سومین\",\n        344: \"سیصد و چهل و چهارمین\",\n        345: \"سیصد و چهل و پنجمین\",\n        346: \"سیصد و چهل و ششمین\",\n        347: \"سیصد و چهل و هفتمین\",\n        348: \"سیصد و چهل و هشتمین\",\n        349: \"سیصد و چهل و نهمین\",\n        350: \"سیصد و پنجاهمین\",\n        351: \"سیصد و پنجاه و یکمین\",\n        352: \"سیصد و پنجاه و دومین\",\n        353: \"سیصد و پنجاه و سومین\",\n        354: \"سیصد و پنجاه و چهارمین\",\n        355: \"سیصد و پنجاه و پنجمین\",\n        356: \"سیصد و پنجاه و ششمین\",\n        357: \"سیصد و پنجاه و هفتمین\",\n        358: \"سیصد و پنجاه و هشتمین\",\n        359: \"سیصد و پنجاه و نهمین\",\n        360: \"سیصد و شصتمین\",\n        361: \"سیصد و شصت و یکمین\",\n        362: \"سیصد و شصت و دومین\",\n        363: \"سیصد و شصت و سومین\",\n        364: \"سیصد و شصت و چهارمین\",\n        365: \"سیصد و شصت و پنجمین\",\n        366: \"سیصد و شصت و ششمین\",\n    },\n    en: function () {\n        let ordinalNumber = {};\n        for (let i = 1; i <= 366; i++) {\n            if (i == 1 || i % 10 == 1 && i != 11)\n                ordinalNumber[i] = i + 'st';\n            else if (i == 2 || i % 10 == 2 && i != 12)\n                ordinalNumber[i] = i + 'nd';\n            else if (i == 3 || i % 10 == 3 && i != 13)\n                ordinalNumber[i] = i + 'rd';\n            else\n                ordinalNumber[i] = i + 'th';\n        }\n        return ordinalNumber;\n    }(),\n};\n\nconst DAYS = {\n    jalali: { // days in persian calendar start from saturday or 0\n        6: 0,\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 5,\n        5: 6,\n    },\n    gregorian: {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n    },\n    label: {\n        fa: {\n            6: \"شنبه\",\n            0: \"یکشنبه\",\n            1: \"دوشنبه\",\n            2: \"سه‌شنبه\",\n            3: \"چهارشنبه\",\n            4: \"پنجشنبه\",\n            5: \"جمعه\",\n        },\n        en: {\n            0: \"Sunday\",\n            1: \"Monday\",\n            2: \"Tuesday\",\n            3: \"Wednesday\",\n            4: \"Thursday\",\n            5: \"Friday\",\n            6: \"Saturday\",\n        }\n    }\n};\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n    betweenBacktick: /`(.*?)`/g, // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour >= 12 && hour < 24) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\nexport { ORDINALNUMBERS, MONTHS, DAYS, TIMETYPE, REGEX };","//                              ||                ||\n//              ----------------||----------------||----------------\n//             ||               ||                ||               ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||       ***************      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||       ***************      ****************      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       ***************                     *      ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//              ----------------------------------------------------\n\n////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\nimport { MONTHS, ORDINALNUMBERS, DAYS, TIMETYPE, REGEX } from './utils.js'\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n */\nconst PersianDate = function () {\n    'use strict'\n\n    /**\n     * keeps the date and time\n     * @type {Object} \n     * @property {Number} year - the year of date\n     * @property {Number} month - the month of date\n     * @property {Number} date - the day of month of date\n     * @property {Number} hour - the hour of time\n     * @property {Number} minute - the minute of time\n     * @property {Number} second - the second of time\n     * @property {Number} millisecond - the millisecond of time\n     * @property {Number} gregorian - the gregorian date\n     */\n    this.d = {};\n\n    /**\n     * the calendar type\n     * @type {String}\n     * @default \"jalali\"\n     * @example jalali | gregorian\n     */\n    this.c = 'jalali';\n\n    /**\n     * Gregorian to Jalali\n     * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n     * @param {Null|Number|String} [month=1] - Gregorian month\n     * @param {Null|Number|String} [day=1] - Gregorian day\n     * @param {Null|Number|String} [hour=0] - Gregorian hour\n     * @param {Null|Number|String} [minute=0] - Gregorian minute\n     * @param {Null|Number|String} [second=0] - Gregorian second\n     * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n     * @returns {Array} Jalali date\n     */\n    const gtj = (year, month, day, hour, minute, second, millisecond) => {\n        let date;\n        if (!year)\n            date = new Date();\n        else if (Object.prototype.toString.call(year) === '[object Date]') // if the year was an instance of Date\n            date = year;\n        else\n            date = new Date(year, month || 0, day || 1, hour || 0, minute || 0, second || 0, millisecond || 0);\n        day = date.getDate();\n        month = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n        year = date.getFullYear();\n        hour = date.getHours();\n        minute = date.getMinutes();\n        second = date.getSeconds();\n        millisecond = date.getMilliseconds();\n        let jYear, jMonth, jDay;\n        let pastDaysInMonth = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334,\n        ]; //Past days from the start of the year in each month\n        if (year > 1600) {\n            jYear = 979;\n            year -= 1600;\n        } else {\n            jYear = 0;\n            year -= 621;\n        }\n        let newYear =\n            month > 2 ? year + 1 : year;\n        let days =\n            365 * year +\n            parseInt((newYear + 3) / 4) -\n            parseInt((newYear + 99) / 100) +\n            parseInt((newYear + 399) / 400) -\n            80 +\n            day +\n            pastDaysInMonth[month - 1];\n        jYear += 33 * parseInt(days / 12053);\n        days %= 12053;\n        jYear += 4 * parseInt(days / 1461);\n        days %= 1461;\n        if (days > 365) {\n            jYear += parseInt((days - 1) / 365);\n            days = (days - 1) % 365;\n        }\n        jMonth =\n            days < 186\n                ? 1 + parseInt(days / 31)\n                : 7 + parseInt((days - 186) / 30);\n        jDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n        return [\n            jYear,\n            jMonth,\n            jDay,\n            hour,\n            minute,\n            second,\n            millisecond,\n        ];\n    }\n\n    /**\n     * Jalali to Gregorian\n     * @param {Null|Number|String} year - Jalali year\n     * @param {Null|Number|String} [month=1] -  Jalali month\n     * @param {Null|Number|String} [day=1] -  Jalali day\n     * @param {Null|Number|String} [hour=0] -  Jalali hour\n     * @param {Null|Number|String} [minute=0] -  Jalali minute\n     * @param {Null|Number|String} [second=0] -  Jalali second\n     * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n     * @returns {Date} Gregorian date\n     */\n    const jtg = (year, month, day, hour, minute, second, millisecond) => {\n        // if (!year)\n        //     [year, month, day, hour, minute, second, millisecond] = this.toArray();\n        // else {\n        //plus sign before a variable, convert variable to int\n        year = +year;\n        month = +month || 1;\n        day = +day || 1;\n        hour = +hour || 0;\n        minute = +minute || 0;\n        second = +second || 0;\n        millisecond = +millisecond || 0;\n        // }\n        let gYear, gMonth, gDay;\n        if (year > 979) {\n            gYear = 1600;\n            year -= 979;\n        } else {\n            gYear = 621;\n        }\n        let days =\n            365 * year +\n            parseInt(year / 33) * 8 +\n            parseInt(((year % 33) + 3) / 4) +\n            78 +\n            day +\n            (month < 7\n                ? (month - 1) * 31\n                : (month - 7) * 30 + 186);\n        gYear += 400 * parseInt(days / 146097);\n        days %= 146097;\n        if (days > 36524) {\n            gYear += 100 * parseInt(--days / 36524);\n            days %= 36524;\n            if (days >= 365) days++;\n        }\n        gYear += 4 * parseInt(days / 1461);\n        days %= 1461;\n        if (days > 365) {\n            gYear += parseInt((days - 1) / 365);\n            days = (days - 1) % 365;\n        }\n        gDay = days + 1;\n        let daysOfMonths = [\n            0,\n            31,\n            (gYear % 4 == 0 && gYear % 100 != 0) ||\n                gYear % 400 == 0\n                ? 29\n                : 28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31,\n        ];\n        for (gMonth = 0; gMonth < 13; gMonth++) {\n            let v = daysOfMonths[gMonth];\n            if (gDay <= v) break;\n            gDay -= v;\n        }\n\n        return new Date(\n            gYear,\n            gMonth - 1,\n            gDay,\n            hour,\n            minute,\n            second,\n            millisecond\n        );\n    }\n\n    /**\n     * get label of day\n     * @param {Date} date - the date that received day\n     * @param {'fa'|'en'} locale - locale of day label\n     * @returns {String} returns day label\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     * @example Saturday | شنبه\n     */\n    const getDayLabel = (date = new Date(), locale = 'fa') => {\n        if (Object.prototype.toString.call(date) === '[object Date]') // if the year was an instance of Date\n            return DAYS['label'][locale][date.getDay()];\n        return showError('تاریخ نامعتبر', this);\n    }\n\n    /**\n     * get the day of the week\n     * @param {Date} date - the date that received day of week\n     * @param {'fa', 'en'} locale - locale of day\n     * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n     * @returns {Number} the number of the day of week\n     * @throws {PersianDate} if date invalid return class with error property\n     */\n    const getDayOfWeek = (date = new Date(), calendar = 'jalali', mode = 'standard') => {\n        if (Object.prototype.toString.call(date) === '[object Date]') { // if the year was an instance of Date\n            return DAYS[calendar][date.getDay()] + (mode != 'standard' ? 0 : 1);\n        }\n        return showError('تاریخ نامعتبر', this);\n    }\n\n    /**\n     * get the day of the Jalali year\n     * @param {Null|Number|String} month - the month of date that gives the day of the year\n     * @param {Null|Number|String} day - the day of date that gives the day of the year\n     * @returns {Number} the day of the Jalali year\n     */\n    const getDayOfJYear = (month, day) => {\n        // if (!month)\n        //     [month, day] = [this.d.month, this.d.date];\n        //plus sign before a variable, convert variable to int\n        month = +month;\n        day = +day;\n        while (--month != 0) {\n            day += this.clone().calendar('j').getDaysInMonth(0, month);\n        }\n        return day;\n    }\n\n    /**\n     * get the day of the Gregorian year\n     * @param {Null|Date|Number|String} [year=Date.getFullYear()] - the year of date that gives the day of the year\n     * @param {Null|Number|String} [month=Date.getMonth()] - the month of date that gives the day of the year\n     * @param {Null|Number|String} [day=Date.getDate()] - the day of date that gives the day of the year\n     * @returns {Number} the day of the Gregorian year\n     */\n    const getDayOfGYear = (year, month, day) => {\n        // if (!year) {\n        //     let gDate = this.toDate();\n        //     [year, month, day] = [gDate.getFullYear(), gDate.getMonth(), gDate.getDate()];\n        // }\n        if (Object.prototype.toString.call(year) === '[object Date]') // if the year was an instance of Date\n            [year, month, day] = [year.getFullYear(), year.getMonth(), year.getDate()];\n        else\n            month--;\n        let date = new Date(year, month, day);\n        let startOfYear = new Date(year, 0, 0);\n        let diff = (date - startOfYear) + ((startOfYear.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\n        return Math.floor(diff / (1000 * 60 * 60 * 24));\n    }\n\n    /**\n     * get the week of the year\n     * @param {Null|Number|String} year - the year of date that gives the week of the year\n     * @param {Null|Number|String} month - the month of date that gives the week of the year\n     * @param {Null|Number|String} day - the day of date that gives the week of the year\n     * @param {String} calendar - the calendar\n     * @returns {Number} the week of the year\n     */\n    const getWeekOfYear = (year, month, day, calendar) => {\n        let dayOfYearFormat = calendar == 'jalali' ? 'jd' : 'd'\n        let firstOfYear = new PersianDate().calendar(calendar).parse(year);\n        let firstOfYearDay = firstOfYear.date(dayOfYearFormat)\n        let date = firstOfYear.clone().parse(year, month, day)\n        // let dayOfWeek = date.date(dayOfYearFormat)\n        if (firstOfYearDay > 3)\n            firstOfYear.addDay(7 - firstOfYearDay)\n\n        let weekNumber = Math.ceil(date.diff(firstOfYear, 'date', true) / 7);\n\n        let weeksInYear = date.clone().getWeeksInYear()\n        return weekNumber > weeksInYear ? weeksInYear : weekNumber\n    }\n\n    /**\n     * returns the ordinal number of that number sent to it\n     * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n     * @param {'fa','en'} locale - locale of ordinal number\n     * @param {?Number} mode  - 'fa' locale have two mode of ordinal number\n     * @returns {String} ordinal number\n     * @example 1st | اول | اولین\n     */\n    const ordinalNumber = (number, locale = \"fa\", mode = 1) => {\n        if (locale != 'fa') mode = ''\n        return ORDINALNUMBERS[locale + mode][number];\n    }\n\n    /**\n     * add a prefix to the text in the number of characters that the text has less\n     * @param {String|Number} text a text need prefix\n     * @param {Number} length length of text\n     * @param {String} [prefix=0] - string for add before of text\n     * @returns {String} text with or wihtout prefix\n     */\n    const addPrefix = (text, length, prefix = '0') => {\n        return prefix.repeat(length - String(text).length) + text;\n    }\n\n    /**\n     * make error and delete this.d\n     * @param {String} errorText - Error Text\n     * @returns {PersianDate} make error and return class\n     */\n    const showError = (errorText, instance) => {\n        delete instance.d;\n        instance.error = errorText;\n        return errorText;\n    }\n\n    /**\n     * make current date in persian calendar\n     * @returns {PersianDate} make current date and return class\n     */\n    PersianDate.prototype.now = function () {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n        let date = new Date();\n        if (this.c == 'jalali')\n            setJalaliDate(gtj(date), this)\n        else\n            setGregorianDate(date, this)\n        return this;\n    }\n\n    /**\n     * set persian date from Gregorian date\n     * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n     * @returns {PersianDate} return class with persian date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.setDate = function (...date) {\n        deprecate('\"setDate\" function is deprecated!\\nuse \"fromGregorian\" function instead.')\n        return this.fromGregorian(...date);\n    }\n\n    /**\n     * convert a jalali or gregorian date to PersianDate instance\n     * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.parse = function (...date) {\n        if (this.c == 'jalali')\n            return this.fromJalali(...date);\n        else\n            return this.fromGregorian(...date);\n    }\n\n    /**\n     * receives year and determined that is leap year or not\n     * @param {?Number} year - the year to be determined is a leap or not\n     * @returns {Boolean} if is leap year, returns true\n     */\n    PersianDate.prototype.isLeapYear = function (year) {\n        if (this.error)\n            return false;\n        if (!year)\n            year = this.year();\n        if (this.c == 'jalali') {\n            let array = year > 1342 ? [1, 5, 9, 13, 17, 22, 26, 30] : [1, 5, 9, 13, 17, 21, 26, 30];\n            let remainder = year % 33;\n            return array.includes(remainder);\n        } else {\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        }\n    }\n\n    /**\n     * checks the persian date and time\n     * @param {?Number} year - year of date that will be checked\n     * @param {?Number} month - month of date that will be checked\n     * @param {?Number} day - day of date that will be checked\n     * @param {?Number} hour - hour of date that will be checked\n     * @param {?Number} minute - minute of date that will be checked\n     * @param {?Number} second - second of date that will be checked\n     * @param {?Number} millisecond - millisecond of date that will be checked\n     * @returns {Boolean} if is valid, returns true\n     */\n    PersianDate.prototype.isValid =\n        function (year, month, day, hour, minute, second, millisecond) {\n            if (this.error)\n                return false;\n            let result = this.isValidDate(year, month, day);\n            if (result)\n                return this.isValidTime(hour, minute, second, millisecond);\n            return false;\n        }\n\n    /**\n     * checks the persian date\n     * @param {?Number} year - year of date that will be checked\n     * @param {?Number} month - month of date that will be checked\n     * @param {?Number} day - day of date that will be checked\n     * @returns {Boolean} if is valid date, returns true\n     */\n    PersianDate.prototype.isValidDate =\n        function (year, month, day) {\n            if (this.error)\n                return false;\n            if (!year) {\n                year = this.d.year;\n                month = this.d.month;\n                day = this.d.date;\n            }\n            if ([year, month, day].some(e => String(e).search(/null|undifind|NaN/) != -1))\n                return false;\n            if (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n                return false;\n            if (this.c == 'jalali') {\n                if (month >= 7 && month <= 11 && day == 31)\n                    return false;\n                if (month == 12 && day == 31)\n                    return false;\n                if (month == 12 && day == 30 && !this.isLeapYear(year))\n                    return false;\n            } else {\n                if ([2, 4, 6, 9, 11].includes(month) && day == 31)\n                    return false;\n                if (month == 2 && (day == 30 || day == 29 && !this.isLeapYear(year)))\n                    return false;\n            }\n            return true;\n        }\n\n    /**\n     * checks the time\n     * @param {?Number} hour - hour of date that will be checked\n     * @param {?Number} minute - minute of date that will be checked\n     * @param {?Number} second - second of date that will be checked\n     * @param {?Number} millisecond - millisecond of date that will be checked\n     * @returns {Boolean} if is valid time, returns true\n     */\n    PersianDate.prototype.isValidTime =\n        function (hour, minute, second, millisecond) {\n            if (this.error)\n                return false;\n            if (!hour) {\n                hour = this.hour();\n                minute = this.minute();\n                second = this.second();\n                millisecond = this.millisecond();\n            }\n            if ([hour, minute, second, millisecond].some(e => String(e).search(/null|undifind|NaN/) != -1))\n                return false;\n            if (hour < 0 || hour > 23)\n                return false;\n            if (minute < 0 || minute > 59)\n                return false;\n            if (second < 0 || second > 59)\n                return false;\n            if (millisecond < 0 || millisecond > 999)\n                return false;\n            return true;\n        }\n\n    /**\n     * returns number of days in month\n     * @param {?Number} year - year of date that returns number of days in month\n     * @param {?Number} month - month of date that returns number of days in month\n     * @returns {Number} number of days in month\n     */\n    PersianDate.prototype.getDaysInMonth =\n        function (year = this.d.year, month = this.d.month) {\n            if (this.error)\n                return this.error;\n            if (this.c == 'jalali') {\n                if (month >= 1 && month <= 6)\n                    return 31;\n                if (month > 6 && month <= 11 || this.isLeapYear(year)) {\n                    return 30;\n                }\n                return 29;\n            } else {\n                if ([1, 3, 5, 7, 8, 10, 12].includes(month))\n                    return 31;\n                if (month == 2) {\n                    if (this.isLeapYear(year)) return 29;\n                    return 28;\n                }\n                return 30\n            }\n        }\n\n    /**\n     * add to year\n     * @param {?Number|String} [year=1] - a number for add with year\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!year)\n            return this;\n        if (year < 0) // if the number was negative, send to subYear method\n            return this.subYear(Math.abs(year));\n        this.d.year += +year; //plus sign before a variable, convert variable to int\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to month\n     * @param {?Number|String} [month=1] - a number for add with month\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!month)\n            return this;\n        if (month < 0) // if the number was negative, send to subMonth method\n            return this.subMonth(Math.abs(month));\n        month = +month; // plus sign before a variable, convert variable to int\n\n        let monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n        if (monthToStartNewYear > month) {\n            this.d.month += month;\n        } else {\n            this.addYear(1, false);\n            this.d.month = 1;\n            month -= monthToStartNewYear;\n            while (month >= 12) {\n                month -= 12;\n                this.addYear(1, false);\n            }\n            if (month != 0) {\n                this.d.month += month;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to day\n     * @param {?Number|String} [day=1] - a number for add with day\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!day)\n            return this;\n        if (day < 0) // if the number was negative, send to subDay method\n            return this.subDay(Math.abs(day));\n        day = +day; //plus sign before a variable, convert variable to int\n\n        let dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n        if (dayToStartNextMonth > day) {\n            this.d.date += day;\n        } else {\n            this.addMonth(1, false);\n            this.d.date = 1;\n            day -= dayToStartNextMonth;\n            while (day >= this.getDaysInMonth()) {\n                day -= this.getDaysInMonth();\n                this.addMonth(1, false);\n            }\n            if (day != 0) {\n                this.d.date += day;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to quarter\n     * @param {?Number|String} [quarter=1] - a number for add with quarter\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!quarter)\n            return this;\n        if (quarter < 0) // if the number was negative, send to subQuarter method\n            return this.subQuarter(Math.abs(quarter));\n        quarter = +quarter; //plus sign before a variable, convert variable to int\n        return this.addMonth(quarter * 3, checkDate);\n    }\n\n    /**\n     * add to week\n     * @param {?Number|String} [week=1] - a number for add with week\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!week)\n            return this;\n        if (week < 0) // if the number was negative, send to subWeek method\n            return this.subWeek(Math.abs(week));\n        week = +week; //plus sign before a variable, convert variable to int\n        return this.addDay(week * 7, checkDate);\n    }\n\n    /**\n     * add to hour\n     * @param {?Number|String} [hour=1] - a number for add with hour\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!hour)\n            return this;\n        if (hour < 0) // if the number was negative, send to subHour method\n            return this.subHour(Math.abs(hour));\n        hour = +hour; //plus sign before a variable, convert variable to int\n        while (hour >= 24) {\n            hour -= 24;\n            this.addDay(1, false);\n        }\n        let hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n        if (hour >= hourToNextDay) {\n            this.addDay(1, false);\n            hour -= hourToNextDay;\n            this.d.hour = hour;\n        } else\n            this.d.hour += hour;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to minute\n     * @param {?Number|String} [minute=1] - a number for add with minute\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!minute)\n            return this;\n        if (minute < 0) // if the number was negative, send to subMinute method\n            return this.subMinute(Math.abs(minute));\n        minute = +minute; //plus sign before a variable, convert variable to int\n        while (minute >= 60) {\n            this.addHour(1, false);\n            minute -= 60;\n        }\n        let minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n        if (minute >= minuteToNextHour) {\n            this.addHour(1, false);\n            minute -= minuteToNextHour;\n            this.d.minute = minute;\n        } else\n            this.d.minute += minute;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to second\n     * @param {?Number|String} [second=1] - a number for add with second\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!second)\n            return this;\n        if (second < 0) // if the number was negative, send to subSecond method\n            return this.subSecond(Math.abs(second));\n        second = +second; //plus sign before a variable, convert variable to int\n        while (second >= 60) {\n            this.addMinute(1, false);\n            second -= 60;\n        }\n        let secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n        if (second >= secondToNextMinute) {\n            this.addMinute(1, false);\n            second -= secondToNextMinute;\n            this.d.second = second;\n        } else\n            this.d.second += second;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to millisecond\n     * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMillisecond = function (millisecond = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!millisecond)\n            return this;\n        if (millisecond < 0) // if the number was negative, send to subMillisecond method\n            return this.subMillisecond(Math.abs(millisecond));\n        millisecond = +millisecond; //plus sign before a variable, convert variable to int\n        while (millisecond >= 1000) {\n            this.addSecond(1, false);\n            millisecond -= 1000;\n        }\n        let millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n        if (millisecond >= millisecondToNextSecond) {\n            this.addSecond(1, false);\n            millisecond -= millisecondToNextSecond;\n            this.d.millisecond = millisecond;\n        } else\n            this.d.millisecond += millisecond;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from year\n     * @param {?Number|String} [year=1] - a number for subtract from year\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n        if (!year)\n            return this;\n        this.d.year -= (year = Math.abs(year)); //plus sign before a variable, convert variable to int\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from month\n     * @param {?Number|String} [month=1] - a number for subtract from month\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subMonth = function (month = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!month)\n            return this;\n        month = Math.abs(month); //plus sign before a variable, convert variable to int\n        let pastMonth = this.d.month; //pastMonth -> Number of month that is past\n        if (pastMonth > month) {\n            this.d.month -= month;\n        } else {\n            this.subYear(1, false);\n            this.d.month = 12;\n            month -= pastMonth;\n            while (month >= 12) {\n                this.subYear(1, false);\n                month -= 12;\n            }\n            if (month != 0) {\n                this.d.month -= month;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from day\n     * @param {?Number|String} [day=1] - a number for subtract from day\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!day)\n            return this;\n        day = Math.abs(day);\n        let pastDays = this.d.date; // pastDays -> Number of days that is past\n        if (pastDays > day) {\n            this.d.date -= day;\n        } else {\n            this.subMonth(1, false);\n            this.d.date = this.getDaysInMonth();\n            day -= pastDays;\n            while (day >= this.getDaysInMonth()) {\n                day -= this.getDaysInMonth();\n                this.subMonth(1, false);\n            }\n            this.d.date = this.getDaysInMonth() - day;\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from quarter\n     * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subQuarter = function (quarter = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!quarter)\n            return this;\n        quarter = Math.abs(quarter);\n        return this.subMonth(quarter * 3, checkDate);\n    }\n\n    /**\n     * subtract from week\n     * @param {?Number|String} [week=1] - a number for subtract from week\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!week)\n            return this;\n        week = Math.abs(week);\n        return this.subDay(week * 7, checkDate);\n    }\n\n    /**\n     * subtract from hour\n     * @param {?Number|String} [hour=1] - a number for subtract from hour\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!hour)\n            return this;\n        hour = Math.abs(hour);\n        while (hour >= 24) {\n            hour -= 24;\n            this.subDay(1, false);\n        }\n        let pastHours = this.d.hour; // pastHours -> Number of hours that is past\n        if (hour > pastHours) {\n            this.subDay(1, false);\n            hour -= pastHours;\n            this.d.hour = 24 - hour;\n        } else\n            this.d.hour -= hour;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from minute\n     * @param {?Number|String} [minute=1] - a number for subtract from minute\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subMinute = function (minute = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!minute)\n            return this;\n        minute = Math.abs(minute);\n        while (minute >= 60) {\n            minute -= 60;\n            this.subHour(1, false);\n        }\n        let pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n        if (minute > pastMinute) {\n            this.subHour(1, false);\n            minute -= pastMinute;\n            this.d.minute = 60 - minute;\n        } else\n            this.d.minute -= minute;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from second\n     * @param {?Number|String} [second=1] - a number for subtract from second\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subSecond = function (second = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!second)\n            return this;\n        second = Math.abs(second);\n        while (second >= 60) {\n            second -= 60;\n            this.subMinute(1, false);\n        }\n        let pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n        if (second > pastSeconds) {\n            this.subMinute(1, false);\n            second -= pastSeconds;\n            this.d.second = 60 - second;\n        } else\n            this.d.second -= second;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from millisecond\n     * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subMillisecond = function (millisecond = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!millisecond)\n            return this;\n        millisecond = Math.abs(millisecond);\n        while (millisecond >= 1000) {\n            millisecond -= 1000;\n            this.subSecond(1, false);\n        }\n        let pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n        if (millisecond > pastMilliseconds) {\n            this.subSecond(1, false);\n            millisecond -= pastMilliseconds;\n            this.d.millisecond = 1000 - millisecond;\n        } else\n            this.d.millisecond -= millisecond;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * returns date as string with specify format\n     * @param {?String} [format=date] - formatting date to string\n     * @returns {String} date string\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toString = function (format = 'date') {\n        if (this.error)\n            return this.error;\n        let texts = [];\n        format = format.replace(REGEX['betweenBacktick'], (matched, text) => {\n            texts.push(text)\n            return '###';\n        })\n        if (this.c == 'jalali')\n            format = format.replace(/datetime/ig, 'jYYYY/jMM/jDD HH:mm')\n                .replace(/date/ig, 'jYYYY/jMM/jDD')\n                .replace(/time/ig, 'HH:mm');\n        else\n            format = format.replace(/datetime/ig, 'YYYY-MM-DD HH:mm')\n                .replace(/date/ig, 'YYYY-MM-DD')\n                .replace(/time/ig, 'HH:mm');\n        let matchedFormat = format.match(REGEX['format'])\n        let dateString = '';\n        for (const i of matchedFormat) {\n            dateString += format.substring(0, format.indexOf(i))\n            if (i.search(/Y|y/) != -1)\n                dateString += this.year(i);\n            else if (i.search(/Q/) != -1)\n                dateString += this.quarter(i);\n            else if (i.search(/M/) != -1)\n                dateString += this.month(i);\n            else if (i.search(/Q/) != -1)\n                dateString += this.quarter(i);\n            else if (i.search(/D|d/) != -1)\n                dateString += this.date(i);\n            else if (i.search(/W|w/) != -1)\n                dateString += this.week(i);\n            else if (i.search(/H|h|k/) != -1)\n                dateString += this.hour(i);\n            else if (i.search(/m/) != -1)\n                dateString += this.minute(i);\n            else if (i.search(/s/) != -1)\n                dateString += this.second(i);\n            else if (i.search(/c|C/) != -1)\n                dateString += this.millisecond(i);\n            else if (i.search(/t/) != -1)\n                dateString += this.timestamp();\n            else if (i.search(/a|A/) != -1)\n                dateString += TIMETYPE(this.d.hour, i);\n\n            format = format.substr(format.indexOf(i) + i.length);\n        }\n        dateString += format;\n        for (let i = 0; i < texts.length; i++)\n            dateString = dateString.replace('###', texts[i])\n        return String(dateString);\n    }\n\n    /**\n     * get or set year\n     * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n     * @returns {PersianDate|String|Number} if set the year, returns class,\n     * else returns a number or string from year\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.year = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            this.d.year = +format;\n            if (!this.isValidDate()) {\n                return this.addYear(format);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jYYYY' : 'YYYY';\n            let year = this.c == 'jalali' ? this.d.year : gtj(this.toDate())[0];\n            if (format == 'jYYYY' || format == 'jy')\n                return year;\n            if (format == 'jYY')\n                return String(year).slice(-2);\n            let gYear = this.c == 'jalali' ? this.toDate().getFullYear() : this.d.year;\n            if (format == 'YYYY' || format == 'y')\n                return gYear;\n            if (format == 'YY')\n                return String(gYear).slice(-2);\n            return year;\n        }\n\n    }\n\n    /**\n     * get or set month\n     * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n     * @returns {PersianDate|String|Number} if set the month, returns class,\n     * else returns a number or string from month\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.month = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            if (format < 1) {\n                this.d.month = 1;\n                return this.subMonth(--format);\n            } else if (format > 12) {\n                this.d.month = 12;\n                return this.addMonth(format - 12);\n            }\n            this.d.month = +format;\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jM' : 'M';\n            let month = this.c == 'jalali' ? this.d.month : gtj(this.toDate())[1]\n            if (format == 'jMM')\n                return addPrefix(month, 2)\n            if (format == 'jM')\n                return month;\n            if (format == 'jMMMM' || format == 'jMMM')\n                return MONTHS['fa'][month];\n            if (format == 'jMo')\n                return ordinalNumber(month);\n            if (format == 'jMO')\n                return ordinalNumber(month, 'fa', 2);\n            let gMonth = this.c == 'jalali' ? this.toDate().getMonth() + 1 : this.d.month;\n            if (format == 'M')\n                return gMonth;\n            if (format == 'MM')\n                return addPrefix(gMonth, 2);\n            if (format == 'MMMM')\n                return MONTHS['en'][gMonth];\n            if (format == 'Mo' || format == 'MO')\n                return ordinalNumber(gMonth, 'en');\n            if (format == 'MMM')\n                return MONTHS['en'][gMonth].slice(0, 3);\n            return month;\n        }\n\n    }\n\n    /**\n     * get or set day in month\n     * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n     * @returns {PersianDate|String|Number} if set the day, returns class,\n     * else returns a number or string from day\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.date = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            let daysInMonth = this.getDaysInMonth();\n            if (format < 1) {\n                this.d.date = 1;\n                return this.subDay(--format);\n            } else if (format > daysInMonth) {\n                this.d.date = daysInMonth;\n                return this.addDay(format - daysInMonth);\n            }\n            this.d.date = +format;\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jD' : 'D';\n            let date = this.c == 'jalali' ? this.d.date : gtj(this.toDate())[2]\n            //---------- Day of Month ----------//\n            if (format == 'jDD')\n                return addPrefix(date, 2);\n            if (format == 'jD')\n                return date;\n            if (format == 'jDo')\n                return ordinalNumber(date);\n            if (format == 'jDO')\n                return ordinalNumber(date, 'fa', 2);\n            //---------- Day of Week ----------//\n            let gDate = this.toDate();\n            if (format == 'jdddd' || format == 'jddd')\n                return getDayLabel(gDate);\n            if (format == 'jdd')\n                return getDayLabel(gDate).slice(0, 1);\n            let dayOfWeek = getDayOfWeek(gDate);\n            if (format == 'jdo')\n                return ordinalNumber(dayOfWeek);\n            if (format == 'jdO')\n                return ordinalNumber(dayOfWeek, 'fa', 2);\n            if (format == 'jd')\n                return getDayOfWeek(gDate, 'jalali', 'array');\n            if (format == 'jde')\n                return dayOfWeek;\n            //---------- Day of Year ----------//\n            let dayOfYear = getDayOfJYear(this.month('jM'), date);\n            if (format == 'jDDDD')\n                return addPrefix(dayOfYear, 3);\n            if (format == 'jDDD')\n                return dayOfYear;\n            if (format == 'jDDDo')\n                return ordinalNumber(dayOfYear);\n            if (format == 'jDDDO')\n                return ordinalNumber(dayOfYear, 'fa', 2);\n            //---------- Day of Month ----------//\n            if (format == 'DD')\n                return addPrefix(gDate.getDate(), 2);\n            if (format == 'D')\n                return gDate.getDate();\n            if (format == 'Do' || format == 'DO')\n                return ordinalNumber(gDate.getDate(), 'en');\n            //---------- Day of Week ----------//\n            if (format == 'dddd')\n                return getDayLabel(gDate, 'en');\n            if (format == 'ddd')\n                return getDayLabel(gDate, 'en').slice(0, 3);\n            if (format == 'dd')\n                return getDayLabel(gDate, 'en').slice(0, 2);\n            dayOfWeek = getDayOfWeek(gDate, 'gregorian');\n            if (format == 'do' || format == 'dO')\n                return ordinalNumber(dayOfWeek, 'en');\n            if (format == 'd')\n                return getDayOfWeek(gDate, 'gregorian', 'array');\n            if (format == 'de')\n                return dayOfWeek;\n            dayOfYear = getDayOfGYear(gDate);\n            //---------- Day of Year ----------//\n            if (format == 'DDDD')\n                return addPrefix(dayOfYear, 3);\n            if (format == 'DDD')\n                return dayOfYear;\n            if (format == 'DDDo' || format == 'DDDO')\n                return ordinalNumber(dayOfYear, 'en');\n            return date;\n        }\n\n    }\n\n    /**\n     * get or set quarter\n     * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n     * @returns {PersianDate|String|Number} if set the quarter, returns class,\n     * else returns a number or string from quarter\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.quarter = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            if (format < 1) {\n                this.d.month = 1;\n                return this.subQuarter(--format);\n            }\n            else if (format > 4) {\n                this.d.month = 12;\n                return this.addQuarter(format - 4);\n            }\n            this.d.month = +format * 3 - 2;\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jQ' : 'Q';\n            let quarter = Math.ceil((this.c == 'jalali' ? this.d.month : gtj(this.toDate())[1]) / 3);\n            if (format == 'jQ')\n                return quarter;\n            if (format == 'jQo')\n                return ordinalNumber(quarter);\n            if (format == 'jQO')\n                return ordinalNumber(quarter, 'fa', 2);\n            quarter = Math.ceil((this.c == 'jalali' ? this.toDate().getMonth() + 1 : this.d.month) / 3);\n            if (format == 'Q')\n                return quarter;\n            if (format == 'Qo' || format == 'QO')\n                return ordinalNumber(quarter, 'en');\n            return quarter;\n        }\n    }\n\n    /**\n     * get or set week\n     * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n     * @returns {PersianDate|String|Number} if set the week, returns class,\n     * else returns a number or string from week\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.week = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            let weeksInYear = this.getWeeksInYear();\n            if (format < 1) {\n                this.week(1);\n                return this.subWeek(--format);\n            }\n            else if (format > weeksInYear) {\n                this.week(weeksInYear);\n                return this.addWeek(format - weeksInYear);\n            }\n            let weekOfYear = getWeekOfYear(this.d.year, this.d.month, this.d.date, this.c)\n            this.addWeek(+format - weekOfYear)\n            // let gDateFirstOfYear = this.c == 'jalali' ? jtg(this.d.year) : new Date(this.d.year);\n            // // day of first date of year --> 2020-1-1 -> Saturday -> 6\n            // let firstOfYear = getDayOfWeek(gDateFirstOfYear, this.c, 'array');\n            // let dayOfYear = +format * 7 - firstOfYear; // number of day that past from this week\n            // let month = 1;\n            // while (this.getDaysInMonth(this.d.year, month) <= dayOfYear) {\n            //     dayOfYear -= this.getDaysInMonth(this.d.year, month);\n            //     month++;\n            // }\n            // this.d.month = dayOfYear == 0 ? --month : month;\n            // if (dayOfYear <= 6 && month == 1)\n            //     this.d.date = 1;\n            // else {\n            //     let gDate = this.toDate();\n            //     this.d.date = dayOfYear || this.getDaysInMonth(this.d.year, month);\n            //     dayOfYear = 6 - getDayOfWeek(gDate, this.c, 'array') + (dayOfYear == 0 ? 1 : 0);\n            //     this.subDay(dayOfYear, false);\n            // }\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jw' : 'w';\n            let weekOfYear = getWeekOfYear(this.d.year, this.d.month, this.d.date, this.c);\n            if (format == 'jw' || format == 'jW')\n                return weekOfYear;\n            if (format == 'jww' || format == 'jWW')\n                return addPrefix(weekOfYear, 2);\n            if (format == 'jwo' || format == 'jWo')\n                return ordinalNumber(weekOfYear);\n            if (format == 'jwO' || format == 'jWO')\n                return ordinalNumber(weekOfYear, 'fa', 2);\n            weekOfYear = getWeekOfYear(this.year('y'), this.month('M'), this.date('D'), 'gregorian')\n            if (format == 'w' || format == 'W')\n                return weekOfYear;\n            if (format == 'ww' || format == 'WW')\n                return addPrefix(weekOfYear, 2);\n            if (format == 'wo' || format == 'Wo' || format == 'wO' || format == 'WO')\n                return ordinalNumber(weekOfYear, 'en');\n            return weekOfYear;\n        }\n    }\n\n    /**\n     * get or set hour\n     * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n     * @returns {PersianDate|String|Number} if set the hour, returns class,\n     * else returns a number or string from hour\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.hour = function (format = 'H') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            if (format < 0) {\n                this.d.hour = 0;\n                return this.subHour(--format);\n            }\n            else if (format > 23) {\n                this.d.hour = 23;\n                return this.addHour(format - 23);\n            }\n            this.d.hour = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            let hour = this.d.hour;\n            if (format == 'H')\n                return hour;\n            if (format == 'HH')\n                return addPrefix(hour, 2);\n            if (format == 'k')\n                return hour || 24;\n            if (format == 'kk')\n                return addPrefix(hour || 24, 2);\n            hour = hour > 12 ? hour - 12 : hour;\n            if (format == 'h')\n                return hour;\n            if (format == 'hh')\n                return addPrefix(hour, 2);\n            return hour;\n        }\n    }\n\n    /**\n     * get or set minute\n     * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n     * @returns {PersianDate|String|Number} if set the minute, returns class,\n     * else returns a number or string from minute\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.minute = function (format = 'm') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            if (format < 0 || format > 59)\n                return this.addMinute(format);\n            this.d.minute = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 'm')\n                return this.d.minute;\n            if (format == 'mm')\n                return addPrefix(this.d.minute, 2);\n            return this.d.minute;\n        }\n    }\n\n    /**\n     * get or set second\n     * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n     * @returns {PersianDate|String|Number} if set the second, returns class,\n     * else returns a number or string from second\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.second = function (format = 's') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            if (format < 0 || format > 59)\n                return this.addSecond(format);\n            this.d.second = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 's')\n                return this.d.second;\n            if (format == 'ss')\n                return addPrefix(this.d.second, 2);\n            return this.d.second;\n        }\n    }\n\n    /**\n     * get or set millisecond\n     * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n     * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n     * else returns a number or string from millisecond\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.millisecond = function (format = 'c') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (REGEX['isNumeric'].test(format)) {\n            if (format < 0 || format > 999)\n                return this.addMillisecond(format);\n            this.d.millisecond = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 'CCC' || format == 'c')\n                return this.d.millisecond;\n            if (format == 'CCCC')\n                return addPrefix(this.d.millisecond, 3);\n            return this.d.millisecond;\n        }\n    }\n\n    /**\n     * get timestamp or set date from timestamp\n     * @param {Null|Number|String} value - a number for set the millisecond\n     * @returns {PersianDate|Number} if set the timestamp, returns class,\n     * else returns timestamp (number)\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.timestamp = function (value) {\n        if (this.error)\n            return this.error;\n        if (value) {\n            return this.fromGregorian(+String(value).trim());\n        } else {\n            return this.toDate().getTime();\n        }\n    }\n\n    ////////////////////--- Version 1.1.0 ---////////////////////\n\n    /**\n     * get clone of this date\n     * @since 1.1.0\n     * @returns {PersianDate} returns the clone of this date\n     */\n    PersianDate.prototype.clone = function () {\n        return (new PersianDate()).calendar(this.c).parse(this.d);\n    }\n\n    /**\n     * checks this date is the same to another date\n     * @since 1.1.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isSame = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n        year = +year || 0;\n        month = +month || this.d.month;\n        day = +day || this.d.date;\n        hour = +hour || this.d.hour;\n        minute = +minute || this.d.minute;\n        second = +second || this.d.second;\n        millisecond = +millisecond || this.d.millisecond;\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() == this.timestamp();\n        return false;\n    }\n\n    ////////////////////--- Version 1.2.0 ---////////////////////\n\n    /**\n     * convert String or Array or Object or PersianDate to Array\n     * @since 1.2.0\n     * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n     */\n    const typesToArray = function (calendar, year, month, day, hour, minute, second, millisecond) {\n        //FIXME: check PersianDate and Date in diffrent calendar \n        if (!year) // if year not defined\n            year = calendar == 'jalali' ? gtj() : new Date(); // return now\n        if (year instanceof PersianDate) // if type of year is PersianDate\n            return year.calendar(calendar).toArray();\n        else if (year instanceof Date) // if type of year is PersianDate\n            return new PersianDate(year).calendar(calendar).toArray();\n        else if (typeof year == 'string' && year.search(REGEX['separators']) != -1) // if type of year is String\n            return year.split(/[/ -.,:\\\\]/);\n        else if (Object.prototype.toString.call(year) === '[object Array]') // if type of year is Array\n            return year;\n        else if (Object.prototype.toString.call(year) === '[object Object]') // if type of year is Object\n            return [\n                year.y || year.year || year.years,\n                year.M || year.month || year.months || 1,\n                year.d || year.day || year.days || year.date || 1,\n                year.h || year.hour || year.hours || 0,\n                year.m || year.minute || year.minutes || 0,\n                year.s || year.second || year.seconds || 0,\n                year.ms || year.millisecond || year.milliseconds || 0,\n            ];\n        return [year, month, day, hour, minute, second, millisecond];\n    }\n\n    /**\n     * convert the date to the unique number\n     * @since 1.2.0\n     * @param {Array} date - date that's want to number\n     * @returns {Number} uniqe number\n     */\n    const dateToNumber = (date) => {\n        let year = +date[0] || 0;\n        let month = +date[1] || 1;\n        let day = +date[2] || 1;\n        let hour = +date[3] || 0;\n        let minute = +date[4] || 0;\n        let second = +date[5] || 0;\n        let millisecond = +date[6] || 0;\n\n        return (((((year * 12 + month) * 31 + day) * 24 + hour) * 60 + minute) * 60 + second) * 1000 + millisecond;\n    }\n\n    /**\n     * checks this date is before the another date\n     * @since 1.2.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isBefore = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() > this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is after the another date\n     * @since 1.2.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isAfter = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() < this.timestamp();\n        return false;\n    }\n\n    ////////////////////--- Version 1.3.0 ---////////////////////\n\n    /**\n     * return the object of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return Object of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toObject = function () {\n        if (this.error)\n            return this.error;\n        if (!arguments.length) {\n            //FIXME:\n            return this.d;\n        }\n        let formats = typesToArray(this.c, ...arguments);\n        return {\n            year: this.year(formats[0]),\n            month: this.month(formats[1]),\n            date: this.date(formats[2]),\n            hour: this.hour(formats[3]),\n            minute: this.minute(formats[4]),\n            second: this.second(formats[5]),\n            millisecond: this.millisecond(formats[6]),\n        }\n    }\n\n    /**\n     * checks date is a native js Date object\n     * @since 1.3.0\n     * @param {*} date date that must be checked\n     * @returns {Boolean} if date is a native js Date, return true\n     */\n    PersianDate.prototype.isDate = function (date) {\n        return date instanceof Date;\n    }\n\n    /**\n     * checks date is a PersianDate object\n     * @since 1.3.0\n     * @param {*} date date that must be checked\n     * @returns {Boolean} if date is a PersianDate, return true\n     */\n    PersianDate.prototype.isPersianDate = function (date) {\n        return date instanceof PersianDate;\n    }\n\n    /**\n         * checks this date is same or before the another date\n         * @since 1.2.0\n         * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n         * @param {String|Number} year.y - year of date\n         * @param {Null|String|Number} year.year - year of date\n         * @param {Null|String|Number} year.years - year of date\n         * @param {Null|String|Number} year.M - month of date\n         * @param {Null|String|Number} year.month - month of date\n         * @param {Null|String|Number} year.months - month of date\n         * @param {Null|String|Number} year.d - day of date\n         * @param {Null|String|Number} year.day - day of date\n         * @param {Null|String|Number} year.days - day of date\n         * @param {Null|String|Number} year.date - day of date\n         * @param {Null|String|Number} year.h - hour of date\n         * @param {Null|String|Number} year.hour - hour of date\n         * @param {Null|String|Number} year.hours - hour of date\n         * @param {Null|String|Number} year.m - minute of date\n         * @param {Null|String|Number} year.minute - minute of date\n         * @param {Null|String|Number} year.minutes - minute of date\n         * @param {Null|String|Number} year.s - second of date\n         * @param {Null|String|Number} year.second - second of date\n         * @param {Null|String|Number} year.seconds - second of date\n         * @param {Null|String|Number} year.ms - millisecond of date\n         * @param {Null|String|Number} year.millisecond - millisecond of date\n         * @param {Null|String|Number} year.milliseconds - millisecond of date\n         * @param {Null|Number|String} month month of date\n         * @param {Null|Number|String} day day of date\n         * @param {Null|Number|String} hour hour of date\n         * @param {Null|Number|String} minute minute of date\n         * @param {Null|Number|String} second second of date\n         * @param {Null|Number|String} millisecond millisecond of date\n         * @returns {PersianDate|‌Boolean} if date valid, return true of false\n         */\n    PersianDate.prototype.isSameOrBefore = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() >= this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is same or after the another date\n     * @since 1.2.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isSameOrAfter = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() <= this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is between the another dates\n     * @since 1.3.0\n     * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} from.y - year of date\n     * @param {Null|String|Number} from.year - year of date\n     * @param {Null|String|Number} from.years - year of date\n     * @param {Null|String|Number} from.M - month of date\n     * @param {Null|String|Number} from.month - month of date\n     * @param {Null|String|Number} from.months - month of date\n     * @param {Null|String|Number} from.d - day of date\n     * @param {Null|String|Number} from.day - day of date\n     * @param {Null|String|Number} from.days - day of date\n     * @param {Null|String|Number} from.date - day of date\n     * @param {Null|String|Number} from.h - hour of date\n     * @param {Null|String|Number} from.hour - hour of date\n     * @param {Null|String|Number} from.hours - hour of date\n     * @param {Null|String|Number} from.m - minute of date\n     * @param {Null|String|Number} from.minute - minute of date\n     * @param {Null|String|Number} from.minutes - minute of date\n     * @param {Null|String|Number} from.s - second of date\n     * @param {Null|String|Number} from.second - second of date\n     * @param {Null|String|Number} from.seconds - second of date\n     * @param {Null|String|Number} from.ms - millisecond of date\n     * @param {Null|String|Number} from.millisecond - millisecond of date\n     * @param {Null|String|Number} from.milliseconds - millisecond of date\n     * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} to.y - year of date\n     * @param {Null|String|Number} to.year - year of date\n     * @param {Null|String|Number} to.years - year of date\n     * @param {Null|String|Number} to.M - month of date\n     * @param {Null|String|Number} to.month - month of date\n     * @param {Null|String|Number} to.months - month of date\n     * @param {Null|String|Number} to.d - day of date\n     * @param {Null|String|Number} to.day - day of date\n     * @param {Null|String|Number} to.days - day of date\n     * @param {Null|String|Number} to.date - day of date\n     * @param {Null|String|Number} to.h - hour of date\n     * @param {Null|String|Number} to.hour - hour of date\n     * @param {Null|String|Number} to.hours - hour of date\n     * @param {Null|String|Number} to.m - minute of date\n     * @param {Null|String|Number} to.minute - minute of date\n     * @param {Null|String|Number} to.minutes - minute of date\n     * @param {Null|String|Number} to.s - second of date\n     * @param {Null|String|Number} to.second - second of date\n     * @param {Null|String|Number} to.seconds - second of date\n     * @param {Null|String|Number} to.ms - millisecond of date\n     * @param {Null|String|Number} to.millisecond - millisecond of date\n     * @param {Null|String|Number} to.milliseconds - millisecond of date\n     * @param {String} method - determines that consider the dates themselves\n     * @returns {PersianDate|‌Boolean} if date valid, return true or false\n     */\n    PersianDate.prototype.isBetween = function (from, to, method = '()') {\n        if (this.error)\n            return false;\n        from = typesToArray(this.c, from);\n        from = [\n            from[0] || this.d.year,\n            from[1] || this.d.month,\n            from[2] || this.d.date,\n            from[3] || this.d.hour,\n            from[4] || this.d.minute,\n            from[5] || this.d.second,\n            from[6] || this.d.millisecond\n        ]\n        to = typesToArray(this.c, to);\n        to = [\n            to[0] || this.d.year,\n            to[1] || this.d.month,\n            to[2] || this.d.date,\n            to[3] || this.d.hour,\n            to[4] || this.d.minute,\n            to[5] || this.d.second,\n            to[6] || this.d.millisecond\n        ]\n\n        if (!(this.isValid(...from) && this.isValid(...to)))\n            return false;\n\n        return (method[0] === '[' ? this.isSameOrAfter(from) : this.isAfter(from)) &&\n            (method[1] === ']' ? this.isSameOrBefore(to) : this.isBefore(to));\n    }\n\n    ////////////////////--- Version 1.4.0 ---////////////////////\n\n    /**\n    * returns minimum date in arguments that passed\n    * @since 1.4.0\n    * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n    * @param {String} date.y - year of date\n    * @param {Null|String} date.year - year of date\n    * @param {Null|String} date.years - year of date\n    * @param {Null|String} date.M - month of date\n    * @param {Null|String} date.month - month of date\n    * @param {Null|String} date.months - month of date\n    * @param {Null|String} date.d - day of date\n    * @param {Null|String} date.day - day of date\n    * @param {Null|String} date.days - day of date\n    * @param {Null|String} date.date - day of date\n    * @param {Null|String} date.h - hour of date\n    * @param {Null|String} date.hour - hour of date\n    * @param {Null|String} date.hours - hour of date\n    * @param {Null|String} date.m - minute of date\n    * @param {Null|String} date.minute - minute of date\n    * @param {Null|String} date.minutes - minute of date\n    * @param {Null|String} date.s - second of date\n    * @param {Null|String} date.second - second of date\n    * @param {Null|String} date.seconds - second of date\n    * @param {Null|String} date.ms - millisecond of date\n    * @param {Null|String} date.millisecond - millisecond of date\n    * @param {Null|String} date.milliseconds - millisecond of date\n    * @returns {*} return minimum date\n    * @throws {false} if parameters not send or parameters is invalid, return false\n    */\n    PersianDate.prototype.min = function () {\n        if (!arguments.length) {\n            return false;\n        }\n        let args = Object.values(arguments).concat()\n        let argsNumber = args.map((date) => {\n            date = typesToArray(this.c, date);\n            if (this.isValid(...date))\n                return this.clone().parse(...date).timestamp()\n            return false\n        });\n        if (argsNumber.indexOf(false) != -1)\n            return false;\n        return args[argsNumber.indexOf(Math.min(...argsNumber))];\n    }\n\n    /**\n    * returns maximum date in arguments that passed\n    * @since 1.4.0\n    * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n    * @param {String} date.y - year of date\n    * @param {Null|String} date.year - year of date\n    * @param {Null|String} date.years - year of date\n    * @param {Null|String} date.M - month of date\n    * @param {Null|String} date.month - month of date\n    * @param {Null|String} date.months - month of date\n    * @param {Null|String} date.d - day of date\n    * @param {Null|String} date.day - day of date\n    * @param {Null|String} date.days - day of date\n    * @param {Null|String} date.date - day of date\n    * @param {Null|String} date.h - hour of date\n    * @param {Null|String} date.hour - hour of date\n    * @param {Null|String} date.hours - hour of date\n    * @param {Null|String} date.m - minute of date\n    * @param {Null|String} date.minute - minute of date\n    * @param {Null|String} date.minutes - minute of date\n    * @param {Null|String} date.s - second of date\n    * @param {Null|String} date.second - second of date\n    * @param {Null|String} date.seconds - second of date\n    * @param {Null|String} date.ms - millisecond of date\n    * @param {Null|String} date.millisecond - millisecond of date\n    * @param {Null|String} date.milliseconds - millisecond of date\n    * @returns {*} return maximum date\n    * @throws {false} if parameters not send or parameters is invalid, return false\n    */\n    PersianDate.prototype.max = function () {\n        if (!arguments.length) {\n            return false;\n        }\n        let args = Object.values(arguments).flat()\n        let argsNumber = args.map((date) => {\n            date = typesToArray(this.c, date);\n            if (this.isValid(...date))\n                return this.clone().parse(...date).timestamp()\n            return false\n        });\n        if (argsNumber.indexOf(false) != -1)\n            return false;\n        return args[argsNumber.indexOf(Math.max(...argsNumber))];\n    }\n\n    /**\n     * get the diffrence between two date\n     * @since 1.4.0\n     * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} date.y - year of date\n     * @param {Null|String|Number} date.year - year of date\n     * @param {Null|String|Number} date.years - year of date\n     * @param {Null|String|Number} date.M - month of date\n     * @param {Null|String|Number} date.month - month of date\n     * @param {Null|String|Number} date.months - month of date\n     * @param {Null|String|Number} date.d - day of date\n     * @param {Null|String|Number} date.day - day of date\n     * @param {Null|String|Number} date.days - day of date\n     * @param {Null|String|Number} date.date - day of date\n     * @param {Null|String|Number} date.h - hour of date\n     * @param {Null|String|Number} date.hour - hour of date\n     * @param {Null|String|Number} date.hours - hour of date\n     * @param {Null|String|Number} date.m - minute of date\n     * @param {Null|String|Number} date.minute - minute of date\n     * @param {Null|String|Number} date.minutes - minute of date\n     * @param {Null|String|Number} date.s - second of date\n     * @param {Null|String|Number} date.second - second of date\n     * @param {Null|String|Number} date.seconds - second of date\n     * @param {Null|String|Number} date.ms - millisecond of date\n     * @param {Null|String|Number} date.millisecond - millisecond of date\n     * @param {Null|String|Number} date.milliseconds - millisecond of date\n     * @param {String} unit - the unit of the measurment\n     * @returns {Number} diffrence\n     * @throws {Boolean} if dates invalid, returns false\n     */\n    PersianDate.prototype.diff = function (date, unit, addOne = false) {\n        if (this.error)\n            return this.error;\n        date = typesToArray(this.c, date)\n        if (!this.isValid(...date))\n            return 'تاریخ نامعتبر';\n        let result = this.timestamp() - this.clone().parse(...date).timestamp();\n        switch (unit) {\n            case 'y':\n            case 'year':\n            case 'years':\n                result = this.d.year - date[0];\n                break;\n            case 'M':\n            case 'month':\n            case 'months':\n                result = (this.d.year * 12 + this.d.month) - (+date[0] * 12 + +date[1])\n                break;\n            case 'd':\n            case 'date':\n            case 'day':\n            case 'days':\n                result = Math.ceil(result / 1000 / 60 / 60 / 24)\n                break;\n            case 'h':\n            case 'hour':\n            case 'hours':\n                result = Math.ceil(result / 1000 / 60 / 60)\n                break;\n            case 'm':\n            case 'minute':\n            case 'minutes':\n                result = Math.ceil(result / 1000 / 60)\n                break;\n            case 's':\n            case 'second':\n            case 'seconds':\n                result = Math.ceil(result / 1000)\n                break;\n            case 'ms':\n            case 'millisecond':\n            case 'milliseconds':\n            default:\n                result = result\n        }\n        return addOne ? result + (result >= 0 ? 1 : -1) : result\n    }\n\n    ////////////////////--- Version 1.5.0 ---////////////////////\n\n    /**\n     * return the array of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return array of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toArray = function () {\n        if (this.error)\n            return this.error;\n        if (!arguments.length) {\n            return Object.values(this.d);\n        }\n        let formats = typesToArray(this.c, ...arguments);\n        return [\n            this.year(formats[0]),\n            this.month(formats[1]),\n            this.date(formats[2]),\n            this.hour(formats[3]),\n            this.minute(formats[4]),\n            this.second(formats[5]),\n            this.millisecond(formats[6])\n        ]\n    }\n\n    ////////////////////--- Version 2.0.0 ---////////////////////\n\n    /**\n     * return the object of PersianDate\n     * @since 2.0.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @returns {Object} if date valid, return Object of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.diffForHumans = function (date, suffix = true) {\n        if (this.error)\n            return this.error;\n        let result = this.diff(date, 's');\n        if (typeof result == 'string')\n            return 'تاریخ نامعتبر'\n        let prefix = result > 0 ? 'آینده' : 'پیش';\n        result = Math.abs(result);\n\n        if (result == 0)\n            return 'هم اکنون';\n        else if (result < 45)\n            result = 'لحظاتی';\n        else if ((result /= 60) < 45) // divide by 60, for getting minute\n            result = Math.round(result) + ' ' + 'دقیقه';\n        else if ((result /= 60) < 23.5) // divide by 60, for getting hour\n            result = Math.round(result) + ' ' + 'ساعت';\n        else if ((result /= 24) < 26) // divide by 24, for getting day\n            result = Math.round(result) + ' ' + 'روز';\n        else if (result < 320)\n            result = Math.round(result / 30) + ' ' + 'ماه';\n        else\n            result = Math.round(result / 365) + ' ' + 'سال';\n        return result + (suffix ? ' ' + prefix : '');\n    }\n\n    /**\n     * convert a jalali date to PersianDate instance\n     * @since 2.0.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.fromJalali = function (...date) {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n\n        if (!date.length)\n            date = gtj()\n        else if (this.isPersianDate(date[0]))\n            date = date[0].toArray();\n        else\n            date = typesToArray(this.c, ...date)\n        if (this.c == \"jalali\") {\n            //plus sign before a variable, convert variable to int\n            this.d.year = +date[0];\n            this.d.month = +date[1] || 1;\n            this.d.date = +date[2] || 1;\n            this.d.hour = +date[3] || 0;\n            this.d.minute = +date[4] || 0;\n            this.d.second = +date[5] || 0;\n            this.d.millisecond = +date[6] || 0;\n        } else\n            setGregorianDate(jtg(...date), this)\n\n        if (!this.isValid())\n            return showError('تاریخ نامعتبر', this);\n        return this;\n    }\n\n    /**\n     * convert a gregorian date to PersianDate instance\n     * @since 2.0.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.fromGregorian = function (...date) {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n\n        if (!date.length)\n            date[0] = new Date().getTime()\n        // else \n        if (this.isPersianDate(date[0])) {\n            date = date[0].toArray()\n        }\n        else if (!isTimestamp(date[0])) {\n            date = typesToArray(this.c, ...date);\n            date[6] = +date[6] || 0;\n            date[5] = +date[5] || 0;\n            date[4] = +date[4] || 0;\n            date[3] = +date[3] || 0;\n            date[2] = +date[2] || 1;\n            date[1] = +date[1] || 1;\n        }\n        date[0] = +date[0];\n\n        if (date.length > 1) {\n            if (!this.isValid(...date)) return showError('تاریخ نامعتبر', this);\n            --date[1]; // this is month; becuse the Date get month from 0, subtract one \n        }\n\n        date = new Date(...date);\n        if (date == 'Invalid Date')\n            return showError('تاریخ نامعتبر', this);\n        if (this.c == 'jalali')\n            setJalaliDate(gtj(date), this)\n        else\n            setGregorianDate(date, this)\n        return this;\n    }\n\n    /**\n     * convert a gregorian date to PersianDate instance\n     * @since 2.0.0\n     * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n     * @returns {PersianDate} return class with persian date\n     */\n    PersianDate.prototype.calendar = function (calendar) {\n        if (!calendar)\n            return this.c;\n        if (calendar[0] == 'j' && this.c[0] == 'g') {\n            if (!this.error)\n                setJalaliDate(gtj(this.toDate()), this)\n            this.c = 'jalali';\n        }\n        else if (calendar[0] == 'g' && this.c[0] == 'j') {\n            if (!this.error)\n                setGregorianDate(this.toDate(), this)\n            this.c = 'gregorian';\n        }\n        return this;\n    }\n\n    /**\n     * return number of weeks in year\n     * @since 2.0.0\n     * @param {Number|String} year - the year \n     * @returns {PersianDate} number of weeks in year\n     */\n    PersianDate.prototype.getWeeksInYear = function (year) {\n        if (this.error)\n            return this.error;\n        if (!year)\n            year = this.year();\n\n        let dayOfYearFormat = this.c == 'jalali' ? 'jd' : 'd'\n        let firstOfYear = this.clone().parse(year);\n        let firstOfYearDay = firstOfYear.date(dayOfYearFormat)\n        let lastOfYear = firstOfYear.clone().addYear().subDay()\n        let lastOfYearDay = lastOfYear.date(dayOfYearFormat)\n        if (firstOfYearDay > 3)\n            firstOfYear.addDay(7 - firstOfYearDay)\n        else\n            firstOfYear.subDay(firstOfYearDay)\n\n        if (lastOfYearDay > 3)\n            lastOfYear.addDay(7 - lastOfYearDay)\n        else\n            lastOfYear.subDay(lastOfYearDay)\n        return Math.ceil(lastOfYear.diff(firstOfYear, 'date') / 7);\n    }\n\n    /**\n     * return the Date instance of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return Date instance of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toDate = function () {\n        if (this.error)\n            return this.error;\n        if (this.c == 'jalali')\n            return jtg(...this.toArray());\n        let date = this.toArray();\n        --date[1];\n        return new Date(...date);\n    }\n\n    /**\n     * show warning for deprecated functions\n     * @since 2.0.0\n     * @param {String} msg - the message for warning\n     */\n    const deprecate = (msg) => {\n        console.warn(msg);\n    }\n\n    /**\n     * check the input is timestamp\n     * @since 2.0.0\n     * @param {Number|String} timestamp - input that must be checked\n     * @returns {Boolean} if input was timestamp, return true\n     */\n    const isTimestamp = (timestamp) => {\n        return Number(timestamp) != NaN && Math.floor(timestamp / 10000) > 0\n    }\n\n    /**\n     * set the date with Date instance\n     * @since 2.0.0\n     * @param {Date} date - the Date instance\n     * @param {PersianDate} instance - the PersianDate instance\n     */\n    const setGregorianDate = (date, instance) => {\n        instance.d = {\n            year: date.getFullYear(),\n            month: date.getMonth() + 1,\n            date: date.getDate(),\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds(),\n            millisecond: date.getMilliseconds(),\n        };\n    }\n\n    /**\n     * set the date with array of persian date\n     * @since 2.0.0\n     * @param {Array} date - the array of persian date\n     * @param {PersianDate} instance - the PersianDate instance\n     */\n    const setJalaliDate = (date, instance) => {\n        [\n            instance.d.year,\n            instance.d.month,\n            instance.d.date,\n            instance.d.hour,\n            instance.d.minute,\n            instance.d.second,\n            instance.d.millisecond,\n        ] = date;\n    }\n\n\n    //TODO: add locale for v2\n    //TODO: change ordinal numbers in utils.js \n    //TODO: add start and end function\n    //TODO: add nodejs support\n    //TODO: thats function not needed to date without create PersianDate must working for v2\n    //TODO: remove the excess comments\n    //TODO: remove dateToNumber function\n    //TODO: combine getWeekOfJYear and getWeekOfGYear function\n    //TODO: use shortest parameters -> (year, month, day, hour, minute, second, millisecond)\n    //TODO: combine isAfter and isBefore and ...\n    //TODO: add valueOf function\n    //TODO: check performance\n    //TODO: git rm -rf --cached .\n    //TODO: in doc, add jt, jh, jm and ...\n    //TODO: add versioning in doc for new functions\n    //TODO: after writing the documentation complete the deprecated function warning\n\n\n    if (arguments.length)\n        //FIXME: use parse function\n        this.setDate(...arguments);\n    else\n        this.now();\n\n}\n\nexport default PersianDate\n\n////////////////////--- Thank You For Your Attention ---////////////////////\n////////////////////------ I'm Will Be Very Happy ------////////////////////\n////////////////////---- To Get To Know You Better! ----////////////////////\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n"],"sourceRoot":""}