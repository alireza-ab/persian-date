(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["PersianDate"] = factory();
	else
		root["PersianDate"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/PersianDate.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/PersianDate.js":
/*!****************************!*\
  !*** ./src/PersianDate.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n//                              ||                ||\n//              ----------------||----------------||----------------\n//             ||               ||                ||               ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||       ***************      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||       ***************      ****************      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       ***************                     *      ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//              ----------------------------------------------------\n\n////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n */\nconst PersianDate = function () {\n    'use strict'\n\n    /**\n     * keeps the date and time\n     * @type {Object} \n     * @property {Number} year - the year of date\n     * @property {Number} month - the month of date\n     * @property {Number} date - the day of month of date\n     * @property {Number} hour - the hour of time\n     * @property {Number} minute - the minute of time\n     * @property {Number} second - the second of time\n     * @property {Number} millisecond - the millisecond of time\n     * @property {Number} gregorian - the gregorian date\n     */\n    this.d = {};\n\n    /**\n     * the calendar type\n     * @type {String}\n     * @default \"jalali\"\n     * @example jalali | gregorian\n     */\n    this.c = 'jalali';\n\n    /**\n     * Gregorian to Jalali\n     * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n     * @param {Null|Number|String} [month=1] - Gregorian month\n     * @param {Null|Number|String} [day=1] - Gregorian day\n     * @param {Null|Number|String} [hour=0] - Gregorian hour\n     * @param {Null|Number|String} [minute=0] - Gregorian minute\n     * @param {Null|Number|String} [second=0] - Gregorian second\n     * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n     * @returns {Array} Jalali date\n     */\n    const gtj = (year, month, day, hour, minute, second, millisecond) => {\n        let date;\n        if (!year)\n            date = new Date();\n        else if (Object.prototype.toString.call(year) === '[object Date]') // if the year was an instance of Date\n            date = year;\n        else\n            date = new Date(year, month || 0, day || 1, hour || 0, minute || 0, second || 0, millisecond || 0);\n        day = date.getDate();\n        month = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n        year = date.getFullYear();\n        hour = date.getHours();\n        minute = date.getMinutes();\n        second = date.getSeconds();\n        millisecond = date.getMilliseconds();\n        let jYear, jMonth, jDay;\n        let pastDaysInMonth = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334,\n        ]; //Past days from the start of the year in each month\n        if (year > 1600) {\n            jYear = 979;\n            year -= 1600;\n        } else {\n            jYear = 0;\n            year -= 621;\n        }\n        let newYear =\n            month > 2 ? year + 1 : year;\n        let days =\n            365 * year +\n            parseInt((newYear + 3) / 4) -\n            parseInt((newYear + 99) / 100) +\n            parseInt((newYear + 399) / 400) -\n            80 +\n            day +\n            pastDaysInMonth[month - 1];\n        jYear += 33 * parseInt(days / 12053);\n        days %= 12053;\n        jYear += 4 * parseInt(days / 1461);\n        days %= 1461;\n        if (days > 365) {\n            jYear += parseInt((days - 1) / 365);\n            days = (days - 1) % 365;\n        }\n        jMonth =\n            days < 186\n                ? 1 + parseInt(days / 31)\n                : 7 + parseInt((days - 186) / 30);\n        jDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n        return [\n            jYear,\n            jMonth,\n            jDay,\n            hour,\n            minute,\n            second,\n            millisecond,\n        ];\n    }\n\n    /**\n     * Jalali to Gregorian\n     * @param {Null|Number|String} year - Jalali year\n     * @param {Null|Number|String} [month=1] -  Jalali month\n     * @param {Null|Number|String} [day=1] -  Jalali day\n     * @param {Null|Number|String} [hour=0] -  Jalali hour\n     * @param {Null|Number|String} [minute=0] -  Jalali minute\n     * @param {Null|Number|String} [second=0] -  Jalali second\n     * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n     * @returns {Date} Gregorian date\n     */\n    const jtg = (year, month, day, hour, minute, second, millisecond) => {\n        // if (!year)\n        //     [year, month, day, hour, minute, second, millisecond] = this.toArray();\n        // else {\n        //plus sign before a variable, convert variable to int\n        year = +year;\n        month = +month || 1;\n        day = +day || 1;\n        hour = +hour || 0;\n        minute = +minute || 0;\n        second = +second || 0;\n        millisecond = +millisecond || 0;\n        // }\n        let gYear, gMonth, gDay;\n        if (year > 979) {\n            gYear = 1600;\n            year -= 979;\n        } else {\n            gYear = 621;\n        }\n        let days =\n            365 * year +\n            parseInt(year / 33) * 8 +\n            parseInt(((year % 33) + 3) / 4) +\n            78 +\n            day +\n            (month < 7\n                ? (month - 1) * 31\n                : (month - 7) * 30 + 186);\n        gYear += 400 * parseInt(days / 146097);\n        days %= 146097;\n        if (days > 36524) {\n            gYear += 100 * parseInt(--days / 36524);\n            days %= 36524;\n            if (days >= 365) days++;\n        }\n        gYear += 4 * parseInt(days / 1461);\n        days %= 1461;\n        if (days > 365) {\n            gYear += parseInt((days - 1) / 365);\n            days = (days - 1) % 365;\n        }\n        gDay = days + 1;\n        let daysOfMonths = [\n            0,\n            31,\n            (gYear % 4 == 0 && gYear % 100 != 0) ||\n                gYear % 400 == 0\n                ? 29\n                : 28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31,\n        ];\n        for (gMonth = 0; gMonth < 13; gMonth++) {\n            let v = daysOfMonths[gMonth];\n            if (gDay <= v) break;\n            gDay -= v;\n        }\n\n        return new Date(\n            gYear,\n            gMonth - 1,\n            gDay,\n            hour,\n            minute,\n            second,\n            millisecond\n        );\n    }\n\n    /**\n     * get label of day\n     * @param {Date} date - the date that received day\n     * @param {'jalali'|'gregorian'} calendar - the calendar\n     * @returns {String} returns day label\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     * @example Saturday | شنبه\n     */\n    const getDayLabel = (date = new Date(), calendar = 'jalali') => {\n        if (Object.prototype.toString.call(date) === '[object Date]') // if the year was an instance of Date\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"CALENDAR\"][calendar]['days']['label'][date.getDay()];\n        return showError('تاریخ نامعتبر', this);\n    }\n\n    /**\n     * get the day of the week\n     * @param {Date} date - the date that received day of week\n     * @param {'jalali', 'gregorian'} calendar - the calendar\n     * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n     * @returns {Number} the number of the day of week\n     * @throws {PersianDate} if date invalid return class with error property\n     */\n    const getDayOfWeek = (date = new Date(), calendar = 'jalali', mode = 'standard') => {\n        if (Object.prototype.toString.call(date) === '[object Date]') { // if the year was an instance of Date\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"CALENDAR\"][calendar]['days']['weekNumber'][date.getDay()] + (mode != 'standard' ? 0 : 1);\n        }\n        return showError('تاریخ نامعتبر', this);\n    }\n\n    /**\n     * get the day of the Jalali year\n     * @param {Null|Number|String} month - the month of date that gives the day of the year\n     * @param {Null|Number|String} day - the day of date that gives the day of the year\n     * @returns {Number} the day of the Jalali year\n     */\n    const getDayOfJYear = (month, day) => {\n        // if (!month)\n        //     [month, day] = [this.d.month, this.d.date];\n        //plus sign before a variable, convert variable to int\n        month = +month;\n        day = +day;\n        while (--month != 0) {\n            day += this.clone().calendar('j').getDaysInMonth(0, month);\n        }\n        return day;\n    }\n\n    /**\n     * get the day of the Gregorian year\n     * @param {Null|Date|Number|String} [year=Date.getFullYear()] - the year of date that gives the day of the year\n     * @param {Null|Number|String} [month=Date.getMonth()] - the month of date that gives the day of the year\n     * @param {Null|Number|String} [day=Date.getDate()] - the day of date that gives the day of the year\n     * @returns {Number} the day of the Gregorian year\n     */\n    const getDayOfGYear = (year, month, day) => {\n        // if (!year) {\n        //     let gDate = this.toDate();\n        //     [year, month, day] = [gDate.getFullYear(), gDate.getMonth(), gDate.getDate()];\n        // }\n        if (Object.prototype.toString.call(year) === '[object Date]') // if the year was an instance of Date\n            [year, month, day] = [year.getFullYear(), year.getMonth(), year.getDate()];\n        else\n            month--;\n        let date = new Date(year, month, day);\n        let startOfYear = new Date(year, 0, 0);\n        let diff = (date - startOfYear) + ((startOfYear.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\n        return Math.floor(diff / (1000 * 60 * 60 * 24));\n    }\n\n    /**\n     * get the week of the year\n     * @param {Null|Number|String} year - the year of date that gives the week of the year\n     * @param {Null|Number|String} month - the month of date that gives the week of the year\n     * @param {Null|Number|String} day - the day of date that gives the week of the year\n     * @param {String} calendar - the calendar\n     * @returns {Number} the week of the year\n     */\n    const getWeekOfYear = (year, month, day, calendar) => {\n        let dayOfYearFormat = calendar == 'jalali' ? 'jd' : 'd'\n        let firstOfYear = new PersianDate().calendar(calendar).parse(year);\n        let firstOfYearDay = firstOfYear.date(dayOfYearFormat)\n        let date = firstOfYear.clone().parse(year, month, day)\n        // let dayOfWeek = date.date(dayOfYearFormat)\n        if (firstOfYearDay > 3)\n            firstOfYear.addDay(7 - firstOfYearDay)\n\n        let weekNumber = Math.ceil(date.diff(firstOfYear, 'date', true) / 7);\n\n        let weeksInYear = date.clone().getWeeksInYear()\n        return weekNumber > weeksInYear ? weeksInYear : weekNumber\n    }\n\n    /**\n     * returns the ordinal number of that number sent to it\n     * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n     * @param {'jalali','gregorian'} calendar - the calendar\n     * @param {?Number} mode  - 'jalali' calendar have two mode of ordinal number\n     * @returns {String} ordinal number\n     * @example 1st | اول | اولین\n     */\n    const ordinalNumber = (number, calendar = \"jalali\", mode = 1) => {\n        return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"CALENDAR\"][calendar].ordinalNumbers(number, mode);\n    }\n\n    /**\n     * add a prefix to the text in the number of characters that the text has less\n     * @param {String|Number} text a text need prefix\n     * @param {Number} length length of text\n     * @param {String} [prefix=0] - string for add before of text\n     * @returns {String} text with or wihtout prefix\n     */\n    const addPrefix = (text, length, prefix = '0') => {\n        return prefix.repeat(length - String(text).length) + text;\n    }\n\n    /**\n     * make error and delete this.d\n     * @param {String} errorText - Error Text\n     * @returns {PersianDate} make error and return class\n     */\n    const showError = (errorText, instance) => {\n        delete instance.d;\n        instance.error = errorText;\n        return errorText;\n    }\n\n    /**\n     * make current date in persian calendar\n     * @returns {PersianDate} make current date and return class\n     */\n    PersianDate.prototype.now = function () {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n        let date = new Date();\n        if (this.c == 'jalali')\n            setJalaliDate(gtj(date), this)\n        else\n            setGregorianDate(date, this)\n        return this;\n    }\n\n    /**\n     * set persian date from Gregorian date\n     * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n     * @returns {PersianDate} return class with persian date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.setDate = function (...date) {\n        deprecate('\"setDate\" function is deprecated!\\nuse \"fromGregorian\" function instead.')\n        return this.fromGregorian(...date);\n    }\n\n    /**\n     * convert a jalali or gregorian date to PersianDate instance\n     * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.parse = function (...date) {\n        if (this.c == 'jalali')\n            return this.fromJalali(...date);\n        else\n            return this.fromGregorian(...date);\n    }\n\n    /**\n     * receives year and determined that is leap year or not\n     * @param {?Number} year - the year to be determined is a leap or not\n     * @returns {Boolean} if is leap year, returns true\n     */\n    PersianDate.prototype.isLeapYear = function (year) {\n        if (this.error)\n            return false;\n        if (!year)\n            year = this.year();\n        if (this.c == 'jalali') {\n            let array = year > 1342 ? [1, 5, 9, 13, 17, 22, 26, 30] : [1, 5, 9, 13, 17, 21, 26, 30];\n            let remainder = year % 33;\n            return array.includes(remainder);\n        } else {\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        }\n    }\n\n    /**\n     * checks the persian date and time\n     * @param {?Number} year - year of date that will be checked\n     * @param {?Number} month - month of date that will be checked\n     * @param {?Number} day - day of date that will be checked\n     * @param {?Number} hour - hour of date that will be checked\n     * @param {?Number} minute - minute of date that will be checked\n     * @param {?Number} second - second of date that will be checked\n     * @param {?Number} millisecond - millisecond of date that will be checked\n     * @returns {Boolean} if is valid, returns true\n     */\n    PersianDate.prototype.isValid =\n        function (year, month, day, hour, minute, second, millisecond) {\n            if (this.error)\n                return false;\n            let result = this.isValidDate(year, month, day);\n            if (result)\n                return this.isValidTime(hour, minute, second, millisecond);\n            return false;\n        }\n\n    /**\n     * checks the persian date\n     * @param {?Number} year - year of date that will be checked\n     * @param {?Number} month - month of date that will be checked\n     * @param {?Number} day - day of date that will be checked\n     * @returns {Boolean} if is valid date, returns true\n     */\n    PersianDate.prototype.isValidDate =\n        function (year, month, day) {\n            if (this.error)\n                return false;\n            if (!year) {\n                year = this.d.year;\n                month = this.d.month;\n                day = this.d.date;\n            }\n            if ([year, month, day].some(e => String(e).search(/null|undifind|NaN/) != -1))\n                return false;\n            if (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n                return false;\n            if (this.c == 'jalali') {\n                if (month >= 7 && month <= 11 && day == 31)\n                    return false;\n                if (month == 12 && day == 31)\n                    return false;\n                if (month == 12 && day == 30 && !this.isLeapYear(year))\n                    return false;\n            } else {\n                if ([2, 4, 6, 9, 11].includes(month) && day == 31)\n                    return false;\n                if (month == 2 && (day == 30 || day == 29 && !this.isLeapYear(year)))\n                    return false;\n            }\n            return true;\n        }\n\n    /**\n     * checks the time\n     * @param {?Number} hour - hour of date that will be checked\n     * @param {?Number} minute - minute of date that will be checked\n     * @param {?Number} second - second of date that will be checked\n     * @param {?Number} millisecond - millisecond of date that will be checked\n     * @returns {Boolean} if is valid time, returns true\n     */\n    PersianDate.prototype.isValidTime =\n        function (hour, minute, second, millisecond) {\n            if (this.error)\n                return false;\n            if (!hour) {\n                hour = this.hour();\n                minute = this.minute();\n                second = this.second();\n                millisecond = this.millisecond();\n            }\n            if ([hour, minute, second, millisecond].some(e => String(e).search(/null|undifind|NaN/) != -1))\n                return false;\n            if (hour < 0 || hour > 23)\n                return false;\n            if (minute < 0 || minute > 59)\n                return false;\n            if (second < 0 || second > 59)\n                return false;\n            if (millisecond < 0 || millisecond > 999)\n                return false;\n            return true;\n        }\n\n    /**\n     * returns number of days in month\n     * @param {?Number} year - year of date that returns number of days in month\n     * @param {?Number} month - month of date that returns number of days in month\n     * @returns {Number} number of days in month\n     */\n    PersianDate.prototype.getDaysInMonth =\n        function (year = this.d.year, month = this.d.month) {\n            if (this.error)\n                return this.error;\n            if (this.c == 'jalali') {\n                if (month >= 1 && month <= 6)\n                    return 31;\n                if (month > 6 && month <= 11 || this.isLeapYear(year)) {\n                    return 30;\n                }\n                return 29;\n            } else {\n                if ([1, 3, 5, 7, 8, 10, 12].includes(month))\n                    return 31;\n                if (month == 2) {\n                    if (this.isLeapYear(year)) return 29;\n                    return 28;\n                }\n                return 30\n            }\n        }\n\n    /**\n     * add to year\n     * @param {?Number|String} [year=1] - a number for add with year\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!year)\n            return this;\n        if (year < 0) // if the number was negative, send to subYear method\n            return this.subYear(Math.abs(year));\n        this.d.year += +year; //plus sign before a variable, convert variable to int\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to month\n     * @param {?Number|String} [month=1] - a number for add with month\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!month)\n            return this;\n        if (month < 0) // if the number was negative, send to subMonth method\n            return this.subMonth(Math.abs(month));\n        month = +month; // plus sign before a variable, convert variable to int\n\n        let monthToStartNewYear = 12 - this.d.month + 1; // monthToStartNewYear -> Number of month to start of new year\n        if (monthToStartNewYear > month) {\n            this.d.month += month;\n        } else {\n            this.addYear(1, false);\n            this.d.month = 1;\n            month -= monthToStartNewYear;\n            while (month >= 12) {\n                month -= 12;\n                this.addYear(1, false);\n            }\n            if (month != 0) {\n                this.d.month += month;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to day\n     * @param {?Number|String} [day=1] - a number for add with day\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!day)\n            return this;\n        if (day < 0) // if the number was negative, send to subDay method\n            return this.subDay(Math.abs(day));\n        day = +day; //plus sign before a variable, convert variable to int\n\n        let dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n        if (dayToStartNextMonth > day) {\n            this.d.date += day;\n        } else {\n            this.addMonth(1, false);\n            this.d.date = 1;\n            day -= dayToStartNextMonth;\n            while (day >= this.getDaysInMonth()) {\n                day -= this.getDaysInMonth();\n                this.addMonth(1, false);\n            }\n            if (day != 0) {\n                this.d.date += day;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to quarter\n     * @param {?Number|String} [quarter=1] - a number for add with quarter\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!quarter)\n            return this;\n        if (quarter < 0) // if the number was negative, send to subQuarter method\n            return this.subQuarter(Math.abs(quarter));\n        quarter = +quarter; //plus sign before a variable, convert variable to int\n        return this.addMonth(quarter * 3, checkDate);\n    }\n\n    /**\n     * add to week\n     * @param {?Number|String} [week=1] - a number for add with week\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!week)\n            return this;\n        if (week < 0) // if the number was negative, send to subWeek method\n            return this.subWeek(Math.abs(week));\n        week = +week; //plus sign before a variable, convert variable to int\n        return this.addDay(week * 7, checkDate);\n    }\n\n    /**\n     * add to hour\n     * @param {?Number|String} [hour=1] - a number for add with hour\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!hour)\n            return this;\n        if (hour < 0) // if the number was negative, send to subHour method\n            return this.subHour(Math.abs(hour));\n        hour = +hour; //plus sign before a variable, convert variable to int\n        while (hour >= 24) {\n            hour -= 24;\n            this.addDay(1, false);\n        }\n        let hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n        if (hour >= hourToNextDay) {\n            this.addDay(1, false);\n            hour -= hourToNextDay;\n            this.d.hour = hour;\n        } else\n            this.d.hour += hour;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to minute\n     * @param {?Number|String} [minute=1] - a number for add with minute\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!minute)\n            return this;\n        if (minute < 0) // if the number was negative, send to subMinute method\n            return this.subMinute(Math.abs(minute));\n        minute = +minute; //plus sign before a variable, convert variable to int\n        while (minute >= 60) {\n            this.addHour(1, false);\n            minute -= 60;\n        }\n        let minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n        if (minute >= minuteToNextHour) {\n            this.addHour(1, false);\n            minute -= minuteToNextHour;\n            this.d.minute = minute;\n        } else\n            this.d.minute += minute;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to second\n     * @param {?Number|String} [second=1] - a number for add with second\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!second)\n            return this;\n        if (second < 0) // if the number was negative, send to subSecond method\n            return this.subSecond(Math.abs(second));\n        second = +second; //plus sign before a variable, convert variable to int\n        while (second >= 60) {\n            this.addMinute(1, false);\n            second -= 60;\n        }\n        let secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n        if (second >= secondToNextMinute) {\n            this.addMinute(1, false);\n            second -= secondToNextMinute;\n            this.d.second = second;\n        } else\n            this.d.second += second;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to millisecond\n     * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMillisecond = function (millisecond = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!millisecond)\n            return this;\n        if (millisecond < 0) // if the number was negative, send to subMillisecond method\n            return this.subMillisecond(Math.abs(millisecond));\n        millisecond = +millisecond; //plus sign before a variable, convert variable to int\n        while (millisecond >= 1000) {\n            this.addSecond(1, false);\n            millisecond -= 1000;\n        }\n        let millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n        if (millisecond >= millisecondToNextSecond) {\n            this.addSecond(1, false);\n            millisecond -= millisecondToNextSecond;\n            this.d.millisecond = millisecond;\n        } else\n            this.d.millisecond += millisecond;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from year\n     * @param {?Number|String} [year=1] - a number for subtract from year\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subYear = function (year = 1, checkDate = true) {\n        if (!year)\n            return this;\n        this.d.year -= (year = Math.abs(year)); //plus sign before a variable, convert variable to int\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from month\n     * @param {?Number|String} [month=1] - a number for subtract from month\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subMonth = function (month = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!month)\n            return this;\n        month = Math.abs(month); //plus sign before a variable, convert variable to int\n        let pastMonth = this.d.month; //pastMonth -> Number of month that is past\n        if (pastMonth > month) {\n            this.d.month -= month;\n        } else {\n            this.subYear(1, false);\n            this.d.month = 12;\n            month -= pastMonth;\n            while (month >= 12) {\n                this.subYear(1, false);\n                month -= 12;\n            }\n            if (month != 0) {\n                this.d.month -= month;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from day\n     * @param {?Number|String} [day=1] - a number for subtract from day\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subDay = function (day = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!day)\n            return this;\n        day = Math.abs(day);\n        let pastDays = this.d.date; // pastDays -> Number of days that is past\n        if (pastDays > day) {\n            this.d.date -= day;\n        } else {\n            this.subMonth(1, false);\n            this.d.date = this.getDaysInMonth();\n            day -= pastDays;\n            while (day >= this.getDaysInMonth()) {\n                day -= this.getDaysInMonth();\n                this.subMonth(1, false);\n            }\n            this.d.date = this.getDaysInMonth() - day;\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from quarter\n     * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subQuarter = function (quarter = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!quarter)\n            return this;\n        quarter = Math.abs(quarter);\n        return this.subMonth(quarter * 3, checkDate);\n    }\n\n    /**\n     * subtract from week\n     * @param {?Number|String} [week=1] - a number for subtract from week\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subWeek = function (week = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!week)\n            return this;\n        week = Math.abs(week);\n        return this.subDay(week * 7, checkDate);\n    }\n\n    /**\n     * subtract from hour\n     * @param {?Number|String} [hour=1] - a number for subtract from hour\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subHour = function (hour = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!hour)\n            return this;\n        hour = Math.abs(hour);\n        while (hour >= 24) {\n            hour -= 24;\n            this.subDay(1, false);\n        }\n        let pastHours = this.d.hour; // pastHours -> Number of hours that is past\n        if (hour > pastHours) {\n            this.subDay(1, false);\n            hour -= pastHours;\n            this.d.hour = 24 - hour;\n        } else\n            this.d.hour -= hour;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from minute\n     * @param {?Number|String} [minute=1] - a number for subtract from minute\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subMinute = function (minute = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!minute)\n            return this;\n        minute = Math.abs(minute);\n        while (minute >= 60) {\n            minute -= 60;\n            this.subHour(1, false);\n        }\n        let pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n        if (minute > pastMinute) {\n            this.subHour(1, false);\n            minute -= pastMinute;\n            this.d.minute = 60 - minute;\n        } else\n            this.d.minute -= minute;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from second\n     * @param {?Number|String} [second=1] - a number for subtract from second\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subSecond = function (second = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!second)\n            return this;\n        second = Math.abs(second);\n        while (second >= 60) {\n            second -= 60;\n            this.subMinute(1, false);\n        }\n        let pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n        if (second > pastSeconds) {\n            this.subMinute(1, false);\n            second -= pastSeconds;\n            this.d.second = 60 - second;\n        } else\n            this.d.second -= second;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from millisecond\n     * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subMillisecond = function (millisecond = 1, checkDate = true) {\n        if (this.error)\n            return this.error;\n        if (!millisecond)\n            return this;\n        millisecond = Math.abs(millisecond);\n        while (millisecond >= 1000) {\n            millisecond -= 1000;\n            this.subSecond(1, false);\n        }\n        let pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n        if (millisecond > pastMilliseconds) {\n            this.subSecond(1, false);\n            millisecond -= pastMilliseconds;\n            this.d.millisecond = 1000 - millisecond;\n        } else\n            this.d.millisecond -= millisecond;\n\n        while (checkDate && !this.isValidTime())\n            this.subMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * returns date as string with specify format\n     * @param {?String} [format=date] - formatting date to string\n     * @returns {String} date string\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toString = function (format = 'date') {\n        if (this.error)\n            return this.error;\n        let texts = [];\n        format = format.replace(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['betweenBacktick'], (matched, text) => {\n            texts.push(text)\n            return '###';\n        })\n        if (this.c == 'jalali')\n            format = format.replace(/datetime/ig, 'jYYYY/jMM/jDD HH:mm')\n                .replace(/date/ig, 'jYYYY/jMM/jDD')\n                .replace(/time/ig, 'HH:mm');\n        else\n            format = format.replace(/datetime/ig, 'YYYY-MM-DD HH:mm')\n                .replace(/date/ig, 'YYYY-MM-DD')\n                .replace(/time/ig, 'HH:mm');\n        let matchedFormat = format.match(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['format'])\n        let dateString = '';\n        for (const i of matchedFormat) {\n            dateString += format.substring(0, format.indexOf(i))\n            if (i.search(/Y|y/) != -1)\n                dateString += this.year(i);\n            else if (i.search(/Q/) != -1)\n                dateString += this.quarter(i);\n            else if (i.search(/M/) != -1)\n                dateString += this.month(i);\n            else if (i.search(/Q/) != -1)\n                dateString += this.quarter(i);\n            else if (i.search(/D|d/) != -1)\n                dateString += this.date(i);\n            else if (i.search(/W|w/) != -1)\n                dateString += this.week(i);\n            else if (i.search(/H|h|k/) != -1)\n                dateString += this.hour(i);\n            else if (i.search(/m/) != -1)\n                dateString += this.minute(i);\n            else if (i.search(/s/) != -1)\n                dateString += this.second(i);\n            else if (i.search(/c|C/) != -1)\n                dateString += this.millisecond(i);\n            else if (i.search(/t/) != -1)\n                dateString += this.timestamp();\n            else if (i.search(/a|A/) != -1)\n                dateString += Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"TIMETYPE\"])(this.d.hour, i);\n\n            format = format.substr(format.indexOf(i) + i.length);\n        }\n        dateString += format;\n        for (let i = 0; i < texts.length; i++)\n            dateString = dateString.replace('###', texts[i])\n        return String(dateString);\n    }\n\n    /**\n     * get or set year\n     * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n     * @returns {PersianDate|String|Number} if set the year, returns class,\n     * else returns a number or string from year\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.year = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            this.d.year = +format;\n            if (!this.isValidDate()) {\n                return this.addYear(format);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jYYYY' : 'YYYY';\n            let year = this.c == 'jalali' ? this.d.year : gtj(this.toDate())[0];\n            if (format == 'jYYYY' || format == 'jy')\n                return year;\n            if (format == 'jYY')\n                return String(year).slice(-2);\n            let gYear = this.c == 'jalali' ? this.toDate().getFullYear() : this.d.year;\n            if (format == 'YYYY' || format == 'y')\n                return gYear;\n            if (format == 'YY')\n                return String(gYear).slice(-2);\n            return year;\n        }\n\n    }\n\n    /**\n     * get or set month\n     * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n     * @returns {PersianDate|String|Number} if set the month, returns class,\n     * else returns a number or string from month\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.month = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 1) {\n                this.d.month = 1;\n                return this.subMonth(--format);\n            } else if (format > 12) {\n                this.d.month = 12;\n                return this.addMonth(format - 12);\n            }\n            this.d.month = +format;\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jM' : 'M';\n            let month = this.c == 'jalali' ? this.d.month : gtj(this.toDate())[1]\n            if (format == 'jMM')\n                return addPrefix(month, 2)\n            if (format == 'jM')\n                return month;\n            if (format == 'jMMMM' || format == 'jMMM')\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"CALENDAR\"]['jalali']['months'][month];\n            if (format == 'jMo')\n                return ordinalNumber(month);\n            if (format == 'jMO')\n                return ordinalNumber(month, 'jalali', 2);\n            let gMonth = this.c == 'jalali' ? this.toDate().getMonth() + 1 : this.d.month;\n            if (format == 'M')\n                return gMonth;\n            if (format == 'MM')\n                return addPrefix(gMonth, 2);\n            if (format == 'MMMM')\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"CALENDAR\"]['gregorian']['months'][gMonth];\n            if (format == 'Mo' || format == 'MO')\n                return ordinalNumber(gMonth, 'gregorian');\n            if (format == 'MMM')\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"CALENDAR\"]['gregorian']['months'][gMonth].slice(0, 3);\n            return month;\n        }\n\n    }\n\n    /**\n     * get or set day in month\n     * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n     * @returns {PersianDate|String|Number} if set the day, returns class,\n     * else returns a number or string from day\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.date = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            let daysInMonth = this.getDaysInMonth();\n            if (format < 1) {\n                this.d.date = 1;\n                return this.subDay(--format);\n            } else if (format > daysInMonth) {\n                this.d.date = daysInMonth;\n                return this.addDay(format - daysInMonth);\n            }\n            this.d.date = +format;\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jD' : 'D';\n            let date = this.c == 'jalali' ? this.d.date : gtj(this.toDate())[2]\n            //---------- Day of Month ----------//\n            if (format == 'jDD')\n                return addPrefix(date, 2);\n            if (format == 'jD')\n                return date;\n            if (format == 'jDo')\n                return ordinalNumber(date);\n            if (format == 'jDO')\n                return ordinalNumber(date, 'jalali', 2);\n            //---------- Day of Week ----------//\n            let gDate = this.toDate();\n            if (format == 'jdddd' || format == 'jddd')\n                return getDayLabel(gDate);\n            if (format == 'jdd')\n                return getDayLabel(gDate).slice(0, 1);\n            let dayOfWeek = getDayOfWeek(gDate);\n            if (format == 'jdo')\n                return ordinalNumber(dayOfWeek);\n            if (format == 'jdO')\n                return ordinalNumber(dayOfWeek, 'jalali', 2);\n            if (format == 'jd')\n                return getDayOfWeek(gDate, 'jalali', 'array');\n            if (format == 'jde')\n                return dayOfWeek;\n            //---------- Day of Year ----------//\n            let dayOfYear = getDayOfJYear(this.month('jM'), date);\n            if (format == 'jDDDD')\n                return addPrefix(dayOfYear, 3);\n            if (format == 'jDDD')\n                return dayOfYear;\n            if (format == 'jDDDo')\n                return ordinalNumber(dayOfYear);\n            if (format == 'jDDDO')\n                return ordinalNumber(dayOfYear, 'jalali', 2);\n            //---------- Day of Month ----------//\n            if (format == 'DD')\n                return addPrefix(gDate.getDate(), 2);\n            if (format == 'D')\n                return gDate.getDate();\n            if (format == 'Do' || format == 'DO')\n                return ordinalNumber(gDate.getDate(), 'gregorian');\n            //---------- Day of Week ----------//\n            if (format == 'dddd')\n                return getDayLabel(gDate, 'gregorian');\n            if (format == 'ddd')\n                return getDayLabel(gDate, 'gregorian').slice(0, 3);\n            if (format == 'dd')\n                return getDayLabel(gDate, 'gregorian').slice(0, 2);\n            dayOfWeek = getDayOfWeek(gDate, 'gregorian');\n            if (format == 'do' || format == 'dO')\n                return ordinalNumber(dayOfWeek, 'gregorian');\n            if (format == 'd')\n                return getDayOfWeek(gDate, 'gregorian', 'array');\n            if (format == 'de')\n                return dayOfWeek;\n            dayOfYear = getDayOfGYear(gDate);\n            //---------- Day of Year ----------//\n            if (format == 'DDDD')\n                return addPrefix(dayOfYear, 3);\n            if (format == 'DDD')\n                return dayOfYear;\n            if (format == 'DDDo' || format == 'DDDO')\n                return ordinalNumber(dayOfYear, 'gregorian');\n            return date;\n        }\n\n    }\n\n    /**\n     * get or set quarter\n     * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n     * @returns {PersianDate|String|Number} if set the quarter, returns class,\n     * else returns a number or string from quarter\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.quarter = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 1) {\n                this.d.month = 1;\n                return this.subQuarter(--format);\n            }\n            else if (format > 4) {\n                this.d.month = 12;\n                return this.addQuarter(format - 4);\n            }\n            this.d.month = +format * 3 - 2;\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jQ' : 'Q';\n            let quarter = Math.ceil((this.c == 'jalali' ? this.d.month : gtj(this.toDate())[1]) / 3);\n            if (format == 'jQ')\n                return quarter;\n            if (format == 'jQo')\n                return ordinalNumber(quarter);\n            if (format == 'jQO')\n                return ordinalNumber(quarter, 'jalali', 2);\n            quarter = Math.ceil((this.c == 'jalali' ? this.toDate().getMonth() + 1 : this.d.month) / 3);\n            if (format == 'Q')\n                return quarter;\n            if (format == 'Qo' || format == 'QO')\n                return ordinalNumber(quarter, 'gregorian');\n            return quarter;\n        }\n    }\n\n    /**\n     * get or set week\n     * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n     * @returns {PersianDate|String|Number} if set the week, returns class,\n     * else returns a number or string from week\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.week = function (format = '') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            let weeksInYear = this.getWeeksInYear();\n            if (format < 1) {\n                this.week(1);\n                return this.subWeek(--format);\n            }\n            else if (format > weeksInYear) {\n                this.week(weeksInYear);\n                return this.addWeek(format - weeksInYear);\n            }\n            let weekOfYear = getWeekOfYear(this.d.year, this.d.month, this.d.date, this.c)\n            this.addWeek(+format - weekOfYear)\n            // let gDateFirstOfYear = this.c == 'jalali' ? jtg(this.d.year) : new Date(this.d.year);\n            // // day of first date of year --> 2020-1-1 -> Saturday -> 6\n            // let firstOfYear = getDayOfWeek(gDateFirstOfYear, this.c, 'array');\n            // let dayOfYear = +format * 7 - firstOfYear; // number of day that past from this week\n            // let month = 1;\n            // while (this.getDaysInMonth(this.d.year, month) <= dayOfYear) {\n            //     dayOfYear -= this.getDaysInMonth(this.d.year, month);\n            //     month++;\n            // }\n            // this.d.month = dayOfYear == 0 ? --month : month;\n            // if (dayOfYear <= 6 && month == 1)\n            //     this.d.date = 1;\n            // else {\n            //     let gDate = this.toDate();\n            //     this.d.date = dayOfYear || this.getDaysInMonth(this.d.year, month);\n            //     dayOfYear = 6 - getDayOfWeek(gDate, this.c, 'array') + (dayOfYear == 0 ? 1 : 0);\n            //     this.subDay(dayOfYear, false);\n            // }\n            while (!this.isValidDate()) {\n                this.subDay(1, false);\n            }\n            return this;\n        } else {\n            if (!format)\n                format = this.c == 'jalali' ? 'jw' : 'w';\n            let weekOfYear = getWeekOfYear(this.d.year, this.d.month, this.d.date, this.c);\n            if (format == 'jw' || format == 'jW')\n                return weekOfYear;\n            if (format == 'jww' || format == 'jWW')\n                return addPrefix(weekOfYear, 2);\n            if (format == 'jwo' || format == 'jWo')\n                return ordinalNumber(weekOfYear);\n            if (format == 'jwO' || format == 'jWO')\n                return ordinalNumber(weekOfYear, 'jalali', 2);\n            weekOfYear = getWeekOfYear(this.year('y'), this.month('M'), this.date('D'), 'gregorian')\n            if (format == 'w' || format == 'W')\n                return weekOfYear;\n            if (format == 'ww' || format == 'WW')\n                return addPrefix(weekOfYear, 2);\n            if (format == 'wo' || format == 'Wo' || format == 'wO' || format == 'WO')\n                return ordinalNumber(weekOfYear, 'gregorian');\n            return weekOfYear;\n        }\n    }\n\n    /**\n     * get or set hour\n     * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n     * @returns {PersianDate|String|Number} if set the hour, returns class,\n     * else returns a number or string from hour\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.hour = function (format = 'H') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0) {\n                this.d.hour = 0;\n                return this.subHour(--format);\n            }\n            else if (format > 23) {\n                this.d.hour = 23;\n                return this.addHour(format - 23);\n            }\n            this.d.hour = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            let hour = this.d.hour;\n            if (format == 'H')\n                return hour;\n            if (format == 'HH')\n                return addPrefix(hour, 2);\n            if (format == 'k')\n                return hour || 24;\n            if (format == 'kk')\n                return addPrefix(hour || 24, 2);\n            hour = hour > 12 ? hour - 12 : hour;\n            if (format == 'h')\n                return hour;\n            if (format == 'hh')\n                return addPrefix(hour, 2);\n            return hour;\n        }\n    }\n\n    /**\n     * get or set minute\n     * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n     * @returns {PersianDate|String|Number} if set the minute, returns class,\n     * else returns a number or string from minute\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.minute = function (format = 'm') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 59)\n                return this.addMinute(format);\n            this.d.minute = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 'm')\n                return this.d.minute;\n            if (format == 'mm')\n                return addPrefix(this.d.minute, 2);\n            return this.d.minute;\n        }\n    }\n\n    /**\n     * get or set second\n     * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n     * @returns {PersianDate|String|Number} if set the second, returns class,\n     * else returns a number or string from second\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.second = function (format = 's') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 59)\n                return this.addSecond(format);\n            this.d.second = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 's')\n                return this.d.second;\n            if (format == 'ss')\n                return addPrefix(this.d.second, 2);\n            return this.d.second;\n        }\n    }\n\n    /**\n     * get or set millisecond\n     * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n     * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n     * else returns a number or string from millisecond\n     * @throws {PersianDate|String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.millisecond = function (format = 'c') {\n        if (this.error)\n            return this.error;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 999)\n                return this.addMillisecond(format);\n            this.d.millisecond = +format;\n            while (!this.isValidTime())\n                this.subMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 'CCC' || format == 'c')\n                return this.d.millisecond;\n            if (format == 'CCCC')\n                return addPrefix(this.d.millisecond, 3);\n            return this.d.millisecond;\n        }\n    }\n\n    /**\n     * get timestamp or set date from timestamp\n     * @param {Null|Number|String} value - a number for set the millisecond\n     * @returns {PersianDate|Number} if set the timestamp, returns class,\n     * else returns timestamp (number)\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.timestamp = function (value) {\n        if (this.error)\n            return this.error;\n        if (value) {\n            return this.fromGregorian(+String(value).trim());\n        } else {\n            return this.toDate().getTime();\n        }\n    }\n\n    ////////////////////--- Version 1.1.0 ---////////////////////\n\n    /**\n     * get clone of this date\n     * @since 1.1.0\n     * @returns {PersianDate} returns the clone of this date\n     */\n    PersianDate.prototype.clone = function () {\n        return (new PersianDate()).calendar(this.c).parse(this.d);\n    }\n\n    /**\n     * checks this date is the same to another date\n     * @since 1.1.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isSame = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n        year = +year || 0;\n        month = +month || this.d.month;\n        day = +day || this.d.date;\n        hour = +hour || this.d.hour;\n        minute = +minute || this.d.minute;\n        second = +second || this.d.second;\n        millisecond = +millisecond || this.d.millisecond;\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() == this.timestamp();\n        return false;\n    }\n\n    ////////////////////--- Version 1.2.0 ---////////////////////\n\n    /**\n     * convert String or Array or Object or PersianDate to Array\n     * @since 1.2.0\n     * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n     */\n    const typesToArray = function (calendar, year, month, day, hour, minute, second, millisecond) {\n        //FIXME: check PersianDate and Date in diffrent calendar \n        if (!year) // if year not defined\n            year = calendar == 'jalali' ? gtj() : new Date(); // return now\n        if (year instanceof PersianDate) // if type of year is PersianDate\n            return year.calendar(calendar).toArray();\n        else if (year instanceof Date) // if type of year is PersianDate\n            return new PersianDate(year).calendar(calendar).toArray();\n        else if (typeof year == 'string' && year.search(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['separators']) != -1) // if type of year is String\n            return year.split(/[/ -.,:\\\\]/);\n        else if (Object.prototype.toString.call(year) === '[object Array]') // if type of year is Array\n            return year;\n        else if (Object.prototype.toString.call(year) === '[object Object]') // if type of year is Object\n            return [\n                year.y || year.year || year.years,\n                year.M || year.month || year.months || 1,\n                year.d || year.day || year.days || year.date || 1,\n                year.h || year.hour || year.hours || 0,\n                year.m || year.minute || year.minutes || 0,\n                year.s || year.second || year.seconds || 0,\n                year.ms || year.millisecond || year.milliseconds || 0,\n            ];\n        return [year, month, day, hour, minute, second, millisecond];\n    }\n\n    /**\n     * convert the date to the unique number\n     * @since 1.2.0\n     * @param {Array} date - date that's want to number\n     * @returns {Number} uniqe number\n     */\n    const dateToNumber = (date) => {\n        let year = +date[0] || 0;\n        let month = +date[1] || 1;\n        let day = +date[2] || 1;\n        let hour = +date[3] || 0;\n        let minute = +date[4] || 0;\n        let second = +date[5] || 0;\n        let millisecond = +date[6] || 0;\n\n        return (((((year * 12 + month) * 31 + day) * 24 + hour) * 60 + minute) * 60 + second) * 1000 + millisecond;\n    }\n\n    /**\n     * checks this date is before the another date\n     * @since 1.2.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isBefore = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() > this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is after the another date\n     * @since 1.2.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isAfter = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() < this.timestamp();\n        return false;\n    }\n\n    ////////////////////--- Version 1.3.0 ---////////////////////\n\n    /**\n     * return the object of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return Object of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toObject = function () {\n        if (this.error)\n            return this.error;\n        if (!arguments.length) {\n            //FIXME:\n            return this.d;\n        }\n        let formats = typesToArray(this.c, ...arguments);\n        return {\n            year: this.year(formats[0]),\n            month: this.month(formats[1]),\n            date: this.date(formats[2]),\n            hour: this.hour(formats[3]),\n            minute: this.minute(formats[4]),\n            second: this.second(formats[5]),\n            millisecond: this.millisecond(formats[6]),\n        }\n    }\n\n    /**\n     * checks date is a native js Date object\n     * @since 1.3.0\n     * @param {*} date date that must be checked\n     * @returns {Boolean} if date is a native js Date, return true\n     */\n    PersianDate.prototype.isDate = function (date) {\n        return date instanceof Date;\n    }\n\n    /**\n     * checks date is a PersianDate object\n     * @since 1.3.0\n     * @param {*} date date that must be checked\n     * @returns {Boolean} if date is a PersianDate, return true\n     */\n    PersianDate.prototype.isPersianDate = function (date) {\n        return date instanceof PersianDate;\n    }\n\n    /**\n         * checks this date is same or before the another date\n         * @since 1.2.0\n         * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n         * @param {String|Number} year.y - year of date\n         * @param {Null|String|Number} year.year - year of date\n         * @param {Null|String|Number} year.years - year of date\n         * @param {Null|String|Number} year.M - month of date\n         * @param {Null|String|Number} year.month - month of date\n         * @param {Null|String|Number} year.months - month of date\n         * @param {Null|String|Number} year.d - day of date\n         * @param {Null|String|Number} year.day - day of date\n         * @param {Null|String|Number} year.days - day of date\n         * @param {Null|String|Number} year.date - day of date\n         * @param {Null|String|Number} year.h - hour of date\n         * @param {Null|String|Number} year.hour - hour of date\n         * @param {Null|String|Number} year.hours - hour of date\n         * @param {Null|String|Number} year.m - minute of date\n         * @param {Null|String|Number} year.minute - minute of date\n         * @param {Null|String|Number} year.minutes - minute of date\n         * @param {Null|String|Number} year.s - second of date\n         * @param {Null|String|Number} year.second - second of date\n         * @param {Null|String|Number} year.seconds - second of date\n         * @param {Null|String|Number} year.ms - millisecond of date\n         * @param {Null|String|Number} year.millisecond - millisecond of date\n         * @param {Null|String|Number} year.milliseconds - millisecond of date\n         * @param {Null|Number|String} month month of date\n         * @param {Null|Number|String} day day of date\n         * @param {Null|Number|String} hour hour of date\n         * @param {Null|Number|String} minute minute of date\n         * @param {Null|Number|String} second second of date\n         * @param {Null|Number|String} millisecond millisecond of date\n         * @returns {PersianDate|‌Boolean} if date valid, return true of false\n         */\n    PersianDate.prototype.isSameOrBefore = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() >= this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is same or after the another date\n     * @since 1.2.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isSameOrAfter = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(this.c, year, month, day, hour, minute, second, millisecond)\n\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return this.clone().parse(year, month, day, hour, minute, second, millisecond).timestamp() <= this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is between the another dates\n     * @since 1.3.0\n     * @param {PersianDate|Date|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} from.y - year of date\n     * @param {Null|String|Number} from.year - year of date\n     * @param {Null|String|Number} from.years - year of date\n     * @param {Null|String|Number} from.M - month of date\n     * @param {Null|String|Number} from.month - month of date\n     * @param {Null|String|Number} from.months - month of date\n     * @param {Null|String|Number} from.d - day of date\n     * @param {Null|String|Number} from.day - day of date\n     * @param {Null|String|Number} from.days - day of date\n     * @param {Null|String|Number} from.date - day of date\n     * @param {Null|String|Number} from.h - hour of date\n     * @param {Null|String|Number} from.hour - hour of date\n     * @param {Null|String|Number} from.hours - hour of date\n     * @param {Null|String|Number} from.m - minute of date\n     * @param {Null|String|Number} from.minute - minute of date\n     * @param {Null|String|Number} from.minutes - minute of date\n     * @param {Null|String|Number} from.s - second of date\n     * @param {Null|String|Number} from.second - second of date\n     * @param {Null|String|Number} from.seconds - second of date\n     * @param {Null|String|Number} from.ms - millisecond of date\n     * @param {Null|String|Number} from.millisecond - millisecond of date\n     * @param {Null|String|Number} from.milliseconds - millisecond of date\n     * @param {PersianDate|Date|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} to.y - year of date\n     * @param {Null|String|Number} to.year - year of date\n     * @param {Null|String|Number} to.years - year of date\n     * @param {Null|String|Number} to.M - month of date\n     * @param {Null|String|Number} to.month - month of date\n     * @param {Null|String|Number} to.months - month of date\n     * @param {Null|String|Number} to.d - day of date\n     * @param {Null|String|Number} to.day - day of date\n     * @param {Null|String|Number} to.days - day of date\n     * @param {Null|String|Number} to.date - day of date\n     * @param {Null|String|Number} to.h - hour of date\n     * @param {Null|String|Number} to.hour - hour of date\n     * @param {Null|String|Number} to.hours - hour of date\n     * @param {Null|String|Number} to.m - minute of date\n     * @param {Null|String|Number} to.minute - minute of date\n     * @param {Null|String|Number} to.minutes - minute of date\n     * @param {Null|String|Number} to.s - second of date\n     * @param {Null|String|Number} to.second - second of date\n     * @param {Null|String|Number} to.seconds - second of date\n     * @param {Null|String|Number} to.ms - millisecond of date\n     * @param {Null|String|Number} to.millisecond - millisecond of date\n     * @param {Null|String|Number} to.milliseconds - millisecond of date\n     * @param {String} method - determines that consider the dates themselves\n     * @returns {PersianDate|‌Boolean} if date valid, return true or false\n     */\n    PersianDate.prototype.isBetween = function (from, to, method = '()') {\n        if (this.error)\n            return false;\n        from = typesToArray(this.c, from);\n        from = [\n            from[0] || this.d.year,\n            from[1] || this.d.month,\n            from[2] || this.d.date,\n            from[3] || this.d.hour,\n            from[4] || this.d.minute,\n            from[5] || this.d.second,\n            from[6] || this.d.millisecond\n        ]\n        to = typesToArray(this.c, to);\n        to = [\n            to[0] || this.d.year,\n            to[1] || this.d.month,\n            to[2] || this.d.date,\n            to[3] || this.d.hour,\n            to[4] || this.d.minute,\n            to[5] || this.d.second,\n            to[6] || this.d.millisecond\n        ]\n\n        if (!(this.isValid(...from) && this.isValid(...to)))\n            return false;\n\n        return (method[0] === '[' ? this.isSameOrAfter(from) : this.isAfter(from)) &&\n            (method[1] === ']' ? this.isSameOrBefore(to) : this.isBefore(to));\n    }\n\n    ////////////////////--- Version 1.4.0 ---////////////////////\n\n    /**\n    * returns minimum date in arguments that passed\n    * @since 1.4.0\n    * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n    * @param {String} date.y - year of date\n    * @param {Null|String} date.year - year of date\n    * @param {Null|String} date.years - year of date\n    * @param {Null|String} date.M - month of date\n    * @param {Null|String} date.month - month of date\n    * @param {Null|String} date.months - month of date\n    * @param {Null|String} date.d - day of date\n    * @param {Null|String} date.day - day of date\n    * @param {Null|String} date.days - day of date\n    * @param {Null|String} date.date - day of date\n    * @param {Null|String} date.h - hour of date\n    * @param {Null|String} date.hour - hour of date\n    * @param {Null|String} date.hours - hour of date\n    * @param {Null|String} date.m - minute of date\n    * @param {Null|String} date.minute - minute of date\n    * @param {Null|String} date.minutes - minute of date\n    * @param {Null|String} date.s - second of date\n    * @param {Null|String} date.second - second of date\n    * @param {Null|String} date.seconds - second of date\n    * @param {Null|String} date.ms - millisecond of date\n    * @param {Null|String} date.millisecond - millisecond of date\n    * @param {Null|String} date.milliseconds - millisecond of date\n    * @returns {*} return minimum date\n    * @throws {false} if parameters not send or parameters is invalid, return false\n    */\n    PersianDate.prototype.min = function () {\n        if (!arguments.length) {\n            return false;\n        }\n        let args = Object.values(arguments).concat()\n        let argsNumber = args.map((date) => {\n            date = typesToArray(this.c, date);\n            if (this.isValid(...date))\n                return this.clone().parse(...date).timestamp()\n            return false\n        });\n        if (argsNumber.indexOf(false) != -1)\n            return false;\n        return args[argsNumber.indexOf(Math.min(...argsNumber))];\n    }\n\n    /**\n    * returns maximum date in arguments that passed\n    * @since 1.4.0\n    * @param {...String|PersianDate|Date|Array|Object} date - this parameters must be string or array or Object from date;\n    * @param {String} date.y - year of date\n    * @param {Null|String} date.year - year of date\n    * @param {Null|String} date.years - year of date\n    * @param {Null|String} date.M - month of date\n    * @param {Null|String} date.month - month of date\n    * @param {Null|String} date.months - month of date\n    * @param {Null|String} date.d - day of date\n    * @param {Null|String} date.day - day of date\n    * @param {Null|String} date.days - day of date\n    * @param {Null|String} date.date - day of date\n    * @param {Null|String} date.h - hour of date\n    * @param {Null|String} date.hour - hour of date\n    * @param {Null|String} date.hours - hour of date\n    * @param {Null|String} date.m - minute of date\n    * @param {Null|String} date.minute - minute of date\n    * @param {Null|String} date.minutes - minute of date\n    * @param {Null|String} date.s - second of date\n    * @param {Null|String} date.second - second of date\n    * @param {Null|String} date.seconds - second of date\n    * @param {Null|String} date.ms - millisecond of date\n    * @param {Null|String} date.millisecond - millisecond of date\n    * @param {Null|String} date.milliseconds - millisecond of date\n    * @returns {*} return maximum date\n    * @throws {false} if parameters not send or parameters is invalid, return false\n    */\n    PersianDate.prototype.max = function () {\n        if (!arguments.length) {\n            return false;\n        }\n        let args = Object.values(arguments).flat()\n        let argsNumber = args.map((date) => {\n            date = typesToArray(this.c, date);\n            if (this.isValid(...date))\n                return this.clone().parse(...date).timestamp()\n            return false\n        });\n        if (argsNumber.indexOf(false) != -1)\n            return false;\n        return args[argsNumber.indexOf(Math.max(...argsNumber))];\n    }\n\n    /**\n     * get the diffrence between two date\n     * @since 1.4.0\n     * @param {PersianDate|Date|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} date.y - year of date\n     * @param {Null|String|Number} date.year - year of date\n     * @param {Null|String|Number} date.years - year of date\n     * @param {Null|String|Number} date.M - month of date\n     * @param {Null|String|Number} date.month - month of date\n     * @param {Null|String|Number} date.months - month of date\n     * @param {Null|String|Number} date.d - day of date\n     * @param {Null|String|Number} date.day - day of date\n     * @param {Null|String|Number} date.days - day of date\n     * @param {Null|String|Number} date.date - day of date\n     * @param {Null|String|Number} date.h - hour of date\n     * @param {Null|String|Number} date.hour - hour of date\n     * @param {Null|String|Number} date.hours - hour of date\n     * @param {Null|String|Number} date.m - minute of date\n     * @param {Null|String|Number} date.minute - minute of date\n     * @param {Null|String|Number} date.minutes - minute of date\n     * @param {Null|String|Number} date.s - second of date\n     * @param {Null|String|Number} date.second - second of date\n     * @param {Null|String|Number} date.seconds - second of date\n     * @param {Null|String|Number} date.ms - millisecond of date\n     * @param {Null|String|Number} date.millisecond - millisecond of date\n     * @param {Null|String|Number} date.milliseconds - millisecond of date\n     * @param {String} unit - the unit of the measurment\n     * @returns {Number} diffrence\n     * @throws {Boolean} if dates invalid, returns false\n     */\n    PersianDate.prototype.diff = function (date, unit, addOne = false) {\n        if (this.error)\n            return this.error;\n        date = typesToArray(this.c, date)\n        if (!this.isValid(...date))\n            return 'تاریخ نامعتبر';\n        let result = this.timestamp() - this.clone().parse(...date).timestamp();\n        switch (unit) {\n            case 'y':\n            case 'year':\n            case 'years':\n                result = this.d.year - date[0];\n                break;\n            case 'M':\n            case 'month':\n            case 'months':\n                result = (this.d.year * 12 + this.d.month) - (+date[0] * 12 + +date[1])\n                break;\n            case 'd':\n            case 'date':\n            case 'day':\n            case 'days':\n                result = Math.ceil(result / 1000 / 60 / 60 / 24)\n                break;\n            case 'h':\n            case 'hour':\n            case 'hours':\n                result = Math.ceil(result / 1000 / 60 / 60)\n                break;\n            case 'm':\n            case 'minute':\n            case 'minutes':\n                result = Math.ceil(result / 1000 / 60)\n                break;\n            case 's':\n            case 'second':\n            case 'seconds':\n                result = Math.ceil(result / 1000)\n                break;\n            case 'ms':\n            case 'millisecond':\n            case 'milliseconds':\n            default:\n                result = result\n        }\n        return addOne ? result + (result >= 0 ? 1 : -1) : result\n    }\n\n    ////////////////////--- Version 1.5.0 ---////////////////////\n\n    /**\n     * return the array of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return array of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toArray = function () {\n        if (this.error)\n            return this.error;\n        if (!arguments.length) {\n            return Object.values(this.d);\n        }\n        let formats = typesToArray(this.c, ...arguments);\n        return [\n            this.year(formats[0]),\n            this.month(formats[1]),\n            this.date(formats[2]),\n            this.hour(formats[3]),\n            this.minute(formats[4]),\n            this.second(formats[5]),\n            this.millisecond(formats[6])\n        ]\n    }\n\n    ////////////////////--- Version 2.0.0 ---////////////////////\n\n    /**\n     * return the object of PersianDate\n     * @since 2.0.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @returns {String} if date valid, return diff human-readable format\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.diffForHumans = function (date, suffix = true) {\n        if (this.error)\n            return this.error;\n        let result = this.diff(date, 's');\n        if (typeof result == 'string')\n            return 'تاریخ نامعتبر'\n        let prefix = result > 0 ? 'آینده' : 'پیش';\n        result = Math.abs(result);\n\n        if (result == 0)\n            return 'هم اکنون';\n        else if (result < 45)\n            result = 'لحظاتی';\n        else if ((result /= 60) < 45) // divide by 60, for getting minute\n            result = Math.round(result) + ' ' + 'دقیقه';\n        else if ((result /= 60) < 23.5) // divide by 60, for getting hour\n            result = Math.round(result) + ' ' + 'ساعت';\n        else if ((result /= 24) < 26) // divide by 24, for getting day\n            result = Math.round(result) + ' ' + 'روز';\n        else if (result < 320)\n            result = Math.round(result / 30) + ' ' + 'ماه';\n        else\n            result = Math.round(result / 365) + ' ' + 'سال';\n        return result + (suffix ? ' ' + prefix : '');\n    }\n\n    /**\n     * convert a jalali date to PersianDate instance\n     * @since 2.0.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.fromJalali = function (...date) {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n\n        if (!date.length)\n            date = gtj()\n        else if (this.isPersianDate(date[0]))\n            date = date[0].toArray();\n        else\n            date = typesToArray(this.c, ...date)\n        if (this.c == \"jalali\") {\n            //plus sign before a variable, convert variable to int\n            this.d.year = +date[0];\n            this.d.month = +date[1] || 1;\n            this.d.date = +date[2] || 1;\n            this.d.hour = +date[3] || 0;\n            this.d.minute = +date[4] || 0;\n            this.d.second = +date[5] || 0;\n            this.d.millisecond = +date[6] || 0;\n        } else\n            setGregorianDate(jtg(...date), this)\n\n        if (!this.isValid())\n            return showError('تاریخ نامعتبر', this);\n        return this;\n    }\n\n    /**\n     * convert a gregorian date to PersianDate instance\n     * @since 2.0.0\n     * @param {PersianDate|Date|String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.fromGregorian = function (...date) {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n\n        if (!date.length)\n            date[0] = new Date().getTime()\n        // else \n        if (this.isPersianDate(date[0])) {\n            date = date[0].toArray()\n        }\n        else if (!isTimestamp(date[0])) {\n            date = typesToArray(this.c, ...date);\n            date[6] = +date[6] || 0;\n            date[5] = +date[5] || 0;\n            date[4] = +date[4] || 0;\n            date[3] = +date[3] || 0;\n            date[2] = +date[2] || 1;\n            date[1] = +date[1] || 1;\n        }\n        date[0] = +date[0];\n\n        if (date.length > 1) {\n            if (!this.isValid(...date)) return showError('تاریخ نامعتبر', this);\n            --date[1]; // this is month; becuse the Date get month from 0, subtract one \n        }\n\n        date = new Date(...date);\n        if (date == 'Invalid Date')\n            return showError('تاریخ نامعتبر', this);\n        if (this.c == 'jalali')\n            setJalaliDate(gtj(date), this)\n        else\n            setGregorianDate(date, this)\n        return this;\n    }\n\n    /**\n     * convert a gregorian date to PersianDate instance\n     * @since 2.0.0\n     * @param {\"j\"|\"jalali\"|\"g\"|\"gregorian\"} calendar - the calendar\n     * @returns {PersianDate} return class with persian date\n     */\n    PersianDate.prototype.calendar = function (calendar) {\n        if (!calendar)\n            return this.c;\n        if (calendar[0] == 'j' && this.c[0] == 'g') {\n            if (!this.error)\n                setJalaliDate(gtj(this.toDate()), this)\n            this.c = 'jalali';\n        }\n        else if (calendar[0] == 'g' && this.c[0] == 'j') {\n            if (!this.error)\n                setGregorianDate(this.toDate(), this)\n            this.c = 'gregorian';\n        }\n        return this;\n    }\n\n    /**\n     * return number of weeks in year\n     * @since 2.0.0\n     * @param {Number|String} year - the year \n     * @returns {Number} number of weeks in year\n     */\n    PersianDate.prototype.getWeeksInYear = function (year) {\n        if (this.error)\n            return this.error;\n        if (!year)\n            year = this.year();\n\n        let dayOfYearFormat = this.c == 'jalali' ? 'jd' : 'd'\n        let firstOfYear = this.clone().parse(year);\n        let firstOfYearDay = firstOfYear.date(dayOfYearFormat)\n        let lastOfYear = firstOfYear.clone().addYear().subDay()\n        let lastOfYearDay = lastOfYear.date(dayOfYearFormat)\n        if (firstOfYearDay > 3)\n            firstOfYear.addDay(7 - firstOfYearDay)\n        else\n            firstOfYear.subDay(firstOfYearDay)\n\n        if (lastOfYearDay > 3)\n            lastOfYear.addDay(7 - lastOfYearDay)\n        else\n            lastOfYear.subDay(lastOfYearDay)\n        return Math.ceil(lastOfYear.diff(firstOfYear, 'date') / 7);\n    }\n\n    /**\n     * return the Date instance of PersianDate\n     * @since 2.0.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Date} if date valid, return Date instance of date\n     * @throws {String} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toDate = function () {\n        if (this.error)\n            return this.error;\n        if (this.c == 'jalali')\n            return jtg(...this.toArray());\n        let date = this.toArray();\n        --date[1];\n        return new Date(...date);\n    }\n\n    /**\n     * change the date to start of the year or month or ...\n     * @since 2.0.0\n     * @param {String} unit - the unit of time\n     * @returns {PersianDate} return the class with new date or time\n     */\n    PersianDate.prototype.startOf = function (unit = 'year') {\n        this.d.millisecond = 0;\n        if (unit[0] == 's')\n            return this;\n        this.d.second = 0;\n        if (unit == 'm' || unit == 'minute')\n            return this;\n        this.d.minute = 0;\n        if (unit[0] == 'h')\n            return this;\n        this.d.hour = 0;\n        if (unit[0] == 'd')\n            return this;\n        this.d.date = 1;\n        if (unit == 'M' || unit == 'month')\n            return this;\n        this.d.month = 1;\n        if (unit[0] == 'y')\n            return this;\n    }\n\n    /**\n     * change the date to end of the year or month or ...\n     * @since 2.0.0\n     * @param {String} unit - the unit of time\n     * @returns {PersianDate} return the class with new date or time\n     */\n    PersianDate.prototype.endOf = function (unit = 'year') {\n        this.d.millisecond = 999;\n        if (unit[0] == 's')\n            return this;\n        this.d.second = 59;\n        if (unit == 'm' || unit == 'minute')\n            return this;\n        this.d.minute = 59;\n        if (unit[0] == 'h')\n            return this;\n        this.d.hour = 23;\n        if (unit[0] == 'd')\n            return this;\n        this.d.date = this.getDaysInMonth();\n        if (unit == 'M' || unit == 'month')\n            return this;\n        this.d.month = 12;\n        this.d.date = this.getDaysInMonth();\n        if (unit[0] == 'y')\n            return this;\n    }\n\n    /**\n     * show warning for deprecated functions\n     * @since 2.0.0\n     * @param {String} msg - the message for warning\n     */\n    const deprecate = (msg) => {\n        console.warn(msg);\n    }\n\n    /**\n     * check the input is timestamp\n     * @since 2.0.0\n     * @param {Number|String} timestamp - input that must be checked\n     * @returns {Boolean} if input was timestamp, return true\n     */\n    const isTimestamp = (timestamp) => {\n        return Number(timestamp) != NaN && Math.floor(timestamp / 10000) > 0\n    }\n\n    /**\n     * set the date with Date instance\n     * @since 2.0.0\n     * @param {Date} date - the Date instance\n     * @param {PersianDate} instance - the PersianDate instance\n     */\n    const setGregorianDate = (date, instance) => {\n        instance.d = {\n            year: date.getFullYear(),\n            month: date.getMonth() + 1,\n            date: date.getDate(),\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds(),\n            millisecond: date.getMilliseconds(),\n        };\n    }\n\n    /**\n     * set the date with array of persian date\n     * @since 2.0.0\n     * @param {Array} date - the array of persian date\n     * @param {PersianDate} instance - the PersianDate instance\n     */\n    const setJalaliDate = (date, instance) => {\n        [\n            instance.d.year,\n            instance.d.month,\n            instance.d.date,\n            instance.d.hour,\n            instance.d.minute,\n            instance.d.second,\n            instance.d.millisecond,\n        ] = date;\n    }\n\n\n    //TODO: add start and end function\n    //TODO: add nodejs support\n    //TODO: thats function not needed to date without create PersianDate must working for v2\n    //TODO: remove the excess comments\n    //TODO: remove dateToNumber function\n    //TODO: combine getWeekOfJYear and getWeekOfGYear function\n    //TODO: use shortest parameters -> (year, month, day, hour, minute, second, millisecond)\n    //TODO: combine isAfter and isBefore and ...\n    //TODO: add valueOf function\n    //TODO: check performance\n    //TODO: git rm -rf --cached .\n    //TODO: in doc, add jt, jh, jm and ...\n    //TODO: add versioning in doc for new functions\n    //TODO: after writing the documentation complete the deprecated function warning\n\n    //for next version\n    //TODO: add quarter and week and day to startOf and endOf\n\n\n    if (arguments.length)\n        //FIXME: use parse function\n        this.setDate(...arguments);\n    else\n        this.now();\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PersianDate);\n\n////////////////////--- Thank You For Your Attention ---////////////////////\n////////////////////------ I'm Will Be Very Happy ------////////////////////\n////////////////////---- To Get To Know You Better! ----////////////////////\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n\n\n//# sourceURL=webpack://PersianDate/./src/PersianDate.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: CALENDAR, TIMETYPE, REGEX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CALENDAR\", function() { return CALENDAR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TIMETYPE\", function() { return TIMETYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REGEX\", function() { return REGEX; });\nconst CALENDAR = {\n    jalali: {\n        months: {\n            1: \"فروردین\",\n            2: \"اردیبهشت\",\n            3: \"خرداد\",\n            4: \"تیر\",\n            5: \"مرداد\",\n            6: \"شهریور\",\n            7: \"مهر\",\n            8: \"آبان\",\n            9: \"آذر\",\n            10: \"دی\",\n            11: \"بهمن\",\n            12: \"اسفند\",\n        },\n        days: {\n            label: {\n                6: \"شنبه\",\n                0: \"یکشنبه\",\n                1: \"دوشنبه\",\n                2: \"سه‌شنبه\",\n                3: \"چهارشنبه\",\n                4: \"پنجشنبه\",\n                5: \"جمعه\",\n            },\n            weekNumber: { // days in jalali calendar start from saturday or 6\n                6: 0,  //شنبه\n                0: 1,  //یکشنبه\n                1: 2,  //دوشنبه\n                2: 3,  //سه‌شنبه\n                3: 4,  //چهارشنبه\n                4: 5,  //پنجشنبه\n                5: 6,  //جمعه\n            },\n        },\n        ordinalNumbers: function (number, mode) {\n            const numbers = {\n                1: 'یک',\n                2: 'دو',\n                3: 'سو',\n                4: 'چهار',\n                5: 'پنج',\n                6: 'شش',\n                7: 'هفت',\n                8: 'هشت',\n                9: 'نه',\n                10: 'ده',\n                11: 'یازده',\n                12: 'دوازده',\n                13: 'سیزده',\n                14: 'چهارده',\n                15: 'پانزده',\n                16: 'شانزده',\n                17: 'هفده',\n                18: 'هجده',\n                19: 'نوزده',\n                20: 'بیست',\n                30: 'سی‌',\n                40: 'چهل',\n                50: 'پنجاه',\n                60: 'شصت',\n                70: 'هفتاد',\n                80: 'هشتاد',\n                90: 'نود',\n                100: 'صد',\n                200: 'دویست',\n                300: 'سیصد',\n            }\n            let ordinalNumber = '';\n            if (number == 1)\n                ordinalNumber = 'اول';\n            else if (numbers[number])\n                ordinalNumber = numbers[number] + (number == 30 ? 'ام' : 'م')\n            else {\n                let remainder = number % 10;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + 'م';\n                remainder = (number - remainder) % 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : (remainder == 30 ? 'ام ' : 'م'));\n                remainder = Math.floor(number / 100) * 100;\n                if (remainder)\n                    ordinalNumber = numbers[remainder] + (ordinalNumber ? (' و ' + ordinalNumber) : 'م');\n            }\n            if (mode == 2)\n                ordinalNumber += 'ین';\n            return ordinalNumber;\n        },\n    },\n    gregorian: {\n        months: {\n            1: \"January\",\n            2: \"February\",\n            3: \"March\",\n            4: \"April\",\n            5: \"May\",\n            6: \"June\",\n            7: \"July\",\n            8: \"August\",\n            9: \"September\",\n            10: \"October\",\n            11: \"November\",\n            12: \"December\",\n        },\n        days: {\n            label: {\n                0: \"Sunday\",\n                1: \"Monday\",\n                2: \"Tuesday\",\n                3: \"Wednesday\",\n                4: \"Thursday\",\n                5: \"Friday\",\n                6: \"Saturday\",\n            },\n            weekNumber: { // days in gregorian calendar start from sunday or 0\n                0: 0, // Sunday\n                1: 1, // Monday\n                2: 2, // Tuesday\n                3: 3, // Wednesday\n                4: 4, // Thursday\n                5: 5, // Friday\n                6: 6, // Saturday\n            },\n        },\n        ordinalNumbers: function (number) {\n            if (number == 1 || number % 10 == 1 && number != 11)\n                return number + 'st';\n            else if (number == 2 || number % 10 == 2 && number != 12)\n                return number + 'nd';\n            else if (number == 3 || number % 10 == 3 && number != 13)\n                return number + 'rd';\n            else\n                return number + 'th';\n        },\n    }\n}\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\\\\/| |-|\\\\.|,|:\", // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n    betweenBacktick: /`(.*?)`/g, // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour >= 12 && hour < 24) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\n\n\n//# sourceURL=webpack://PersianDate/./src/utils.js?");

/***/ })

/******/ })["default"];
});