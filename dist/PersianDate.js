(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["PersianDate"] = factory();
	else
		root["PersianDate"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/PersianDate.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/PersianDate.js":
/*!****************************!*\
  !*** ./src/PersianDate.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n//                              ||                ||\n//              ----------------||----------------||----------------\n//             ||               ||                ||               ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||       ***************      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||                     *      *              *      ||\n//             ||       ***************      ****************      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       *                                   *      ||\n//             ||       ***************                     *      ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//             ||                                                  ||\n//              ----------------------------------------------------\n\n////////////////////---------- Are You Ready? ----------////////////////////\n////////////////////------------- Let's Go -------------////////////////////\n////////////////////---- Read Comments And Enjoy It ----////////////////////\n\n////////////////////------------- ATTENTION -------------////////////////////\n//          In the first, I'm must say, in the all of the project,         //\n//          g means Gregorian and j means Jalali                           //\n/////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * A Date library for working with persian date\n * @class\n * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n */\nconst PersianDate = function () {\n    'use strict'\n\n    /**\n     * keeps the date and time\n     * @param {Number} year - the year of date\n     * @param {Number} month - the month of date\n     * @param {Number} date - the day of month of date\n     * @param {Number} hour - the hour of time\n     * @param {Number} minute - the minute of time\n     * @param {Number} second - the second of time\n     * @param {Number} millisecond - the millisecond of time\n     */\n    this.d = {};\n\n    /**\n     * Gregorian to Jalali\n     * @param {Null|Date|Number|String} [year=new Date()] - Gregorian year\n     * @param {Null|Number|String} [month=1] - Gregorian month\n     * @param {Null|Number|String} [day=1] - Gregorian day\n     * @param {Null|Number|String} [hour=0] - Gregorian hour\n     * @param {Null|Number|String} [minute=0] - Gregorian minute\n     * @param {Null|Number|String} [second=0] - Gregorian second\n     * @param {Null|Number|String} [millisecond=0] - Gregorian millisecond\n     * @returns {Array} Jalali date\n     */\n    const gtj = (year, month, day, hour, minute, second, millisecond) => {\n        let date;\n        if (!year)\n            date = new Date();\n        else if (Object.prototype.toString.call(year) === '[object Date]') // if the year was an instance of Date\n            date = year;\n        else\n            date = new Date(year, month || 1, day || 1, hour || 0, minute || 0, second || 0, millisecond || 0);\n        day = date.getDate();\n        month = date.getMonth() + 1; // Because the output of getMonth() start from zero, add one\n        year = date.getFullYear();\n        hour = date.getHours();\n        minute = date.getMinutes();\n        second = date.getSeconds();\n        millisecond = date.getMilliseconds();\n        let jYear, jMonth, jDay;\n        let pastDaysInMonth = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334,\n        ]; //Past days from the start of the year in each month\n        if (year > 1600) {\n            jYear = 979;\n            year -= 1600;\n        } else {\n            jYear = 0;\n            year -= 621;\n        }\n        let newYear =\n            month > 2 ? year + 1 : year;\n        let days =\n            365 * year +\n            parseInt((newYear + 3) / 4) -\n            parseInt((newYear + 99) / 100) +\n            parseInt((newYear + 399) / 400) -\n            80 +\n            day +\n            pastDaysInMonth[month - 1];\n        jYear += 33 * parseInt(days / 12053);\n        days %= 12053;\n        jYear += 4 * parseInt(days / 1461);\n        days %= 1461;\n        if (days > 365) {\n            jYear += parseInt((days - 1) / 365);\n            days = (days - 1) % 365;\n        }\n        jMonth =\n            days < 186\n                ? 1 + parseInt(days / 31)\n                : 7 + parseInt((days - 186) / 30);\n        jDay = 1 + (days < 186 ? days % 31 : (days - 186) % 30);\n        return [\n            jYear,\n            jMonth,\n            jDay,\n            hour,\n            minute,\n            second,\n            millisecond,\n        ];\n    }\n\n    /**\n     * Jalali to Gregorian\n     * @param {Null|Number|String} year - Jalali year\n     * @param {Null|Number|String} [month=1] -  Jalali month\n     * @param {Null|Number|String} [day=1] -  Jalali day\n     * @param {Null|Number|String} [hour=0] -  Jalali hour\n     * @param {Null|Number|String} [minute=0] -  Jalali minute\n     * @param {Null|Number|String} [second=0] -  Jalali second\n     * @param {Null|Number|String} [millisecond=0] -  Jalali millisecond\n     * @returns {Date} Gregorian date\n     */\n    const jtg = (year, month, day, hour, minute, second, millisecond) => {\n        // if (!year)\n        //     [year, month, day, hour, minute, second, millisecond] = this.toArray();\n        // else {\n        //plus sign before a variable, convert variable to int\n        year = +year;\n        month = +month || 1;\n        day = +day || 1;\n        hour = +hour || 0;\n        minute = +minute || 0;\n        second = +second || 0;\n        millisecond = +millisecond || 0;\n        // }\n        let gYear, gMonth, gDay;\n        if (year > 979) {\n            gYear = 1600;\n            year -= 979;\n        } else {\n            gYear = 621;\n        }\n        let days =\n            365 * year +\n            parseInt(year / 33) * 8 +\n            parseInt(((year % 33) + 3) / 4) +\n            78 +\n            day +\n            (month < 7\n                ? (month - 1) * 31\n                : (month - 7) * 30 + 186);\n        gYear += 400 * parseInt(days / 146097);\n        days %= 146097;\n        if (days > 36524) {\n            gYear += 100 * parseInt(--days / 36524);\n            days %= 36524;\n            if (days >= 365) days++;\n        }\n        gYear += 4 * parseInt(days / 1461);\n        days %= 1461;\n        if (days > 365) {\n            gYear += parseInt((days - 1) / 365);\n            days = (days - 1) % 365;\n        }\n        gDay = days + 1;\n        let daysOfMonths = [\n            0,\n            31,\n            (gYear % 4 == 0 && gYear % 100 != 0) ||\n                gYear % 400 == 0\n                ? 29\n                : 28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31,\n        ];\n        for (gMonth = 0; gMonth < 13; gMonth++) {\n            let v = daysOfMonths[gMonth];\n            if (gDay <= v) break;\n            gDay -= v;\n        }\n\n        return new Date(\n            gYear,\n            gMonth - 1,\n            gDay,\n            hour,\n            minute,\n            second,\n            millisecond\n        );\n    }\n\n    /**\n     * get label of day\n     * @param {Date} date - the date that received day\n     * @param {'fa'|'en'} locale - locale of day label\n     * @returns {String} returns day label\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     * @example Saturday | شنبه\n     */\n    const getDayLabel = (date = new Date(), locale = 'fa') => {\n        if (Object.prototype.toString.call(date) === '[object Date]') // if the year was an instance of Date\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"DAYS\"]['label'][locale][date.getDay()];\n        return showError('تاریخ نامعتبر');\n    }\n\n    /**\n     * get the day of the week\n     * @param {Date} date - the date that received day of week\n     * @param {'fa', 'en'} locale - locale of day\n     * @param {'standard','array'} mode - standard mode start from 1 and array mode start from 0\n     * @returns {Number} the number of the day of week\n     * @throws {PersianDate} if date invalid return class with error property\n     */\n    const getDayOfWeek = (date = new Date(), locale = 'fa', mode = 'standard') => {\n        if (Object.prototype.toString.call(date) === '[object Date]') { // if the year was an instance of Date\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"DAYS\"][locale][date.getDay()] + (mode != 'standard' ? 0 : 1);\n        }\n        return showError('تاریخ نامعتبر');\n    }\n\n    /**\n     * get the day of the Jalali year\n     * @param {Null|Number|String} month - the month of date that gives the day of the year\n     * @param {Null|Number|String} day - the day of date that gives the day of the year\n     * @returns {Number} the day of the Jalali year\n     */\n    const getDayOfJYear = (month, day) => {\n        // if (!month)\n        //     [month, day] = [this.d.month, this.d.date];\n        //plus sign before a variable, convert variable to int\n        month = +month;\n        day = +day;\n        while (--month != 0) {\n            day += this.getDaysInMonth(0, month);\n        }\n        return day;\n    }\n\n    /**\n     * get the day of the Gregorian year\n     * @param {Null|Date|Number|String} [year=Date.getFullYear()] - the year of date that gives the day of the year\n     * @param {Null|Number|String} [month=Date.getMonth()] - the month of date that gives the day of the year\n     * @param {Null|Number|String} [day=Date.getDate()] - the day of date that gives the day of the year\n     * @returns {Number} the day of the Gregorian year\n     */\n    const getDayOfGYear = (year, month, day) => {\n        // if (!year) {\n        //     let gDate = jtg(...this.toArray());\n        //     [year, month, day] = [gDate.getFullYear(), gDate.getMonth(), gDate.getDate()];\n        // }\n        if (Object.prototype.toString.call(year) === '[object Date]') // if the year was an instance of Date\n            [year, month, day] = [year.getFullYear(), year.getMonth(), year.getDate()];\n        else\n            month--;\n        let date = new Date(year, month, day);\n        let startOfYear = new Date(year, 0, 0);\n        let diff = (date - startOfYear) + ((startOfYear.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\n        return Math.floor(diff / (1000 * 60 * 60 * 24));\n    }\n\n    /**\n     * get the week of the Jalali year\n     * @param {Null|Number|String} year - the year of date that gives the week of the year\n     * @param {Null|Number|String} month - the month of date that gives the week of the year\n     * @param {Null|Number|String} day - the day of date that gives the week of the year\n     * @returns {Number} the week of the Jalali year\n     */\n    const getWeekOfJYear = (year, month, day) => {\n        let dayOfYear = getDayOfJYear(month, day);\n        let gDate = jtg(year);\n        dayOfYear += getDayOfWeek(gDate, 'fa', 'array');\n        return Math.ceil(dayOfYear / 7);\n    }\n\n    /**\n     * get the week of the Gregorian year\n     * @param {Null|Number|String} [year=Date.getFullYear()] - the year of date that gives the week of the year\n     * @param {Null|Number|String} [month=Date.getMonth() + 1] - the month of date that gives the week of the year\n     * @param {Null|Number|String} [day=Date.getDate()] - the day of date that gives the week of the year\n     * @returns {Number} the week of the Gregorian year\n     */\n    const getWeekOfGYear = (year, month, day) => {\n        let dayOfYear = getDayOfGYear(year, month, day);\n        // year = year || jtg(this.d.year).getFullYear();\n        let gDate = new Date(year, 0, 1);\n        dayOfYear += getDayOfWeek(gDate, 'en', 'array');\n        return Math.ceil(dayOfYear / 7);\n    }\n\n    /**\n     * returns the ordinal number of that number sent to it\n     * @param {Number} number - the number that gives ordinal number --> from 1 to 366\n     * @param {'fa','en'} locale - locale of ordinal number\n     * @param {?Number} mode  - 'fa' locale have two mode of ordinal number\n     * @returns {String} ordinal number\n     * @example 1st | اول | اولین\n     */\n    const ordinalNumber = (number, locale = \"fa\", mode = 1) => {\n        if (locale != 'fa') mode = ''\n        return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"ORDINALNUMBERS\"][locale + mode][number];\n    }\n\n    /**\n     * add a prefix to the text in the number of characters that the text has less\n     * @param {String|Number} text a text need prefix\n     * @param {Number} length length of text\n     * @param {String} [prefix=0] - string for add before of text\n     * @returns {String} text with or wihtout prefix\n     */\n    const addPrefix = (text, length, prefix = '0') => {\n        return prefix.repeat(length - String(text).length) + text;\n    }\n\n    /**\n     * make error and delete this.d\n     * @param {String} errorText - Error Text\n     * @returns {PersianDate} make error and return class\n     */\n    const showError = (errorText) => {\n        delete this.d;\n        this.error = errorText;\n        return this;\n    }\n\n    /**\n     * make current date in persian calendar\n     * @returns {PersianDate} make current date and return class\n     */\n    PersianDate.prototype.now = function () {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n        [this.d.year, this.d.month, this.d.date, this.d.hour, this.d.minute, this.d.second, this.d.millisecond] = gtj();\n        return this;\n    }\n\n    /**\n     * set persian date from Gregorian date\n     * @param {...Number|Date|Array|Null} date - the date that convert to persian date\n     * @returns {PersianDate} return class with persian date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.setDate = function (...date) {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n        date = new Date(...date);\n        if (date == 'Invalid Date')\n            return showError('تاریخ نامعتبر');\n        [this.d.year, this.d.month, this.d.date, this.d.hour, this.d.minute, this.d.second, this.d.millisecond] = gtj(date);\n        return this;\n    }\n\n    /**\n     * convert a string of date or array of date or object of date to PersianDate\n     * @param {String|Array|Object|Number} year - this param must be string of date or array of date or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate} return class with persian date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.parse = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error) {\n            delete this.error;\n            this.d = {};\n        }\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(year, month, day, hour, minute, second, millisecond)\n        //plus sign before a variable, convert variable to int\n        this.d.year = +year;\n        this.d.month = +month || 1;\n        this.d.date = +day || 1;\n        this.d.hour = +hour || 0;\n        this.d.minute = +minute || 0;\n        this.d.second = +second || 0;\n        this.d.millisecond = +millisecond || 0;\n\n        if (!this.isValid())\n            return showError('تاریخ نامعتبر');\n        return this;\n    }\n\n    /**\n     * receives year and determined that is leap year or not\n     * @param {?Number} year - the year to be determined is a leap or not\n     * @returns {Boolean} if is leap year, returns true\n     */\n    PersianDate.prototype.isLeapYear = function (year = this.d.year) {\n        if (this.error)\n            return false;\n        let array = year > 1342 ? [1, 5, 9, 13, 17, 22, 26, 30] : [1, 5, 9, 13, 17, 21, 26, 30];\n        let remainder = year % 33;\n        return array.includes(remainder);\n    }\n\n    /**\n     * checks the persian date and time\n     * @param {?Number} year - year of date that will be checked\n     * @param {?Number} month - month of date that will be checked\n     * @param {?Number} day - day of date that will be checked\n     * @param {?Number} hour - hour of date that will be checked\n     * @param {?Number} minute - minute of date that will be checked\n     * @param {?Number} second - second of date that will be checked\n     * @param {?Number} millisecond - millisecond of date that will be checked\n     * @returns {Boolean} if is valid, returns true\n     */\n    PersianDate.prototype.isValid =\n        function (year, month, day, hour, minute, second, millisecond) {\n            if (this.error)\n                return false;\n            let result = this.isValidDate(year, month, day);\n            if (result)\n                return this.isValidTime(hour, minute, second, millisecond);\n            return false;\n        }\n\n    /**\n     * checks the persian date\n     * @param {?Number} year - year of date that will be checked\n     * @param {?Number} month - month of date that will be checked\n     * @param {?Number} day - day of date that will be checked\n     * @returns {Boolean} if is valid date, returns true\n     */\n    PersianDate.prototype.isValidDate =\n        function (year = this.d.year, month = this.d.month, day = this.d.date) {\n            if (this.error)\n                return false;\n            if ([year, month, day].some(e => String(e).search(/null|undifind|NaN/) != -1))\n                return false;\n            if (year < 0 || month > 12 || month < 1 || day > 31 || day < 1)\n                return false;\n            if (month >= 7 && month <= 11 && day == 31)\n                return false;\n            if (month == 12 && day == 31)\n                return false;\n            if (month == 12 && day == 30 && !this.isLeapYear(year))\n                return false;\n            return true;\n        }\n\n    /**\n     * checks the time\n     * @param {?Number} hour - hour of date that will be checked\n     * @param {?Number} minute - minute of date that will be checked\n     * @param {?Number} second - second of date that will be checked\n     * @param {?Number} millisecond - millisecond of date that will be checked\n     * @returns {Boolean} if is valid time, returns true\n     */\n    PersianDate.prototype.isValidTime =\n        function (hour = this.d.hour, minute = this.d.minute, second = this.d.second, millisecond = this.d.millisecond) {\n            if (this.error)\n                return false;\n            if ([hour, minute, second, millisecond].some(e => String(e).search(/null|undifind|NaN/) != -1))\n                return false;\n            if (hour < 0 || hour > 23)\n                return false;\n            if (minute < 0 || minute > 59)\n                return false;\n            if (second < 0 || second > 59)\n                return false;\n            if (millisecond < 0 || millisecond > 999)\n                return false;\n            return true;\n        }\n\n    /**\n     * returns number of days in month\n     * @param {?Number} year - year of date that returns number of days in month\n     * @param {?Number} month - month of date that returns number of days in month\n     * @returns {Number} number of days in month\n     */\n    PersianDate.prototype.getDaysInMonth =\n        function (year = this.d.year, month = this.d.month) {\n            if (this.error)\n                return this;\n            if (month >= 1 && month <= 6)\n                return 31;\n            if (month > 6 && month <= 11 || this.isLeapYear(year)) {\n                return 30;\n            }\n            return 29;\n        }\n\n    /**\n     * add to year\n     * @param {?Number|String} [year=1] - a number for add with year\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addYear = function (year = 1, checkDate = true) {\n        if (!year || this.error)\n            return this;\n        if (year < 0) // if the number was negative, send to subtractYear method\n            return this.subtractYear(Math.abs(year));\n        this.d.year += +year; //plus sign before a variable, convert variable to int\n        while (checkDate && !this.isValidDate())\n            this.subtractDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to month\n     * @param {?Number|String} [month=1] - a number for add with month\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMonth = function (month = 1, checkDate = true) {\n        if (!month || this.error)\n            return this;\n        if (month < 0) // if the number was negative, send to subtractMonth method\n            return this.subtractMonth(Math.abs(month));\n        month = +month; //plus sign before a variable, convert variable to int\n\n        let monthToStartNewYear = 12 - this.d.month + 1; //monthToStartNewYear -> Number of month to start of new year\n        if (monthToStartNewYear > month) {\n            this.d.month += month;\n        } else {\n            this.addYear(1, false);\n            this.d.month = 1;\n            month -= monthToStartNewYear;\n            while (month >= 12) {\n                month -= 12;\n                this.addYear(1, false);\n            }\n            if (month != 0) {\n                this.d.month += month;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subtractDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to day\n     * @param {?Number|String} [day=1] - a number for add with day\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addDay = function (day = 1, checkDate = true) {\n        if (!day || this.error)\n            return this;\n        if (day < 0) // if the number was negative, send to subtractDay method\n            return this.subtractDay(Math.abs(day));\n        day = +day; //plus sign before a variable, convert variable to int\n\n        let dayToStartNextMonth = this.getDaysInMonth() - this.d.date + 1; // dayToStartNextMonth -> Number of day to start of next month\n        if (dayToStartNextMonth > day) {\n            this.d.date += day;\n        } else {\n            this.addMonth(1, false);\n            this.d.date = 1;\n            day -= dayToStartNextMonth;\n            while (day >= this.getDaysInMonth()) {\n                day -= this.getDaysInMonth();\n                this.addMonth(1, false);\n            }\n            if (day != 0) {\n                this.d.date += day;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subtractDay(1, false);\n        return this;\n    }\n\n    /**\n     * add to quarter\n     * @param {?Number|String} [quarter=1] - a number for add with quarter\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addQuarter = function (quarter = 1, checkDate = true) {\n        if (!quarter || this.error)\n            return this;\n        if (quarter < 0) // if the number was negative, send to subtractQuarter method\n            return this.subtractQuarter(Math.abs(quarter));\n        quarter = +quarter; //plus sign before a variable, convert variable to int\n        return this.addMonth(quarter * 3, checkDate);\n    }\n\n    /**\n     * add to week\n     * @param {?Number|String} [week=1] - a number for add with week\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addWeek = function (week = 1, checkDate = true) {\n        if (!week || this.error)\n            return this;\n        if (week < 0) // if the number was negative, send to subtractWeek method\n            return this.subtractWeek(Math.abs(week));\n        week = +week; //plus sign before a variable, convert variable to int\n        return this.addDay(week * 7, checkDate);\n    }\n\n    /**\n     * add to hour\n     * @param {?Number|String} [hour=1] - a number for add with hour\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addHour = function (hour = 1, checkDate = true) {\n        if (!hour || this.error)\n            return this;\n        if (hour < 0) // if the number was negative, send to subtractHour method\n            return this.subtractHour(Math.abs(hour));\n        hour = +hour; //plus sign before a variable, convert variable to int\n        while (hour >= 24) {\n            hour -= 24;\n            this.addDay(1, false);\n        }\n        let hourToNextDay = 24 - this.d.hour; // hourToNextDay -> Number of hour to start of next day\n        if (hour >= hourToNextDay) {\n            this.addDay(1, false);\n            hour -= hourToNextDay;\n            this.d.hour = hour;\n        } else\n            this.d.hour += hour;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to minute\n     * @param {?Number|String} [minute=1] - a number for add with minute\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMinute = function (minute = 1, checkDate = true) {\n        if (!minute || this.error)\n            return this;\n        if (minute < 0) // if the number was negative, send to subtractMinute method\n            return this.subtractMinute(Math.abs(minute));\n        minute = +minute; //plus sign before a variable, convert variable to int\n        while (minute >= 60) {\n            this.addHour(1, false);\n            minute -= 60;\n        }\n        let minuteToNextHour = 60 - this.d.minute; // minuteToNextHour -> Number of minute to start of next hour\n        if (minute >= minuteToNextHour) {\n            this.addHour(1, false);\n            minute -= minuteToNextHour;\n            this.d.minute = minute;\n        } else\n            this.d.minute += minute;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to second\n     * @param {?Number|String} [second=1] - a number for add with second\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addSecond = function (second = 1, checkDate = true) {\n        if (!second || this.error)\n            return this;\n        if (second < 0) // if the number was negative, send to subtractSecond method\n            return this.subtractSecond(Math.abs(second));\n        second = +second; //plus sign before a variable, convert variable to int\n        while (second >= 60) {\n            this.addMinute(1, false);\n            second -= 60;\n        }\n        let secondToNextMinute = 60 - this.d.second; // secondToNextMinute -> Number of second to start of next Minute\n        if (second >= secondToNextMinute) {\n            this.addMinute(1, false);\n            second -= secondToNextMinute;\n            this.d.second = second;\n        } else\n            this.d.second += second;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * add to millisecond\n     * @param {?Number|String} [millisecond=1] - a number for add with millisecond\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.addMillisecond = function (millisecond = 1, checkDate = true) {\n        if (!millisecond || this.error)\n            return this;\n        if (millisecond < 0) // if the number was negative, send to subtractMillisecond method\n            return this.subtractMillisecond(Math.abs(millisecond));\n        millisecond = +millisecond; //plus sign before a variable, convert variable to int\n        while (millisecond >= 1000) {\n            this.addSecond(1, false);\n            millisecond -= 1000;\n        }\n        let millisecondToNextSecond = 1000 - this.d.millisecond; // millisecondToNextSecond -> Number of milllisecond to start of next second\n        if (millisecond >= millisecondToNextSecond) {\n            this.addSecond(1, false);\n            millisecond -= millisecondToNextSecond;\n            this.d.millisecond = millisecond;\n        } else\n            this.d.millisecond += millisecond;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from year\n     * @param {?Number|String} [year=1] - a number for subtract from year\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractYear = function (year = 1, checkDate = true) {\n        if (!year || this.error)\n            return this;\n        this.d.year -= Math.abs(year); //plus sign before a variable, convert variable to int\n        while (checkDate && !this.isValidDate())\n            this.subtractDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from month\n     * @param {?Number|String} [month=1] - a number for subtract from month\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractMonth = function (month = 1, checkDate = true) {\n        if (!month || this.error)\n            return this;\n        month = Math.abs(month); //plus sign before a variable, convert variable to int\n        let pastMonth = this.d.month; //pastMonth -> Number of month that is past\n        if (pastMonth > month) {\n            this.d.month -= month;\n        } else {\n            this.subtractYear(1, false);\n            this.d.month = 12;\n            month -= pastMonth;\n            while (month >= 12) {\n                this.subtractYear(1, false);\n                month -= 12;\n            }\n            if (month != 0) {\n                this.d.month -= month;\n            }\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subtractDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from day\n     * @param {?Number|String} [day=1] - a number for subtract from day\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractDay = function (day = 1, checkDate = true) {\n        if (!day || this.error)\n            return this;\n        day = Math.abs(day);\n        let pastDays = this.d.date; // pastDays -> Number of days that is past\n        if (pastDays > day) {\n            this.d.date -= day;\n        } else {\n            this.subtractMonth(1, false);\n            this.d.date = this.getDaysInMonth();\n            day -= pastDays;\n            while (day >= this.getDaysInMonth()) {\n                day -= this.getDaysInMonth();\n                this.subtractMonth(1, false);\n\n            }\n            this.d.date = this.getDaysInMonth() - day;\n        }\n\n        while (checkDate && !this.isValidDate())\n            this.subtractDay(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from quarter\n     * @param {?Number|String} [quarter=1] - a number for subtract from quarter\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractQuarter = function (quarter = 1, checkDate = true) {\n        if (!quarter || this.error)\n            return this;\n        quarter = Math.abs(quarter);\n        return this.subtractMonth(quarter * 3, checkDate);\n    }\n\n    /**\n     * subtract from week\n     * @param {?Number|String} [week=1] - a number for subtract from week\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractWeek = function (week = 1, checkDate = true) {\n        if (!week || this.error)\n            return this;\n        week = Math.abs(week);\n        return this.subtractDay(week * 7, checkDate);\n    }\n\n    /**\n     * subtract from hour\n     * @param {?Number|String} [hour=1] - a number for subtract from hour\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractHour = function (hour = 1, checkDate = true) {\n        if (!hour || this.error)\n            return this;\n        hour = Math.abs(hour);\n        while (hour >= 24) {\n            hour -= 24;\n            this.subtractDay(1, false);\n        }\n        let pastHours = this.d.hour; // pastHours -> Number of hours that is past\n        if (hour > pastHours) {\n            this.subtractDay(1, false);\n            hour -= pastHours;\n            this.d.hour = 24 - hour;\n        } else\n            this.d.hour -= hour;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from minute\n     * @param {?Number|String} [minute=1] - a number for subtract from minute\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractMinute = function (minute = 1, checkDate = true) {\n        if (!minute || this.error)\n            return this;\n        minute = Math.abs(minute);\n        while (minute >= 60) {\n            minute -= 60;\n            this.subtractHour(1, false);\n        }\n        let pastMinute = this.d.minute; // pastMinutes -> Number of minutes that is past\n        if (minute > pastMinute) {\n            this.subtractHour(1, false);\n            minute -= pastMinute;\n            this.d.minute = 60 - minute;\n        } else\n            this.d.minute -= minute;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from second\n     * @param {?Number|String} [second=1] - a number for subtract from second\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractSecond = function (second = 1, checkDate = true) {\n        if (!second || this.error)\n            return this;\n        second = Math.abs(second);\n        while (second >= 60) {\n            second -= 60;\n            this.subtractMinute(1, false);\n        }\n        let pastSeconds = this.d.second; // pastSeconds -> Number of seconds that is past\n        if (second > pastSeconds) {\n            this.subtractMinute(1, false);\n            second -= pastSeconds;\n            this.d.second = 60 - second;\n        } else\n            this.d.second -= second;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * subtract from millisecond\n     * @param {?Number|String} [millisecond=1] - a number for subtract from millisecond\n     * @param {?Boolean} checkDate checks the result that the date is valid,\n     * If not valid, it will be deducted from the day to be valid\n     * @returns {PersianDate} return class with new date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.subtractMillisecond = function (millisecond = 1, checkDate = true) {\n        if (!millisecond || this.error)\n            return this;\n        millisecond = Math.abs(millisecond);\n        while (millisecond >= 1000) {\n            millisecond -= 1000;\n            this.subtractSecond(1, false);\n        }\n        let pastMilliseconds = this.d.millisecond; // pastMilliseconds -> Number of milliseconds that is past\n        if (millisecond > pastMilliseconds) {\n            this.subtractSecond(1, false);\n            millisecond -= pastMilliseconds;\n            this.d.millisecond = 1000 - millisecond;\n        } else\n            this.d.millisecond -= millisecond;\n\n        while (checkDate && !this.isValidTime())\n            this.subtractMillisecond(1, false);\n        return this;\n    }\n\n    /**\n     * returns date as string with specify format\n     * @param {?String} [format=date] - formatting date to string\n     * @returns {String} date string\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toString = function (format = 'date') {\n        if (this.error)\n            return this;\n        //TODO: add jdate and jdatetime and jtime for v2\n        format = format.replace(/datetime/ig, 'jYYYY/jMM/jDD HH:mm')\n            .replace(/date/ig, 'jYYYY/jMM/jDD')\n            .replace(/time/ig, 'HH:mm');\n        let matchedFormat = format.match(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['format'])\n        let dateString = '';\n        for (const i of matchedFormat) {\n            dateString += format.substring(0, format.indexOf(i))\n            if (i.search(/Y|y/) != -1)\n                dateString += this.year(i);\n            else if (i.search(/Q/) != -1)\n                dateString += this.quarter(i);\n            else if (i.search(/M/) != -1)\n                dateString += this.month(i);\n            else if (i.search(/Q/) != -1)\n                dateString += this.quarter(i);\n            else if (i.search(/D|d/) != -1)\n                dateString += this.date(i);\n            else if (i.search(/W|w/) != -1)\n                dateString += this.week(i);\n            else if (i.search(/H|h|k/) != -1)\n                dateString += this.hour(i);\n            else if (i.search(/m/) != -1)\n                dateString += this.minute(i);\n            else if (i.search(/s/) != -1)\n                dateString += this.second(i);\n            else if (i.search(/c|C/) != -1)\n                dateString += this.millisecond(i);\n            else if (i.search(/t/) != -1)\n                dateString += this.timestamp();\n            else if (i.search(/a|A/) != -1)\n                dateString += Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"TIMETYPE\"])(this.d.hour, i);\n            format = format.substr(format.indexOf(i) + i.length);\n        }\n        return String(dateString);\n    }\n\n    /**\n     * get or set year\n     * @param {Null|Number|String} [format=jYYYY] - a number for set the year or a format for formatting\n     * @returns {PersianDate|String|Number} if set the year, returns class,\n     * else returns a number or string from year\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.year = function (format = 'jYYYY') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            this.d.year = +format;\n            if (!this.isValidDate()) {\n                return showError('تاریخ نامعتبر');\n            }\n            return this;\n        } else {\n            if (format == 'jYYYY' || format == 'jy')\n                return this.d.year;\n            if (format == 'jYY')\n                return String(this.d.year).slice(-2);\n            let gDateYear = jtg(...this.toArray()).getFullYear();\n            if (format == 'YYYY' || format == 'y')\n                return gDateYear;\n            if (format == 'YY')\n                return String(gDateYear).slice(-2);\n            return this.d.year;\n        }\n\n    }\n\n    /**\n     * get or set month\n     * @param {Null|Number|String} [format=jM] - a number for set the month or a format for formatting\n     * @returns {PersianDate|String|Number} if set the month, returns class,\n     * else returns a number or string from month\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.month = function (format = 'jM') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 1 || format > 12)\n                return showError('تاریخ نامعتبر');\n            this.d.month = +format;\n            while (!this.isValidDate()) {\n                this.subtractDay(1, false);\n            }\n            return this;\n        } else {\n            if (format == 'jMM')\n                return addPrefix(this.d.month, 2)\n            if (format == 'jM')\n                return this.d.month;\n            if (format == 'jMMMM' || format == 'jMMM')\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"MONTHS\"]['fa'][this.d.month];\n            if (format == 'jMo')\n                return ordinalNumber(this.d.month);\n            if (format == 'jMO')\n                return ordinalNumber(this.d.month, 'fa', 2);\n            let gDateMonth = jtg(...this.toArray()).getMonth() + 1;\n            if (format == 'M')\n                return gDateMonth;\n            if (format == 'MM')\n                return addPrefix(gDateMonth, 2);\n            if (format == 'MMMM')\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"MONTHS\"]['en'][gDateMonth];\n            if (format == 'Mo' || format == 'MO')\n                return ordinalNumber(gDateMonth, 'en');\n            if (format == 'MMM')\n                return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"MONTHS\"]['en'][gDateMonth].slice(0, 3);\n            return this.d.month;\n        }\n\n    }\n\n    /**\n     * get or set day in month\n     * @param {Null|Number|String} [format=jD] - a number for set the day in month or a format for formatting\n     * @returns {PersianDate|String|Number} if set the day, returns class,\n     * else returns a number or string from day\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.date = function (format = 'jD') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 1 || format > 31)\n                return showError('تاریخ نامعتبر');\n            this.d.date = +format;\n            while (!this.isValidDate()) {\n                this.subtractDay(1, false);\n            }\n            return this;\n        } else {\n            //---------- Day of Month ----------//\n            if (format == 'jDD')\n                return addPrefix(this.d.date, 2);\n            if (format == 'jD')\n                return this.d.date;\n            if (format == 'jDo')\n                return ordinalNumber(this.d.date);\n            if (format == 'jDO')\n                return ordinalNumber(this.d.date, 'fa', 2);\n            //---------- Day of Week ----------//\n            let gDate = jtg(...this.toArray());\n            if (format == 'jdddd' || format == 'jddd')\n                return getDayLabel(gDate);\n            if (format == 'jdd')\n                return getDayLabel(gDate).slice(0, 1);\n            let dayOfWeek = getDayOfWeek(gDate);\n            if (format == 'jdo')\n                return ordinalNumber(dayOfWeek);\n            if (format == 'jdO')\n                return ordinalNumber(dayOfWeek, 'fa', 2);\n            if (format == 'jd')\n                return getDayOfWeek(gDate, 'fa', 'array');\n            if (format == 'jde')\n                return dayOfWeek;\n            //---------- Day of Year ----------//\n            let dayOfYear = getDayOfJYear(this.month(), this.date());\n            if (format == 'jDDDD')\n                return addPrefix(dayOfYear, 3);\n            if (format == 'jDDD')\n                return dayOfYear;\n            if (format == 'jDDDo')\n                return ordinalNumber(dayOfYear);\n            if (format == 'jDDDO')\n                return ordinalNumber(dayOfYear, 'fa', 2);\n            //---------- Day of Month ----------//\n            if (format == 'DD')\n                return addPrefix(gDate.getDate(), 2);\n            if (format == 'D')\n                return gDate.getDate();\n            if (format == 'Do' || format == 'DO')\n                return ordinalNumber(gDate.getDate(), 'en');\n            //---------- Day of Week ----------//\n            if (format == 'dddd')\n                return getDayLabel(gDate, 'en');\n            if (format == 'ddd')\n                return getDayLabel(gDate, 'en').slice(0, 3);\n            if (format == 'dd')\n                return getDayLabel(gDate, 'en').slice(0, 2);\n            dayOfWeek = getDayOfWeek(gDate, 'en');\n            if (format == 'do' || format == 'dO')\n                return ordinalNumber(dayOfWeek, 'en');\n            if (format == 'd')\n                return getDayOfWeek(gDate, 'en', 'array');\n            if (format == 'de')\n                return dayOfWeek;\n            dayOfYear = getDayOfGYear(gDate);\n            //---------- Day of Year ----------//\n            if (format == 'DDDD')\n                return addPrefix(dayOfYear, 3);\n            if (format == 'DDD')\n                return dayOfYear;\n            if (format == 'DDDo' || format == 'DDDO')\n                return ordinalNumber(dayOfYear, 'en');\n            return this.d.date;\n        }\n\n    }\n\n    /**\n     * get or set quarter\n     * @param {Null|Number|String} [format=jQ] - a number for set the quarter or a format for formatting\n     * @returns {PersianDate|String|Number} if set the quarter, returns class,\n     * else returns a number or string from quarter\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.quarter = function (format = 'jQ') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 1 || format > 4)\n                return showError('تاریخ نامعتبر');\n            this.d.month = +format * 3 - 2;\n            while (!this.isValidDate()) {\n                this.subtractDay(1, false);\n            }\n            return this;\n        } else {\n            let quarter = Math.ceil(this.d.month / 3);\n            if (format == 'jQ')\n                return quarter;\n            if (format == 'jQo')\n                return ordinalNumber(quarter);\n            if (format == 'jQO')\n                return ordinalNumber(quarter, 'fa', 2);\n            quarter = Math.ceil((jtg(...this.toArray()).getMonth() + 1) / 3);\n            if (format == 'Q')\n                return quarter;\n            if (format == 'Qo' || format == 'QO')\n                return ordinalNumber(quarter, 'en');\n            return quarter;\n        }\n    }\n\n    /**\n     * get or set week\n     * @param {Null|Number|String} [format=jw] - a number for set the week or a format for formatting\n     * @returns {PersianDate|String|Number} if set the week, returns class,\n     * else returns a number or string from week\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.week = function (format = 'jw') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 1 || format > 53)\n                return showError('تاریخ نامعتبر');\n            let gDateFirstOfYear = jtg(this.d.year);\n            let firstOfYear = getDayOfWeek(gDateFirstOfYear, 'fa', 'array');// day of first date of year --> 2020-1-1 -> Saturday -> 6\n            let dayOfYear = +format * 7 - firstOfYear; // number of day that past from this week\n            let month = 1;\n            while (this.getDaysInMonth(this.d.year, month) <= dayOfYear) {\n                dayOfYear -= this.getDaysInMonth(this.d.year, month);\n                month++;\n            }\n            this.d.month = dayOfYear == 0 ? --month : month;\n            if (dayOfYear <= 6 && month == 1)\n                this.d.date = 1;\n            else {\n                let gDate = jtg(...this.toArray());\n                this.d.date = dayOfYear || this.getDaysInMonth(this.d.year, month);\n                dayOfYear = 6 - getDayOfWeek(gDate, 'fa', 'array');\n                this.subtractDay(dayOfYear, false);\n            }\n            ;\n            while (!this.isValidDate()) {\n                this.subtractDay(1, false);\n            }\n            return this;\n        } else {\n            let weekOfYear = getWeekOfJYear(this.year(), this.month(), this.date());\n            if (format == 'jw' || format == 'jW')\n                return weekOfYear;\n            if (format == 'jww' || format == 'jWW')\n                return addPrefix(weekOfYear, 2);\n            if (format == 'jwo' || format == 'jWo')\n                return ordinalNumber(weekOfYear);\n            if (format == 'jwO' || format == 'jWO')\n                return ordinalNumber(weekOfYear, 'fa', 2);\n            weekOfYear = getWeekOfGYear(this.year('YYYY'), this.month('M'), this.date('D'));\n            if (format == 'w' || format == 'W')\n                return weekOfYear;\n            if (format == 'ww' || format == 'WW')\n                return addPrefix(weekOfYear, 2);\n            if (format == 'wo' || format == 'Wo' || format == 'wO' || format == 'WO')\n                return ordinalNumber(weekOfYear, 'en');\n            return weekOfYear;\n        }\n    }\n\n    /**\n     * get or set hour\n     * @param {Null|Number|String} [format=H] - a number for set the hour or a format for formatting\n     * @returns {PersianDate|String|Number} if set the hour, returns class,\n     * else returns a number or string from hour\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.hour = function (format = 'H') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 23)\n                return showError('تاریخ نامعتبر');\n            this.d.hour = +format;\n            while (!this.isValidTime())\n                this.subtractMillisecond(1, false);\n            return this;\n        } else {\n            let hour = this.d.hour;\n            if (format == 'H')\n                return hour;\n            if (format == 'HH')\n                return addPrefix(hour, 2);\n            if (format == 'k')\n                return hour || 24;\n            if (format == 'kk')\n                return addPrefix(hour || 24, 2);\n            hour = hour > 12 ? hour - 12 : hour;\n            if (format == 'h')\n                return hour;\n            if (format == 'hh')\n                return addPrefix(hour, 2);\n            return hour;\n        }\n    }\n\n    /**\n     * get or set minute\n     * @param {Null|Number|String} [format=m] - a number for set the minute or a format for formatting\n     * @returns {PersianDate|String|Number} if set the minute, returns class,\n     * else returns a number or string from minute\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.minute = function (format = 'm') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 59)\n                return showError('تاریخ نامعتبر');\n            this.d.minute = +format;\n            while (!this.isValidTime())\n                this.subtractMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 'm')\n                return this.d.minute;\n            if (format == 'mm')\n                return addPrefix(this.d.minute, 2);\n            return this.d.minute;\n        }\n    }\n\n    /**\n     * get or set second\n     * @param {Null|Number|String} [format=s] - a number for set the second or a format for formatting\n     * @returns {PersianDate|String|Number} if set the second, returns class,\n     * else returns a number or string from second\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.second = function (format = 's') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 59)\n                return showError('تاریخ نامعتبر');\n            this.d.second = +format;\n            while (!this.isValidTime())\n                this.subtractMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 's')\n                return this.d.second;\n            if (format == 'ss')\n                return addPrefix(this.d.second, 2);\n            return this.d.second;\n        }\n    }\n\n    /**\n     * get or set millisecond\n     * @param {Null|Number|String} [format=c] - a number for set the millisecond or a format for formatting\n     * @returns {PersianDate|String|Number} if set the millisecond, returns class,\n     * else returns a number or string from millisecond\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.millisecond = function (format = 'c') {\n        if (this.error)\n            return this;\n        format = String(format).trim();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"REGEX\"]['isNumeric'].test(format)) {\n            if (format < 0 || format > 999)\n                return showError('تاریخ نامعتبر');\n            this.d.millisecond = +format;\n            while (!this.isValidTime())\n                this.subtractMillisecond(1, false);\n            return this;\n        } else {\n            if (format == 'CCC' || format == 'c')\n                return this.d.millisecond;\n            if (format == 'CCCC')\n                return addPrefix(this.d.millisecond, 3);\n            return this.d.millisecond;\n        }\n    }\n\n    /**\n     * get timestamp or set date from timestamp\n     * @param {Null|Number|String} value - a number for set the millisecond\n     * @returns {PersianDate|Number} if set the timestamp, returns class,\n     * else returns timestamp (number)\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.timestamp = function (value) {\n        if (this.error)\n            return this;\n        if (value) {\n            return this.setDate(+String(value).trim());\n        } else {\n            return jtg(...this.toArray()).getTime();\n        }\n    }\n\n    ////////////////////--- Version 1.1.0 ---////////////////////\n\n    /**\n     * get clone of this date\n     * @since 1.1.0\n     * @returns {PersianDate} returns the clone of this date\n     */\n    PersianDate.prototype.clone = function () {\n        return (new PersianDate()).parse(this.d);\n    }\n\n    /**\n     * checks this date is the same to another date\n     * @since 1.1.0\n     * @param {PersianDate|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isSame = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(year, month, day, hour, minute, second, millisecond)\n        year = +year || 0;\n        month = +month || this.d.month;\n        day = +day || this.d.date;\n        hour = +hour || this.d.hour;\n        minute = +minute || this.d.minute;\n        second = +second || this.d.second;\n        millisecond = +millisecond || this.d.millisecond;\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return jtg(year, month, day, hour, minute, second, millisecond).getTime() == this.timestamp();\n        return false;\n    }\n\n    ////////////////////--- Version 1.2.0 ---////////////////////\n\n    /**\n     * convert String or Array or Object or PersianDate to Array\n     * @since 1.2.0\n     * @param {String|Array|Object|Number} year - this param must be string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {Array} array includes year, month, date, hour, minute, second, millinsecond\n     */\n    const typesToArray = function (year, month, day, hour, minute, second, millisecond) {\n        if (year instanceof PersianDate) // if type of year is PersianDate\n            year = year.toObject();\n        if (typeof year == 'string' && year.search('\\\\/| |-|\\\\.|,|:') != -1) // if type of year is String\n            return year.split(/[/ -.,:\\\\]/);\n        else if (!year) // if year not defined\n            return gtj(); // return now\n        else if (Object.prototype.toString.call(year) === '[object Array]') // if type of year is Array\n            return year;\n        else if (Object.prototype.toString.call(year) === '[object Object]') // if type of year is Object\n            return [\n                year.y || year.year || year.years,\n                year.M || year.month || year.months || 1,\n                year.d || year.day || year.days || year.date || 1,\n                year.h || year.hour || year.hours || 0,\n                year.m || year.minute || year.minutes || 0,\n                year.s || year.second || year.seconds || 0,\n                year.ms || year.millisecond || year.milliseconds || 0,\n            ];\n        return [year, month, day, hour, minute, second, millisecond];\n    }\n\n    /**\n     * convert the date to the unique number\n     * @since 1.2.0\n     * @param {Array} date - date that's want to number\n     * @returns {Number} uniqe number\n     */\n    const dateToNumber = (date) => {\n        let year = +date[0] || 0;\n        let month = +date[1] || 1;\n        let day = +date[2] || 1;\n        let hour = +date[3] || 0;\n        let minute = +date[4] || 0;\n        let second = +date[5] || 0;\n        let millisecond = +date[6] || 0;\n\n        return (((((year * 12 + month) * 31 + day) * 24 + hour) * 60 + minute) * 60 + second) * 1000 + millisecond;\n    }\n\n    /**\n     * checks this date is before the another date\n     * @since 1.2.0\n     * @param {PersianDate|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isBefore = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(year, month, day, hour, minute, second, millisecond)\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return jtg(year, month, day, hour, minute, second, millisecond).getTime() > this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is after the another date\n     * @since 1.2.0\n     * @param {PersianDate|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isAfter = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(year, month, day, hour, minute, second, millisecond)\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return jtg(year, month, day, hour, minute, second, millisecond).getTime() < this.timestamp();\n        return false;\n    }\n\n    ////////////////////--- Version 1.3.0 ---////////////////////\n\n    /**\n     * return the object of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return Object of date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toObject = function () {\n        if (this.error)\n            return this;\n        if (!arguments.length) {\n            return this.d;\n        }\n        let formats = typesToArray(...arguments);\n        return {\n            year: this.year(formats[0]),\n            month: this.month(formats[1]),\n            date: this.date(formats[2]),\n            hour: this.hour(formats[3]),\n            minute: this.minute(formats[4]),\n            second: this.second(formats[5]),\n            millisecond: this.millisecond(formats[6]),\n        }\n    }\n\n    /**\n     * checks date is a native js Date object\n     * @since 1.3.0\n     * @param {*} date date that must be checked\n     * @returns {Boolean} if date is a native js Date, return true\n     */\n    PersianDate.prototype.isDate = function (date) {\n        return date instanceof Date;\n    }\n\n    /**\n     * checks date is a PersianDate object\n     * @since 1.3.0\n     * @param {*} date date that must be checked\n     * @returns {Boolean} if date is a PersianDate, return true\n     */\n    PersianDate.prototype.isPersianDate = function (date) {\n        return date instanceof PersianDate;\n    }\n\n    /**\n         * checks this date is same or before the another date\n         * @since 1.2.0\n         * @param {PersianDate|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n         * @param {String|Number} year.y - year of date\n         * @param {Null|String|Number} year.year - year of date\n         * @param {Null|String|Number} year.years - year of date\n         * @param {Null|String|Number} year.M - month of date\n         * @param {Null|String|Number} year.month - month of date\n         * @param {Null|String|Number} year.months - month of date\n         * @param {Null|String|Number} year.d - day of date\n         * @param {Null|String|Number} year.day - day of date\n         * @param {Null|String|Number} year.days - day of date\n         * @param {Null|String|Number} year.date - day of date\n         * @param {Null|String|Number} year.h - hour of date\n         * @param {Null|String|Number} year.hour - hour of date\n         * @param {Null|String|Number} year.hours - hour of date\n         * @param {Null|String|Number} year.m - minute of date\n         * @param {Null|String|Number} year.minute - minute of date\n         * @param {Null|String|Number} year.minutes - minute of date\n         * @param {Null|String|Number} year.s - second of date\n         * @param {Null|String|Number} year.second - second of date\n         * @param {Null|String|Number} year.seconds - second of date\n         * @param {Null|String|Number} year.ms - millisecond of date\n         * @param {Null|String|Number} year.millisecond - millisecond of date\n         * @param {Null|String|Number} year.milliseconds - millisecond of date\n         * @param {Null|Number|String} month month of date\n         * @param {Null|Number|String} day day of date\n         * @param {Null|Number|String} hour hour of date\n         * @param {Null|Number|String} minute minute of date\n         * @param {Null|Number|String} second second of date\n         * @param {Null|Number|String} millisecond millisecond of date\n         * @returns {PersianDate|‌Boolean} if date valid, return true of false\n         */\n    PersianDate.prototype.isSameOrBefore = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(year, month, day, hour, minute, second, millisecond)\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return jtg(year, month, day, hour, minute, second, millisecond).getTime() >= this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is same or after the another date\n     * @since 1.2.0\n     * @param {PersianDate|String|Array|Object|Number} year - this param must be PersianDate or string or array or Object from date or year\n     * @param {String|Number} year.y - year of date\n     * @param {Null|String|Number} year.year - year of date\n     * @param {Null|String|Number} year.years - year of date\n     * @param {Null|String|Number} year.M - month of date\n     * @param {Null|String|Number} year.month - month of date\n     * @param {Null|String|Number} year.months - month of date\n     * @param {Null|String|Number} year.d - day of date\n     * @param {Null|String|Number} year.day - day of date\n     * @param {Null|String|Number} year.days - day of date\n     * @param {Null|String|Number} year.date - day of date\n     * @param {Null|String|Number} year.h - hour of date\n     * @param {Null|String|Number} year.hour - hour of date\n     * @param {Null|String|Number} year.hours - hour of date\n     * @param {Null|String|Number} year.m - minute of date\n     * @param {Null|String|Number} year.minute - minute of date\n     * @param {Null|String|Number} year.minutes - minute of date\n     * @param {Null|String|Number} year.s - second of date\n     * @param {Null|String|Number} year.second - second of date\n     * @param {Null|String|Number} year.seconds - second of date\n     * @param {Null|String|Number} year.ms - millisecond of date\n     * @param {Null|String|Number} year.millisecond - millisecond of date\n     * @param {Null|String|Number} year.milliseconds - millisecond of date\n     * @param {Null|Number|String} month month of date\n     * @param {Null|Number|String} day day of date\n     * @param {Null|Number|String} hour hour of date\n     * @param {Null|Number|String} minute minute of date\n     * @param {Null|Number|String} second second of date\n     * @param {Null|Number|String} millisecond millisecond of date\n     * @returns {PersianDate|‌Boolean} if date valid, return true of false\n     */\n    PersianDate.prototype.isSameOrAfter = function (year, month, day, hour, minute, second, millisecond) {\n        if (this.error)\n            return false;\n        [year, month, day, hour, minute, second, millisecond] = typesToArray(year, month, day, hour, minute, second, millisecond)\n\n\n        if (this.isValid(year, month, day, hour, minute, second, millisecond))\n            return jtg(year, month, day, hour, minute, second, millisecond).getTime() <= this.timestamp();\n        return false;\n    }\n\n    /**\n     * checks this date is between the another dates\n     * @since 1.3.0\n     * @param {PersianDate|String|Array|Object} from - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} from.y - year of date\n     * @param {Null|String|Number} from.year - year of date\n     * @param {Null|String|Number} from.years - year of date\n     * @param {Null|String|Number} from.M - month of date\n     * @param {Null|String|Number} from.month - month of date\n     * @param {Null|String|Number} from.months - month of date\n     * @param {Null|String|Number} from.d - day of date\n     * @param {Null|String|Number} from.day - day of date\n     * @param {Null|String|Number} from.days - day of date\n     * @param {Null|String|Number} from.date - day of date\n     * @param {Null|String|Number} from.h - hour of date\n     * @param {Null|String|Number} from.hour - hour of date\n     * @param {Null|String|Number} from.hours - hour of date\n     * @param {Null|String|Number} from.m - minute of date\n     * @param {Null|String|Number} from.minute - minute of date\n     * @param {Null|String|Number} from.minutes - minute of date\n     * @param {Null|String|Number} from.s - second of date\n     * @param {Null|String|Number} from.second - second of date\n     * @param {Null|String|Number} from.seconds - second of date\n     * @param {Null|String|Number} from.ms - millisecond of date\n     * @param {Null|String|Number} from.millisecond - millisecond of date\n     * @param {Null|String|Number} from.milliseconds - millisecond of date\n     * @param {PersianDate|String|Array|Object} to - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} to.y - year of date\n     * @param {Null|String|Number} to.year - year of date\n     * @param {Null|String|Number} to.years - year of date\n     * @param {Null|String|Number} to.M - month of date\n     * @param {Null|String|Number} to.month - month of date\n     * @param {Null|String|Number} to.months - month of date\n     * @param {Null|String|Number} to.d - day of date\n     * @param {Null|String|Number} to.day - day of date\n     * @param {Null|String|Number} to.days - day of date\n     * @param {Null|String|Number} to.date - day of date\n     * @param {Null|String|Number} to.h - hour of date\n     * @param {Null|String|Number} to.hour - hour of date\n     * @param {Null|String|Number} to.hours - hour of date\n     * @param {Null|String|Number} to.m - minute of date\n     * @param {Null|String|Number} to.minute - minute of date\n     * @param {Null|String|Number} to.minutes - minute of date\n     * @param {Null|String|Number} to.s - second of date\n     * @param {Null|String|Number} to.second - second of date\n     * @param {Null|String|Number} to.seconds - second of date\n     * @param {Null|String|Number} to.ms - millisecond of date\n     * @param {Null|String|Number} to.millisecond - millisecond of date\n     * @param {Null|String|Number} to.milliseconds - millisecond of date\n     * @param {String} method - determines that consider the dates themselves\n     * @returns {PersianDate|‌Boolean} if date valid, return true or false\n     */\n    PersianDate.prototype.isBetween = function (from, to, method = '()') {\n        if (this.error)\n            return false;\n        from = typesToArray(from);\n        from = [\n            from[0] || this.year(),\n            from[1] || this.month(),\n            from[2] || this.date(),\n            from[3] || this.hour(),\n            from[4] || this.minute(),\n            from[5] || this.second(),\n            from[6] || this.millisecond()\n        ]\n        to = typesToArray(to);\n        to = [\n            to[0] || this.year(),\n            to[1] || this.month(),\n            to[2] || this.date(),\n            to[3] || this.hour(),\n            to[4] || this.minute(),\n            to[5] || this.second(),\n            to[6] || this.millisecond()\n        ]\n\n        if (!(this.isValid(...from) && this.isValid(...to)))\n            return false;\n\n        return (method[0] === '[' ? this.isSameOrAfter(from) : this.isAfter(from)) &&\n            (method[1] === ']' ? this.isSameOrBefore(to) : this.isBefore(to));\n    }\n\n    ////////////////////--- Version 1.4.0 ---////////////////////\n\n    /**\n    * returns minimum date in arguments that passed\n    * @since 1.4.0\n    * @param {...String|Array|Object} date - this parameters must be string or array or Object from date;\n    * @param {String} date.y - year of date\n    * @param {Null|String} date.year - year of date\n    * @param {Null|String} date.years - year of date\n    * @param {Null|String} date.M - month of date\n    * @param {Null|String} date.month - month of date\n    * @param {Null|String} date.months - month of date\n    * @param {Null|String} date.d - day of date\n    * @param {Null|String} date.day - day of date\n    * @param {Null|String} date.days - day of date\n    * @param {Null|String} date.date - day of date\n    * @param {Null|String} date.h - hour of date\n    * @param {Null|String} date.hour - hour of date\n    * @param {Null|String} date.hours - hour of date\n    * @param {Null|String} date.m - minute of date\n    * @param {Null|String} date.minute - minute of date\n    * @param {Null|String} date.minutes - minute of date\n    * @param {Null|String} date.s - second of date\n    * @param {Null|String} date.second - second of date\n    * @param {Null|String} date.seconds - second of date\n    * @param {Null|String} date.ms - millisecond of date\n    * @param {Null|String} date.millisecond - millisecond of date\n    * @param {Null|String} date.milliseconds - millisecond of date\n    * @returns {*} return minimum date\n    * @throws {false} if parameters not send or parameters is invalid, return false\n    */\n    PersianDate.prototype.min = function () {\n        if (!arguments.length) {\n            return false;\n        }\n        let args = Object.values(arguments).concat()\n        let argsNumber = args.map((date) => {\n            date = typesToArray(date);\n            if (this.isValid(...date))\n                return jtg(...date).getTime()\n            return false\n        });\n        if (argsNumber.indexOf(false) != -1)\n            return false;\n        return args[argsNumber.indexOf(Math.min(...argsNumber))];\n    }\n\n    /**\n    * returns maximum date in arguments that passed\n    * @since 1.4.0\n    * @param {...String|Array|Object} date - this parameters must be string or array or Object from date;\n    * @param {String} date.y - year of date\n    * @param {Null|String} date.year - year of date\n    * @param {Null|String} date.years - year of date\n    * @param {Null|String} date.M - month of date\n    * @param {Null|String} date.month - month of date\n    * @param {Null|String} date.months - month of date\n    * @param {Null|String} date.d - day of date\n    * @param {Null|String} date.day - day of date\n    * @param {Null|String} date.days - day of date\n    * @param {Null|String} date.date - day of date\n    * @param {Null|String} date.h - hour of date\n    * @param {Null|String} date.hour - hour of date\n    * @param {Null|String} date.hours - hour of date\n    * @param {Null|String} date.m - minute of date\n    * @param {Null|String} date.minute - minute of date\n    * @param {Null|String} date.minutes - minute of date\n    * @param {Null|String} date.s - second of date\n    * @param {Null|String} date.second - second of date\n    * @param {Null|String} date.seconds - second of date\n    * @param {Null|String} date.ms - millisecond of date\n    * @param {Null|String} date.millisecond - millisecond of date\n    * @param {Null|String} date.milliseconds - millisecond of date\n    * @returns {*} return maximum date\n    * @throws {false} if parameters not send or parameters is invalid, return false\n    */\n    PersianDate.prototype.max = function () {\n        if (!arguments.length) {\n            return false;\n        }\n        let args = Object.values(arguments).flat()\n        let argsNumber = args.map((date) => {\n            date = typesToArray(date);\n            if (this.isValid(...date))\n                return jtg(...date).getTime()\n            return false\n        });\n        if (argsNumber.indexOf(false) != -1)\n            return false;\n        return args[argsNumber.indexOf(Math.max(...argsNumber))];\n    }\n\n    /**\n     * get the diffrence between two date\n     * @since 1.4.0\n     * @param {PersianDate|String|Array|Object} date - this param must be PersianDate or string or array or Object from date\n     * @param {String|Number} date.y - year of date\n     * @param {Null|String|Number} date.year - year of date\n     * @param {Null|String|Number} date.years - year of date\n     * @param {Null|String|Number} date.M - month of date\n     * @param {Null|String|Number} date.month - month of date\n     * @param {Null|String|Number} date.months - month of date\n     * @param {Null|String|Number} date.d - day of date\n     * @param {Null|String|Number} date.day - day of date\n     * @param {Null|String|Number} date.days - day of date\n     * @param {Null|String|Number} date.date - day of date\n     * @param {Null|String|Number} date.h - hour of date\n     * @param {Null|String|Number} date.hour - hour of date\n     * @param {Null|String|Number} date.hours - hour of date\n     * @param {Null|String|Number} date.m - minute of date\n     * @param {Null|String|Number} date.minute - minute of date\n     * @param {Null|String|Number} date.minutes - minute of date\n     * @param {Null|String|Number} date.s - second of date\n     * @param {Null|String|Number} date.second - second of date\n     * @param {Null|String|Number} date.seconds - second of date\n     * @param {Null|String|Number} date.ms - millisecond of date\n     * @param {Null|String|Number} date.millisecond - millisecond of date\n     * @param {Null|String|Number} date.milliseconds - millisecond of date\n     * @param {String} unit - the unit of the measurment\n     * @returns {Number} diffrence\n     * @throws {Boolean} if dates invalid, returns false\n     */\n    PersianDate.prototype.diff = function (date, unit, asFloat = false) {\n        //FIXME:\n        if (this.error)\n            return false;\n        date = typesToArray(date)\n        let result = this.timestamp() - jtg(...date).getTime();\n        switch (unit) {\n            case 'y':\n            case 'year':\n            case 'years':\n                result = Math.ceil(result / 1000 / 60 / 60 / 24) / (this.isLeapYear(date[0]) ? 366 : 365)\n                break;\n            case 'M':\n            case 'month':\n            case 'months':\n                result = Math.ceil(result / 1000 / 60 / 60 / 24) / (this.getDaysInMonth(date[0], date[1]))\n                break;\n            case 'd':\n            case 'date':\n            case 'day':\n            case 'days':\n                result = Math.ceil(result / 1000 / 60 / 60 / 24)\n                break;\n            case 'h':\n            case 'hour':\n            case 'hours':\n                result = result / 1000 / 60 / 60\n                break;\n            case 'm':\n            case 'minute':\n            case 'minutes':\n                result = result / 1000 / 60\n                break;\n            case 's':\n            case 'second':\n            case 'seconds':\n                result = result / 1000\n                break;\n            case 'ms':\n            case 'millisecond':\n            case 'milliseconds':\n            default:\n                result = result\n        }\n        return asFloat ? result : Math.floor(result)\n    }\n\n    ////////////////////--- Version 1.5.0 ---////////////////////\n\n    /**\n     * return the object of PersianDate\n     * @since 1.3.0\n     * @param {String|Array|Object|Number} yearForamt - this param must be string or array or Object from date or year\n     * @param {String|Number} yearForamt.y - year format\n     * @param {Null|String|Number} yearForamt.year - year format\n     * @param {Null|String|Number} yearForamt.years - year format\n     * @param {Null|String|Number} yearForamt.M - month format\n     * @param {Null|String|Number} yearForamt.month - month format\n     * @param {Null|String|Number} yearForamt.months - month format\n     * @param {Null|String|Number} yearForamt.d - day format\n     * @param {Null|String|Number} yearForamt.day - day format\n     * @param {Null|String|Number} yearForamt.days - day format\n     * @param {Null|String|Number} yearForamt.date - day format\n     * @param {Null|String|Number} yearForamt.h - hour format\n     * @param {Null|String|Number} yearForamt.hour - hour format\n     * @param {Null|String|Number} yearForamt.hours - hour format\n     * @param {Null|String|Number} yearForamt.m - minute format\n     * @param {Null|String|Number} yearForamt.minute - minute format\n     * @param {Null|String|Number} yearForamt.minutes - minute format\n     * @param {Null|String|Number} yearForamt.s - second format\n     * @param {Null|String|Number} yearForamt.second - second format\n     * @param {Null|String|Number} yearForamt.seconds - second format\n     * @param {Null|String|Number} yearForamt.ms - millisecond format\n     * @param {Null|String|Number} yearForamt.millisecond - millisecond format\n     * @param {Null|String|Number} yearForamt.milliseconds - millisecond format\n     * @param {Null|Number|String} monthFormat month format\n     * @param {Null|Number|String} dayFormat day format\n     * @param {Null|Number|String} hourFormat hour format\n     * @param {Null|Number|String} minuteFormat minute format\n     * @param {Null|Number|String} secondFormat second format\n     * @param {Null|Number|String} millisecondFormat millisecond format\n     * @returns {Object} if date valid, return Object of date\n     * @throws {PersianDate} if date invalid return class with error property with error property\n     */\n    PersianDate.prototype.toArray = function () {\n        if (this.error)\n            return this;\n        if (!arguments.length) {\n            return Object.values(this.d);\n        }\n        let formats = typesToArray(...arguments);\n        return [\n            this.year(formats[0]),\n            this.month(formats[1]),\n            this.date(formats[2]),\n            this.hour(formats[3]),\n            this.minute(formats[4]),\n            this.second(formats[5]),\n            this.millisecond(formats[6])\n        ]\n    }\n\n    //TODO: add feature that to use text in toString for v2\n    //TODO: add locale for v2\n    //TODO: add ago function (4 years ago) for v2\n    //TODO: thats function not needed to date without create PersianDate must working for v2\n    //TODO: add versioning in doc for new functions\n    //TODO: git rm -rf --cached .\n\n\n    if (arguments.length)\n        this.setDate(...arguments);\n    else\n        this.now();\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (PersianDate);\n\n////////////////////--- Thank You For Your Attention ---////////////////////\n////////////////////------ I'm Will Be Very Happy ------////////////////////\n////////////////////---- To Get To Know You Better! ----////////////////////\n////////////////////- Email: Alibeikialireza@gmail.com -////////////////////\n////////////////////--------- Have A Good Day  ---------////////////////////\n\n\n//# sourceURL=webpack://PersianDate/./src/PersianDate.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: ORDINALNUMBERS, MONTHS, DAYS, TIMETYPE, REGEX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ORDINALNUMBERS\", function() { return ORDINALNUMBERS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MONTHS\", function() { return MONTHS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DAYS\", function() { return DAYS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TIMETYPE\", function() { return TIMETYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REGEX\", function() { return REGEX; });\nconst MONTHS = {\n    fa: {\n        1: \"فروردین\",\n        2: \"اردیبهشت\",\n        3: \"خرداد\",\n        4: \"تیر\",\n        5: \"مرداد\",\n        6: \"شهریور\",\n        7: \"مهر\",\n        8: \"آبان\",\n        9: \"آذر\",\n        10: \"دی\",\n        11: \"بهمن\",\n        12: \"اسفند\",\n    },\n    en: {\n        1: \"January\",\n        2: \"February\",\n        3: \"March\",\n        4: \"April\",\n        5: \"May\",\n        6: \"June\",\n        7: \"July\",\n        8: \"August\",\n        9: \"September\",\n        10: \"October\",\n        11: \"November\",\n        12: \"December\",\n    }\n};\n\nconst ORDINALNUMBERS = {\n    fa1: {\n        1: \"اول\",\n        2: \"دوم\",\n        3: \"سوم\",\n        4: \"چهارم\",\n        5: \"پنجم\",\n        6: \"ششم\",\n        7: \"هفتم\",\n        8: \"هشتم\",\n        9: \"نهم\",\n        10: \"دهم\",\n        11: \"یازدهم\",\n        12: \"دوازدهم\",\n        13: \"سیزدهم\",\n        14: \"چهاردهم\",\n        15: \"پانزدهم\",\n        16: \"شانزدهم\",\n        17: \"هفدهم\",\n        18: \"هجدهم\",\n        19: \"نوزدهم\",\n        20: \"بیستم\",\n        21: \"بیست و یکم\",\n        22: \"بیست و دوم\",\n        23: \"بیست و سوم\",\n        24: \"بیست و چهارم\",\n        25: \"بیست و پنجم\",\n        26: \"بیست و ششم\",\n        27: \"بیست و هفتم\",\n        28: \"بیست و هشتم\",\n        29: \"بیست و نهم\",\n        30: \"سی‌ام\",\n        31: \"سی‌ و یکم\",\n        32: \"سی‌‌ و دوم\",\n        33: \"سی‌‌ و سوم\",\n        34: \"سی‌‌ و چهارم\",\n        35: \"سی‌‌ و پنجم\",\n        36: \"سی‌‌ و ششم\",\n        37: \"سی‌‌ و هفتم\",\n        38: \"سی‌‌ و هشتم\",\n        39: \"سی‌‌ و نهم\",\n        40: \"چهلم\",\n        41: \"چهل و یکم\",\n        42: \"چهل و دوم\",\n        43: \"چهل و سوم\",\n        44: \"چهل و چهارم\",\n        45: \"چهل و پنجم\",\n        46: \"چهل و ششم\",\n        47: \"چهل و هفتم\",\n        48: \"چهل و هشتم\",\n        49: \"چهل و نهم\",\n        50: \"پنجاهم\",\n        51: \"پنجاه و یکم\",\n        52: \"پنجاه و دوم\",\n        53: \"پنجاه و سوم\",\n        54: \"پنجاه و چهارم\",\n        55: \"پنجاه و پنجم\",\n        56: \"پنجاه و ششم\",\n        57: \"پنجاه و هفتم\",\n        58: \"پنجاه و هشتم\",\n        59: \"پنجاه و نهم\",\n        60: \"شصتم\",\n        61: \"شصت و یکم\",\n        62: \"شصت و دوم\",\n        63: \"شصت و سوم\",\n        64: \"شصت و چهارم\",\n        65: \"شصت و پنجم\",\n        66: \"شصت و ششم\",\n        67: \"شصت و هفتم\",\n        68: \"شصت و هشتم\",\n        69: \"شصت و نهم\",\n        70: \"هفتادم\",\n        71: \"هفتاد و یکم\",\n        72: \"هفتاد و دوم\",\n        73: \"هفتاد و سوم\",\n        74: \"هفتاد و چهارم\",\n        75: \"هفتاد و پنجم\",\n        76: \"هفتاد و ششم\",\n        77: \"هفتاد و هفتم\",\n        78: \"هفتاد و هشتم\",\n        79: \"هفتاد و نهم\",\n        80: \"هشتادم\",\n        81: \"هشتاد و یکم\",\n        82: \"هشتاد و دوم\",\n        83: \"هشتاد و سوم\",\n        84: \"هشتاد و چهارم\",\n        85: \"هشتاد و پنجم\",\n        86: \"هشتاد و ششم\",\n        87: \"هشتاد و هفتم\",\n        88: \"هشتاد و هشتم\",\n        89: \"هشتاد و نهم\",\n        90: \"نودم\",\n        91: \"نود و یکم\",\n        92: \"نود و دوم\",\n        93: \"نود و سوم\",\n        94: \"نود و چهارم\",\n        95: \"نود و پنجم\",\n        96: \"نود و ششم\",\n        97: \"نود و هفتم\",\n        98: \"نود و هشتم\",\n        99: \"نود و نهم\",\n        100: \"صدم\",\n        101: \"صد و یکم\",\n        102: \"صد و دوم\",\n        103: \"صد و سوم\",\n        104: \"صد و چهارم\",\n        105: \"صد و پنجم\",\n        106: \"صد و ششم\",\n        107: \"صد و هفتم\",\n        108: \"صد و هشتم\",\n        109: \"صد و نهم\",\n        110: \"صد و دهم\",\n        111: \"صد و یازدهم\",\n        112: \"صد و دوازدهم\",\n        113: \"صد و سیزدهم\",\n        114: \"صد و چهاردهم\",\n        115: \"صد و پانزدهم\",\n        116: \"صد و شانزدهم\",\n        117: \"صد و هفدهم\",\n        118: \"صد و هجدهم\",\n        119: \"صد و نوزدهم\",\n        120: \"صد و بیستم\",\n        121: \"صد و بیست و یکم\",\n        122: \"صد و بیست و دوم\",\n        123: \"صد و بیست و سوم\",\n        124: \"صد و بیست و چهارم\",\n        125: \"صد و بیست و پنجم\",\n        126: \"صد و بیست و ششم\",\n        127: \"صد و بیست و هفتم\",\n        128: \"صد و بیست و هشتم\",\n        129: \"صد و بیست و نهم\",\n        130: \"صد و سی‌ام\",\n        131: \"صد و سی‌ و یکم\",\n        132: \"صد و سی‌‌ و دوم\",\n        133: \"صد و سی‌‌ و سوم\",\n        134: \"صد و سی‌‌ و چهارم\",\n        135: \"صد و سی‌‌ و پنجم\",\n        136: \"صد و سی‌‌ و ششم\",\n        137: \"صد و سی‌‌ و هفتم\",\n        138: \"صد و سی‌‌ و هشتم\",\n        139: \"صد و سی‌‌ و نهم\",\n        140: \"صد و چهلم\",\n        141: \"صد و چهل و یکم\",\n        142: \"صد و چهل و دوم\",\n        143: \"صد و چهل و سوم\",\n        144: \"صد و چهل و چهارم\",\n        145: \"صد و چهل و پنجم\",\n        146: \"صد و چهل و ششم\",\n        147: \"صد و چهل و هفتم\",\n        148: \"صد و چهل و هشتم\",\n        149: \"صد و چهل و نهم\",\n        150: \"صد و پنجاهم\",\n        151: \"صد و پنجاه و یکم\",\n        152: \"صد و پنجاه و دوم\",\n        153: \"صد و پنجاه و سوم\",\n        154: \"صد و پنجاه و چهارم\",\n        155: \"صد و پنجاه و پنجم\",\n        156: \"صد و پنجاه و ششم\",\n        157: \"صد و پنجاه و هفتم\",\n        158: \"صد و پنجاه و هشتم\",\n        159: \"صد و پنجاه و نهم\",\n        160: \"صد و شصتم\",\n        161: \"صد و شصت و یکم\",\n        162: \"صد و شصت و دوم\",\n        163: \"صد و شصت و سوم\",\n        164: \"صد و شصت و چهارم\",\n        165: \"صد و شصت و پنجم\",\n        166: \"صد و شصت و ششم\",\n        167: \"صد و شصت و هفتم\",\n        168: \"صد و شصت و هشتم\",\n        169: \"صد و شصت و نهم\",\n        170: \"صد و هفتادم\",\n        171: \"صد و هفتاد و یکم\",\n        172: \"صد و هفتاد و دوم\",\n        173: \"صد و هفتاد و سوم\",\n        174: \"صد و هفتاد و چهارم\",\n        175: \"صد و هفتاد و پنجم\",\n        176: \"صد و هفتاد و ششم\",\n        177: \"صد و هفتاد و هفتم\",\n        178: \"صد و هفتاد و هشتم\",\n        179: \"صد و هفتاد و نهم\",\n        180: \"صد و هشتادم\",\n        181: \"صد و هشتاد و یکم\",\n        182: \"صد و هشتاد و دوم\",\n        183: \"صد و هشتاد و سوم\",\n        184: \"صد و هشتاد و چهارم\",\n        185: \"صد و هشتاد و پنجم\",\n        186: \"صد و هشتاد و ششم\",\n        187: \"صد و هشتاد و هفتم\",\n        188: \"صد و هشتاد و هشتم\",\n        189: \"صد و هشتاد و نهم\",\n        190: \"صد و نودم\",\n        191: \"صد و نود و یکم\",\n        192: \"صد و نود و دوم\",\n        193: \"صد و نود و سوم\",\n        194: \"صد و نود و چهارم\",\n        195: \"صد و نود و پنجم\",\n        196: \"صد و نود و ششم\",\n        197: \"صد و نود و هفتم\",\n        198: \"صد و نود و هشتم\",\n        199: \"صد و نود و نهم\",\n        200: \"دویستم\",\n        201: \"دویست و یکم\",\n        202: \"دویست و دوم\",\n        203: \"دویست و سوم\",\n        204: \"دویست و چهارم\",\n        205: \"دویست و پنجم\",\n        206: \"دویست و ششم\",\n        207: \"دویست و هفتم\",\n        208: \"دویست و هشتم\",\n        209: \"دویست و نهم\",\n        210: \"دویست و دهم\",\n        211: \"دویست و یازدهم\",\n        212: \"دویست و دوازدهم\",\n        213: \"دویست و سیزدهم\",\n        214: \"دویست و چهاردهم\",\n        215: \"دویست و پانزدهم\",\n        216: \"دویست و شانزدهم\",\n        217: \"دویست و هفدهم\",\n        218: \"دویست و هجدهم\",\n        219: \"دویست و نوزدهم\",\n        220: \"دویست و بیستم\",\n        221: \"دویست و بیست و یکم\",\n        222: \"دویست و بیست و دوم\",\n        223: \"دویست و بیست و سوم\",\n        224: \"دویست و بیست و چهارم\",\n        225: \"دویست و بیست و پنجم\",\n        226: \"دویست و بیست و ششم\",\n        227: \"دویست و بیست و هفتم\",\n        228: \"دویست و بیست و هشتم\",\n        229: \"دویست و بیست و نهم\",\n        230: \"دویست و سی‌ام\",\n        231: \"دویست و سی‌ و یکم\",\n        232: \"دویست و سی‌‌ و دوم\",\n        233: \"دویست و سی‌‌ و سوم\",\n        234: \"دویست و سی‌‌ و چهارم\",\n        235: \"دویست و سی‌‌ و پنجم\",\n        236: \"دویست و سی‌‌ و ششم\",\n        237: \"دویست و سی‌‌ و هفتم\",\n        238: \"دویست و سی‌‌ و هشتم\",\n        239: \"دویست و سی‌‌ و نهم\",\n        240: \"دویست و چهلم\",\n        241: \"دویست و چهل و یکم\",\n        242: \"دویست و چهل و دوم\",\n        243: \"دویست و چهل و سوم\",\n        244: \"دویست و چهل و چهارم\",\n        245: \"دویست و چهل و پنجم\",\n        246: \"دویست و چهل و ششم\",\n        247: \"دویست و چهل و هفتم\",\n        248: \"دویست و چهل و هشتم\",\n        249: \"دویست و چهل و نهم\",\n        250: \"دویست و پنجاهم\",\n        251: \"دویست و پنجاه و یکم\",\n        252: \"دویست و پنجاه و دوم\",\n        253: \"دویست و پنجاه و سوم\",\n        254: \"دویست و پنجاه و چهارم\",\n        255: \"دویست و پنجاه و پنجم\",\n        256: \"دویست و پنجاه و ششم\",\n        257: \"دویست و پنجاه و هفتم\",\n        258: \"دویست و پنجاه و هشتم\",\n        259: \"دویست و پنجاه و نهم\",\n        260: \"دویست و شصتم\",\n        261: \"دویست و شصت و یکم\",\n        262: \"دویست و شصت و دوم\",\n        263: \"دویست و شصت و سوم\",\n        264: \"دویست و شصت و چهارم\",\n        265: \"دویست و شصت و پنجم\",\n        266: \"دویست و شصت و ششم\",\n        267: \"دویست و شصت و هفتم\",\n        268: \"دویست و شصت و هشتم\",\n        269: \"دویست و شصت و نهم\",\n        270: \"دویست و هفتادم\",\n        271: \"دویست و هفتاد و یکم\",\n        272: \"دویست و هفتاد و دوم\",\n        273: \"دویست و هفتاد و سوم\",\n        274: \"دویست و هفتاد و چهارم\",\n        275: \"دویست و هفتاد و پنجم\",\n        276: \"دویست و هفتاد و ششم\",\n        277: \"دویست و هفتاد و هفتم\",\n        278: \"دویست و هفتاد و هشتم\",\n        279: \"دویست و هفتاد و نهم\",\n        280: \"دویست و هشتادم\",\n        281: \"دویست و هشتاد و یکم\",\n        282: \"دویست و هشتاد و دوم\",\n        283: \"دویست و هشتاد و سوم\",\n        284: \"دویست و هشتاد و چهارم\",\n        285: \"دویست و هشتاد و پنجم\",\n        286: \"دویست و هشتاد و ششم\",\n        287: \"دویست و هشتاد و هفتم\",\n        288: \"دویست و هشتاد و هشتم\",\n        289: \"دویست و هشتاد و نهم\",\n        290: \"دویست و نودم\",\n        291: \"دویست و نود و یکم\",\n        292: \"دویست و نود و دوم\",\n        293: \"دویست و نود و سوم\",\n        294: \"دویست و نود و چهارم\",\n        295: \"دویست و نود و پنجم\",\n        296: \"دویست و نود و ششم\",\n        297: \"دویست و نود و هفتم\",\n        298: \"دویست و نود و هشتم\",\n        299: \"دویست و نود و نهم\",\n        300: \"سیصدم\",\n        301: \"سیصد و یکم\",\n        302: \"سیصد و دوم\",\n        303: \"سیصد و سوم\",\n        304: \"سیصد و چهارم\",\n        305: \"سیصد و پنجم\",\n        306: \"سیصد و ششم\",\n        307: \"سیصد و هفتم\",\n        308: \"سیصد و هشتم\",\n        309: \"سیصد و نهم\",\n        310: \"سیصد و دهم\",\n        311: \"سیصد و یازدهم\",\n        312: \"سیصد و دوازدهم\",\n        313: \"سیصد و سیزدهم\",\n        314: \"سیصد و چهاردهم\",\n        315: \"سیصد و پانزدهم\",\n        316: \"سیصد و شانزدهم\",\n        317: \"سیصد و هفدهم\",\n        318: \"سیصد و هجدهم\",\n        319: \"سیصد و نوزدهم\",\n        320: \"سیصد و بیستم\",\n        321: \"سیصد و بیست و یکم\",\n        322: \"سیصد و بیست و دوم\",\n        323: \"سیصد و بیست و سوم\",\n        324: \"سیصد و بیست و چهارم\",\n        325: \"سیصد و بیست و پنجم\",\n        326: \"سیصد و بیست و ششم\",\n        327: \"سیصد و بیست و هفتم\",\n        328: \"سیصد و بیست و هشتم\",\n        329: \"سیصد و بیست و نهم\",\n        330: \"سیصد و سی‌ام\",\n        331: \"سیصد و سی‌ و یکم\",\n        332: \"سیصد و سی‌‌ و دوم\",\n        333: \"سیصد و سی‌‌ و سوم\",\n        334: \"سیصد و سی‌‌ و چهارم\",\n        335: \"سیصد و سی‌‌ و پنجم\",\n        336: \"سیصد و سی‌‌ و ششم\",\n        337: \"سیصد و سی‌‌ و هفتم\",\n        338: \"سیصد و سی‌‌ و هشتم\",\n        339: \"سیصد و سی‌‌ و نهم\",\n        340: \"سیصد و چهلم\",\n        341: \"سیصد و چهل و یکم\",\n        342: \"سیصد و چهل و دوم\",\n        343: \"سیصد و چهل و سوم\",\n        344: \"سیصد و چهل و چهارم\",\n        345: \"سیصد و چهل و پنجم\",\n        346: \"سیصد و چهل و ششم\",\n        347: \"سیصد و چهل و هفتم\",\n        348: \"سیصد و چهل و هشتم\",\n        349: \"سیصد و چهل و نهم\",\n        350: \"سیصد و پنجاهم\",\n        351: \"سیصد و پنجاه و یکم\",\n        352: \"سیصد و پنجاه و دوم\",\n        353: \"سیصد و پنجاه و سوم\",\n        354: \"سیصد و پنجاه و چهارم\",\n        355: \"سیصد و پنجاه و پنجم\",\n        356: \"سیصد و پنجاه و ششم\",\n        357: \"سیصد و پنجاه و هفتم\",\n        358: \"سیصد و پنجاه و هشتم\",\n        359: \"سیصد و پنجاه و نهم\",\n        360: \"سیصد و شصتم\",\n        361: \"سیصد و شصت و یکم\",\n        362: \"سیصد و شصت و دوم\",\n        363: \"سیصد و شصت و سوم\",\n        364: \"سیصد و شصت و چهارم\",\n        365: \"سیصد و شصت و پنجم\",\n        366: \"سیصد و شصت و ششم\",\n    },\n    fa2: {\n        1: \"اولین\",\n        2: \"دومین\",\n        3: \"سومین\",\n        4: \"چهارمین\",\n        5: \"پنجمین\",\n        6: \"ششمین\",\n        7: \"هفتمین\",\n        8: \"هشتمین\",\n        9: \"نهمین\",\n        10: \"دهمین\",\n        11: \"یازدهمین\",\n        12: \"دوازدهمین\",\n        13: \"سیزدهمین\",\n        14: \"چهاردهمین\",\n        15: \"پانزدهمین\",\n        16: \"شانزدهمین\",\n        17: \"هفدهمین\",\n        18: \"هجدهمین\",\n        19: \"نوزدهمین\",\n        20: \"بیستمین\",\n        21: \"بیست و یکمین\",\n        22: \"بیست و دومین\",\n        23: \"بیست و سومین\",\n        24: \"بیست و چهارمین\",\n        25: \"بیست و پنجمین\",\n        26: \"بیست و ششمین\",\n        27: \"بیست و هفتمین\",\n        28: \"بیست و هشتمین\",\n        29: \"بیست و نهمین\",\n        30: \"سی‌امین\",\n        31: \"سی‌ و یکمین\",\n        32: \"سی‌ و دومین\",\n        33: \"سی‌ و سومین\",\n        34: \"سی‌ و چهارمین\",\n        35: \"سی‌ و پنجمین\",\n        36: \"سی‌ و ششمین\",\n        37: \"سی‌ و هفتمین\",\n        38: \"سی‌ و هشتمین\",\n        39: \"سی‌ و نهمین\",\n        40: \"چهلمین\",\n        41: \"چهل و یکمین\",\n        42: \"چهل و دومین\",\n        43: \"چهل و سومین\",\n        44: \"چهل و چهارمین\",\n        45: \"چهل و پنجمین\",\n        46: \"چهل و ششمین\",\n        47: \"چهل و هفتمین\",\n        48: \"چهل و هشتمین\",\n        49: \"چهل و نهمین\",\n        50: \"پنجاهمین\",\n        51: \"پنجاه و یکمین\",\n        52: \"پنجاه و دومین\",\n        53: \"پنجاه و سومین\",\n        54: \"پنجاه و چهارمین\",\n        55: \"پنجاه و پنجمین\",\n        56: \"پنجاه و ششمین\",\n        57: \"پنجاه و هفتمین\",\n        58: \"پنجاه و هشتمین\",\n        59: \"پنجاه و نهمین\",\n        60: \"شصتمین\",\n        61: \"شصت و یکمین\",\n        62: \"شصت و دومین\",\n        63: \"شصت و سومین\",\n        64: \"شصت و چهارمین\",\n        65: \"شصت و پنجمین\",\n        66: \"شصت و ششمین\",\n        67: \"شصت و هفتمین\",\n        68: \"شصت و هشتمین\",\n        69: \"شصت و نهمین\",\n        70: \"هفتادمین\",\n        71: \"هفتاد و یکمین\",\n        72: \"هفتاد و دومین\",\n        73: \"هفتاد و سومین\",\n        74: \"هفتاد و چهارمین\",\n        75: \"هفتاد و پنجمین\",\n        76: \"هفتاد و ششمین\",\n        77: \"هفتاد و هفتمین\",\n        78: \"هفتاد و هشتمین\",\n        79: \"هفتاد و نهمین\",\n        80: \"هشتادمین\",\n        81: \"هشتاد و یکمین\",\n        82: \"هشتاد و دومین\",\n        83: \"هشتاد و سومین\",\n        84: \"هشتاد و چهارمین\",\n        85: \"هشتاد و پنجمین\",\n        86: \"هشتاد و ششمین\",\n        87: \"هشتاد و هفتمین\",\n        88: \"هشتاد و هشتمین\",\n        89: \"هشتاد و نهمین\",\n        90: \"نودمین\",\n        91: \"نود و یکمین\",\n        92: \"نود و دومین\",\n        93: \"نود و سومین\",\n        94: \"نود و چهارمین\",\n        95: \"نود و پنجمین\",\n        96: \"نود و ششمین\",\n        97: \"نود و هفتمین\",\n        98: \"نود و هشتمین\",\n        99: \"نود و نهمین\",\n        100: \"صدمین\",\n        101: \"صد و یکمین\",\n        102: \"صد و دومین\",\n        103: \"صد و سومین\",\n        104: \"صد و چهارمین\",\n        105: \"صد و پنجمین\",\n        106: \"صد و ششمین\",\n        107: \"صد و هفتمین\",\n        108: \"صد و هشتمین\",\n        109: \"صد و نهمین\",\n        110: \"صد و دهمین\",\n        111: \"صد و یازدهمین\",\n        112: \"صد و دوازدهمین\",\n        113: \"صد و سیزدهمین\",\n        114: \"صد و چهاردهمین\",\n        115: \"صد و پانزدهمین\",\n        116: \"صد و شانزدهمین\",\n        117: \"صد و هفدهمین\",\n        118: \"صد و هجدهمین\",\n        119: \"صد و نوزدهمین\",\n        120: \"صد و بیستمین\",\n        121: \"صد و بیست و یکمین\",\n        122: \"صد و بیست و دومین\",\n        123: \"صد و بیست و سومین\",\n        124: \"صد و بیست و چهارمین\",\n        125: \"صد و بیست و پنجمین\",\n        126: \"صد و بیست و ششمین\",\n        127: \"صد و بیست و هفتمین\",\n        128: \"صد و بیست و هشتمین\",\n        129: \"صد و بیست و نهمین\",\n        130: \"صد و سی‌امین\",\n        131: \"صد و سی‌ و یکمین\",\n        132: \"صد و سی‌ و دومین\",\n        133: \"صد و سی‌ و سومین\",\n        134: \"صد و سی‌ و چهارمین\",\n        135: \"صد و سی‌ و پنجمین\",\n        136: \"صد و سی‌ و ششمین\",\n        137: \"صد و سی‌ و هفتمین\",\n        138: \"صد و سی‌ و هشتمین\",\n        139: \"صد و سی‌ و نهمین\",\n        140: \"صد و چهلمین\",\n        141: \"صد و چهل و یکمین\",\n        142: \"صد و چهل و دومین\",\n        143: \"صد و چهل و سومین\",\n        144: \"صد و چهل و چهارمین\",\n        145: \"صد و چهل و پنجمین\",\n        146: \"صد و چهل و ششمین\",\n        147: \"صد و چهل و هفتمین\",\n        148: \"صد و چهل و هشتمین\",\n        149: \"صد و چهل و نهمین\",\n        150: \"صد و پنجاهمین\",\n        151: \"صد و پنجاه و یکمین\",\n        152: \"صد و پنجاه و دومین\",\n        153: \"صد و پنجاه و سومین\",\n        154: \"صد و پنجاه و چهارمین\",\n        155: \"صد و پنجاه و پنجمین\",\n        156: \"صد و پنجاه و ششمین\",\n        157: \"صد و پنجاه و هفتمین\",\n        158: \"صد و پنجاه و هشتمین\",\n        159: \"صد و پنجاه و نهمین\",\n        160: \"صد و شصتمین\",\n        161: \"صد و شصت و یکمین\",\n        162: \"صد و شصت و دومین\",\n        163: \"صد و شصت و سومین\",\n        164: \"صد و شصت و چهارمین\",\n        165: \"صد و شصت و پنجمین\",\n        166: \"صد و شصت و ششمین\",\n        167: \"صد و شصت و هفتمین\",\n        168: \"صد و شصت و هشتمین\",\n        169: \"صد و شصت و نهمین\",\n        170: \"صد و هفتادمین\",\n        171: \"صد و هفتاد و یکمین\",\n        172: \"صد و هفتاد و دومین\",\n        173: \"صد و هفتاد و سومین\",\n        174: \"صد و هفتاد و چهارمین\",\n        175: \"صد و هفتاد و پنجمین\",\n        176: \"صد و هفتاد و ششمین\",\n        177: \"صد و هفتاد و هفتمین\",\n        178: \"صد و هفتاد و هشتمین\",\n        179: \"صد و هفتاد و نهمین\",\n        180: \"صد و هشتادمین\",\n        181: \"صد و هشتاد و یکمین\",\n        182: \"صد و هشتاد و دومین\",\n        183: \"صد و هشتاد و سومین\",\n        184: \"صد و هشتاد و چهارمین\",\n        185: \"صد و هشتاد و پنجمین\",\n        186: \"صد و هشتاد و ششمین\",\n        187: \"صد و هشتاد و هفتمین\",\n        188: \"صد و هشتاد و هشتمین\",\n        189: \"صد و هشتاد و نهمین\",\n        190: \"صد و نودمین\",\n        191: \"صد و نود و یکمین\",\n        192: \"صد و نود و دومین\",\n        193: \"صد و نود و سومین\",\n        194: \"صد و نود و چهارمین\",\n        195: \"صد و نود و پنجمین\",\n        196: \"صد و نود و ششمین\",\n        197: \"صد و نود و هفتمین\",\n        198: \"صد و نود و هشتمین\",\n        199: \"صد و نود و نهمین\",\n        200: \"دویستمین\",\n        201: \"دویست و یکمین\",\n        202: \"دویست و دومین\",\n        203: \"دویست و سومین\",\n        204: \"دویست و چهارمین\",\n        205: \"دویست و پنجمین\",\n        206: \"دویست و ششمین\",\n        207: \"دویست و هفتمین\",\n        208: \"دویست و هشتمین\",\n        209: \"دویست و نهمین\",\n        210: \"دویست و دهمین\",\n        211: \"دویست و یازدهمین\",\n        212: \"دویست و دوازدهمین\",\n        213: \"دویست و سیزدهمین\",\n        214: \"دویست و چهاردهمین\",\n        215: \"دویست و پانزدهمین\",\n        216: \"دویست و شانزدهمین\",\n        217: \"دویست و هفدهمین\",\n        218: \"دویست و هجدهمین\",\n        219: \"دویست و نوزدهمین\",\n        220: \"دویست و بیستمین\",\n        221: \"دویست و بیست و یکمین\",\n        222: \"دویست و بیست و دومین\",\n        223: \"دویست و بیست و سومین\",\n        224: \"دویست و بیست و چهارمین\",\n        225: \"دویست و بیست و پنجمین\",\n        226: \"دویست و بیست و ششمین\",\n        227: \"دویست و بیست و هفتمین\",\n        228: \"دویست و بیست و هشتمین\",\n        229: \"دویست و بیست و نهمین\",\n        230: \"دویست و سی‌امین\",\n        231: \"دویست و سی‌ و یکمین\",\n        232: \"دویست و سی‌ و دومین\",\n        233: \"دویست و سی‌ و سومین\",\n        234: \"دویست و سی‌ و چهارمین\",\n        235: \"دویست و سی‌ و پنجمین\",\n        236: \"دویست و سی‌ و ششمین\",\n        237: \"دویست و سی‌ و هفتمین\",\n        238: \"دویست و سی‌ و هشتمین\",\n        239: \"دویست و سی‌ و نهمین\",\n        240: \"دویست و چهلمین\",\n        241: \"دویست و چهل و یکمین\",\n        242: \"دویست و چهل و دومین\",\n        243: \"دویست و چهل و سومین\",\n        244: \"دویست و چهل و چهارمین\",\n        245: \"دویست و چهل و پنجمین\",\n        246: \"دویست و چهل و ششمین\",\n        247: \"دویست و چهل و هفتمین\",\n        248: \"دویست و چهل و هشتمین\",\n        249: \"دویست و چهل و نهمین\",\n        250: \"دویست و پنجاهمین\",\n        251: \"دویست و پنجاه و یکمین\",\n        252: \"دویست و پنجاه و دومین\",\n        253: \"دویست و پنجاه و سومین\",\n        254: \"دویست و پنجاه و چهارمین\",\n        255: \"دویست و پنجاه و پنجمین\",\n        256: \"دویست و پنجاه و ششمین\",\n        257: \"دویست و پنجاه و هفتمین\",\n        258: \"دویست و پنجاه و هشتمین\",\n        259: \"دویست و پنجاه و نهمین\",\n        260: \"دویست و شصتمین\",\n        261: \"دویست و شصت و یکمین\",\n        262: \"دویست و شصت و دومین\",\n        263: \"دویست و شصت و سومین\",\n        264: \"دویست و شصت و چهارمین\",\n        265: \"دویست و شصت و پنجمین\",\n        266: \"دویست و شصت و ششمین\",\n        267: \"دویست و شصت و هفتمین\",\n        268: \"دویست و شصت و هشتمین\",\n        269: \"دویست و شصت و نهمین\",\n        270: \"دویست و هفتادمین\",\n        271: \"دویست و هفتاد و یکمین\",\n        272: \"دویست و هفتاد و دومین\",\n        273: \"دویست و هفتاد و سومین\",\n        274: \"دویست و هفتاد و چهارمین\",\n        275: \"دویست و هفتاد و پنجمین\",\n        276: \"دویست و هفتاد و ششمین\",\n        277: \"دویست و هفتاد و هفتمین\",\n        278: \"دویست و هفتاد و هشتمین\",\n        279: \"دویست و هفتاد و نهمین\",\n        280: \"دویست و هشتادمین\",\n        281: \"دویست و هشتاد و یکمین\",\n        282: \"دویست و هشتاد و دومین\",\n        283: \"دویست و هشتاد و سومین\",\n        284: \"دویست و هشتاد و چهارمین\",\n        285: \"دویست و هشتاد و پنجمین\",\n        286: \"دویست و هشتاد و ششمین\",\n        287: \"دویست و هشتاد و هفتمین\",\n        288: \"دویست و هشتاد و هشتمین\",\n        289: \"دویست و هشتاد و نهمین\",\n        290: \"دویست و نودمین\",\n        291: \"دویست و نود و یکمین\",\n        292: \"دویست و نود و دومین\",\n        293: \"دویست و نود و سومین\",\n        294: \"دویست و نود و چهارمین\",\n        295: \"دویست و نود و پنجمین\",\n        296: \"دویست و نود و ششمین\",\n        297: \"دویست و نود و هفتمین\",\n        298: \"دویست و نود و هشتمین\",\n        299: \"دویست و نود و نهمین\",\n        300: \"سیصدمین\",\n        301: \"سیصد و یکمین\",\n        302: \"سیصد و دومین\",\n        303: \"سیصد و سومین\",\n        304: \"سیصد و چهارمین\",\n        305: \"سیصد و پنجمین\",\n        306: \"سیصد و ششمین\",\n        307: \"سیصد و هفتمین\",\n        308: \"سیصد و هشتمین\",\n        309: \"سیصد و نهمین\",\n        310: \"سیصد و دهمین\",\n        311: \"سیصد و یازدهمین\",\n        312: \"سیصد و دوازدهمین\",\n        313: \"سیصد و سیزدهمین\",\n        314: \"سیصد و چهاردهمین\",\n        315: \"سیصد و پانزدهمین\",\n        316: \"سیصد و شانزدهمین\",\n        317: \"سیصد و هفدهمین\",\n        318: \"سیصد و هجدهمین\",\n        319: \"سیصد و نوزدهمین\",\n        320: \"سیصد و بیستمین\",\n        321: \"سیصد و بیست و یکمین\",\n        322: \"سیصد و بیست و دومین\",\n        323: \"سیصد و بیست و سومین\",\n        324: \"سیصد و بیست و چهارمین\",\n        325: \"سیصد و بیست و پنجمین\",\n        326: \"سیصد و بیست و ششمین\",\n        327: \"سیصد و بیست و هفتمین\",\n        328: \"سیصد و بیست و هشتمین\",\n        329: \"سیصد و بیست و نهمین\",\n        330: \"سیصد و سی‌امین\",\n        331: \"سیصد و سی‌ و یکمین\",\n        332: \"سیصد و سی‌ و دومین\",\n        333: \"سیصد و سی‌ و سومین\",\n        334: \"سیصد و سی‌ و چهارمین\",\n        335: \"سیصد و سی‌ و پنجمین\",\n        336: \"سیصد و سی‌ و ششمین\",\n        337: \"سیصد و سی‌ و هفتمین\",\n        338: \"سیصد و سی‌ و هشتمین\",\n        339: \"سیصد و سی‌ و نهمین\",\n        340: \"سیصد و چهلمین\",\n        341: \"سیصد و چهل و یکمین\",\n        342: \"سیصد و چهل و دومین\",\n        343: \"سیصد و چهل و سومین\",\n        344: \"سیصد و چهل و چهارمین\",\n        345: \"سیصد و چهل و پنجمین\",\n        346: \"سیصد و چهل و ششمین\",\n        347: \"سیصد و چهل و هفتمین\",\n        348: \"سیصد و چهل و هشتمین\",\n        349: \"سیصد و چهل و نهمین\",\n        350: \"سیصد و پنجاهمین\",\n        351: \"سیصد و پنجاه و یکمین\",\n        352: \"سیصد و پنجاه و دومین\",\n        353: \"سیصد و پنجاه و سومین\",\n        354: \"سیصد و پنجاه و چهارمین\",\n        355: \"سیصد و پنجاه و پنجمین\",\n        356: \"سیصد و پنجاه و ششمین\",\n        357: \"سیصد و پنجاه و هفتمین\",\n        358: \"سیصد و پنجاه و هشتمین\",\n        359: \"سیصد و پنجاه و نهمین\",\n        360: \"سیصد و شصتمین\",\n        361: \"سیصد و شصت و یکمین\",\n        362: \"سیصد و شصت و دومین\",\n        363: \"سیصد و شصت و سومین\",\n        364: \"سیصد و شصت و چهارمین\",\n        365: \"سیصد و شصت و پنجمین\",\n        366: \"سیصد و شصت و ششمین\",\n    },\n    en: function () {\n        let ordinalNumber = {};\n        for (let i = 1; i <= 366; i++) {\n            if (i == 1 || i % 10 == 1 && i != 11)\n                ordinalNumber[i] = i + 'st';\n            else if (i == 2 || i % 10 == 2 && i != 12)\n                ordinalNumber[i] = i + 'nd';\n            else if (i == 3 || i % 10 == 3 && i != 13)\n                ordinalNumber[i] = i + 'rd';\n            else\n                ordinalNumber[i] = i + 'th';\n        }\n        return ordinalNumber;\n    }(),\n};\n\nconst DAYS = {\n    fa: { // days in persian calendar start from saturday or 0\n        6: 0,\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 5,\n        5: 6,\n    },\n    en: {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n    },\n    label: {\n        fa: {\n            6: \"شنبه\",\n            0: \"یکشنبه\",\n            1: \"دوشنبه\",\n            2: \"سه‌شنبه\",\n            3: \"چهارشنبه\",\n            4: \"پنجشنبه\",\n            5: \"جمعه\",\n        },\n        en: {\n            0: \"Sunday\",\n            1: \"Monday\",\n            2: \"Tuesday\",\n            3: \"Wednesday\",\n            4: \"Thursday\",\n            5: \"Friday\",\n            6: \"Saturday\",\n        }\n    }\n};\n\nconst REGEX = {\n    format: /j*(YYYY|YY|y|Qo|QO|Q|MMMM|MMM|MM|Mo|MO|M|DDDD|DDDo|DDDO|DDD|DD|Do|DO|D|dddd|ddd|dd|do|dO|de|d|ww|WW|wo|Wo|wO|WO|w|W|HH|hh|H|h|kk|k|mm|m|ss|s|CCCC|CCC|c|t|aa|a|A)/g,\n    isNumeric: /^\\d+$/, // this regex, checks input to see is a number or not\n    separators: \"\" // find ['/',' ','-','.',',',':'] and split string to array by this symbols\n};\n\nconst TIMETYPE = function (hour, format) {\n    if (hour >= 0 && hour < 12) {\n        if (format == 'a')\n            return 'am';\n        if (format == 'aa')\n            return 'A.M.';\n        if (format == 'A')\n            return 'AM';\n        if (format == 'ja')\n            return 'ق ظ';\n        if (format == 'jaa')\n            return 'ق.ظ';\n        if (format == 'jA')\n            return 'قبل از ظهر';\n        return 'ق.ظ';\n    }\n    if (hour > 12 && hour <= 23) {\n        if (format == 'a')\n            return 'pm';\n        if (format == 'aa')\n            return 'P.M.';\n        if (format == 'A')\n            return 'PM';\n        if (format == 'ja')\n            return 'ب ظ';\n        if (format == 'jaa')\n            return 'ب.ظ';\n        if (format == 'jA')\n            return 'بعد از ظهر';\n        return 'ب.ظ';\n    }\n};\n\n\n\n//# sourceURL=webpack://PersianDate/./src/utils.js?");

/***/ })

/******/ })["default"];
});